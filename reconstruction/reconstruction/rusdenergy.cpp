#include <cmath>

using namespace std;

///////////////// JUNE 2010 ENERGY ESTIMATION TABLE (MADE USING PROTONS!) (BELOW) /////////////////////////
const int sden_qgsjetii_3_proton_nfpars      = 9;
const int sden_qgsjetii_3_proton_nsecbins    = 50;
const double sden_qgsjetii_3_proton_seclo    = 1.0;
const double sden_qgsjetii_3_proton_secup    = 2.0;
/* par[0-7]: pol7 fit parameters */
/* par[8]: point where the function becomes pol1 */
static double sden_qgsjetii_3_proton_fitfun(double *x, const double *par)
{
  double delta=x[0]-par[8];
  return
    (
     (delta < 0) ?
     (par[0]+delta*(par[1]+delta*(par[2]+delta*(par[3]+delta*(par[4]+delta*(par[5]+delta*(par[6]+delta*par[7])))))))
     :
     (par[0]+par[1]*delta)
     );
}
static double sden_qgsjetii_3_proton(double s800, double theta)
{
  static const double secbs = (sden_qgsjetii_3_proton_secup-sden_qgsjetii_3_proton_seclo)/(double)sden_qgsjetii_3_proton_nsecbins;
  static const double fpars[sden_qgsjetii_3_proton_nsecbins][sden_qgsjetii_3_proton_nfpars] = {
    {   19.036835,    1.095040,   -2.622812,   -6.002011,   -1.961494,    2.125823,   -0.325346,   -0.908887,    1.500000   },
    {   19.036437,    1.089423,   -2.165791,   -4.874252,   -1.602394,    1.709322,   -0.242571,   -0.724306,    1.500000   },
    {   19.041865,    1.086377,   -0.406593,    3.881487,   11.797030,    6.217179,   -4.618365,   -3.172074,    1.500000   },
    {   19.040085,    1.093520,    0.301508,    5.622068,   12.379965,    5.540826,   -4.497819,   -2.869689,    1.500000   },
    {   19.044969,    1.098996,    0.906644,    7.309569,   13.028243,    4.786414,   -4.363564,   -2.506649,    1.500000   },
    {   19.064169,    1.084602,    0.344487,    5.907487,   12.537545,    5.358695,   -4.462857,   -2.767270,    1.500000   },
    {   19.063567,    1.096842,    1.155320,    7.913797,   13.173542,    4.555852,   -4.301732,   -2.405232,    1.500000   },
    {   19.073521,    1.089345,    1.092722,    7.836153,   13.215802,    4.549817,   -4.312956,   -2.389177,    1.500000   },
    {   19.085806,    1.086743,    1.232721,    8.092414,   13.214075,    4.472429,   -4.277292,   -2.362754,    1.500000   },
    {   19.094783,    1.090846,    1.304245,    8.118107,   13.193017,    4.479994,   -4.276434,   -2.367275,    1.500000   },
    {   19.105097,    1.092245,    1.716338,    9.138876,   13.521981,    4.067597,   -4.196135,   -2.179869,    1.500000   },
    {   19.114066,    1.099946,    2.057422,    9.844336,   13.674061,    3.807399,   -4.129163,   -2.069101,    1.500000   },
    {   19.129940,    1.099553,    2.140905,   10.064623,   13.768914,    3.713618,   -4.118050,   -2.023464,    1.500000   },
    {   19.143278,    1.100770,    2.260815,   10.299309,   13.808149,    3.641149,   -4.101102,   -1.998225,    1.500000   },
    {   19.157361,    1.098484,    2.789752,   12.439112,   16.407962,    3.851807,   -5.433977,   -2.562117,    1.500000   },
    {   19.181617,    1.087130,    1.422172,    6.378897,    8.155492,    1.901011,   -2.402734,   -1.100041,    1.500000   },
    {   19.202318,    1.088466,    0.928355,    4.147263,    5.197718,    1.254289,   -1.379818,   -0.630161,    1.500000   },
    {   19.226362,    1.081841,    0.709878,    3.617163,    5.057239,    1.484507,   -1.441236,   -0.737120,    1.500000   },
    {   19.248609,    1.078070,    0.950233,    4.228099,    5.235229,    1.247010,   -1.392345,   -0.633628,    1.500000   },
    {   19.268724,    1.082384,    1.153828,    4.594629,    5.288101,    1.129849,   -1.362026,   -0.590469,    1.500000   },
    {   19.291498,    1.082797,    1.347300,    4.987120,    5.359301,    0.956328,   -1.313833,   -0.510878,    1.500000   },
    {   19.318810,    1.071961,    0.976039,    4.142588,    5.127624,    1.295886,   -1.396379,   -0.664988,    1.500000   },
    {   19.341378,    1.079761,    0.535298,    2.530317,    3.370328,    1.058494,   -0.810257,   -0.428343,    1.500000   },
    {   19.365092,    1.080471,   -0.020113,   -0.048100,   -0.043654,    0.496064,    0.705617,    0.258160,    1.500000   },
    {   19.392100,    1.075250,    0.117706,    0.552188,    0.790920,    0.870925,    0.634025,    0.192721,    1.500000   },
    {   19.410728,    1.078997,    0.555130,    1.383895,    0.891711,    0.570994,    0.739733,    0.320436,    1.500000   },
    {   19.435344,    1.073050,    0.016857,   -1.022427,   -2.193346,    0.158153,    2.112885,    0.911667,    1.500000   },
    {   19.451819,    1.081267,    0.743902,    1.624450,    0.706729,    0.309894,    0.826177,    0.418848,    1.500000   },
    {   19.465256,    1.094224,    0.478292,   -0.168136,   -1.920897,   -0.121499,    2.078513,    0.985676,    1.500000   },
    {   19.496745,    1.084339,   -0.368247,   -3.007591,   -4.435897,    0.369424,    3.445368,    1.385651,    1.500000   },
    {   19.532547,    1.055641,   -0.735292,   -3.533355,   -4.434810,    0.537668,    3.369041,    1.320448,    1.500000   },
    {   19.556507,    1.059091,   -1.571920,   -7.052909,   -8.608372,    0.167986,    5.164707,    2.031397,    1.500000   },
    {   19.583843,    1.065864,   -2.461701,  -10.403728,  -12.405512,   -0.139771,    6.876079,    2.729737,    1.500000   },
    {   19.604126,    1.079349,   -2.485497,  -10.529443,  -12.416436,   -0.054907,    6.840934,    2.687056,    1.500000   },
    {   19.614660,    1.100917,   -0.730486,   -4.601945,   -6.449257,    0.301650,    4.602948,    1.863620,    1.500000   },
    {   19.656205,    1.065812,   -1.090303,   -5.295336,   -6.561389,    0.592776,    4.505426,    1.731088,    1.500000   },
    {   19.691231,    1.030024,   -1.731652,   -7.160482,   -8.579444,    0.395119,    5.560397,    2.213466,    1.500000   },
    {   19.706703,    1.049431,   -1.015467,   -3.956465,   -3.960473,    1.614202,    3.865177,    1.370710,    1.500000   },
    {   19.735980,    1.064224,   -2.287530,   -9.185544,   -9.838841,    1.792478,    7.265153,    2.682193,    1.500000   },
    {   19.750409,    1.086181,   -1.733484,   -6.763854,   -6.456021,    2.485869,    5.826546,    2.010784,    1.500000   },
    {   19.779442,    1.070415,   -1.890467,   -7.173699,   -6.596237,    2.687407,    5.778225,    1.910820,    1.500000   },
    {   19.799970,    1.091333,   -1.505068,   -6.366479,   -6.409944,    2.326499,    5.882689,    2.086731,    1.500000   },
    {   19.833215,    1.064914,   -1.855022,   -6.978919,   -6.527866,    2.565841,    5.819209,    1.982252,    1.500000   },
    {   19.863479,    1.030353,   -2.076285,   -7.213981,   -6.511792,    2.620964,    5.799883,    1.971732,    1.500000   },
    {   19.896810,    1.043816,   -1.959507,   -6.856429,   -6.406161,    2.454325,    5.859220,    2.062170,    1.500000   },
    {   19.906914,    1.096534,    0.605560,    3.357960,    6.256448,    4.582201,    0.841430,   -0.160770,    1.500000   },
    {   19.930409,    1.061097,   -0.192372,    0.689989,    3.634087,    4.879636,    2.383351,    0.384403,    1.500000   },
    {   19.963765,    1.007463,   -3.050813,   -9.886591,   -8.032181,    4.354792,    7.889524,    2.551219,    1.500000   },
    {   19.941674,    1.122108,    6.033493,   41.079520,  104.693949,  123.805290,   68.535948,   14.410942,    1.500000   },
    {   19.967352,    1.122583,    5.144269,   37.171741,   99.408901,  122.880919,   70.969093,   15.534200,    1.500000   }
  };
  double log10en;
  double log10s800=log(s800)/2.3025851;
  int isectheta=(int)floor((1.0/cos(theta/57.2957895)-sden_qgsjetii_3_proton_seclo)/secbs);
  if(isectheta<0) isectheta=0;
  if(isectheta>=sden_qgsjetii_3_proton_nsecbins) isectheta=(sden_qgsjetii_3_proton_nsecbins-1);
  log10en=sden_qgsjetii_3_proton_fitfun(&log10s800,fpars[isectheta]);
  // for S800 < 1, the fit function may give a divergent value, in rare circumstatnces (
  // which manifests as energy that is too large or not a number)
  // check for that, and if so, obtain the energy at S800 = 1 and simply apply a linear scaling
  // to a value that corresponds to actual S800.
  // Such events with S800 < 1 do no pass the basic quality cuts, but we should
  // still try to obtain our best guess as to what is their energies.
  if(log10s800 < 0)
    {
      if(log10en > 19.0 || std::isnan(log10en))
	{
	  double log10s800_0 = 0;
	  double log10en_0 = sden_qgsjetii_3_proton_fitfun(&log10s800_0,fpars[isectheta]);
	  log10en = log10en_0 + log10s800;
	} 
    }
  return pow(10.0,log10en-18.0);
}
///////////////// JUNE 2010 ENERGY ESTIMATION TABLE (MADE USING PROTONS !) (ABOVE) /////////////////////////



///////////////// JULY 2010 ENERGY ESTIMATION TABLE (MADE USING IRON !) (BELOW) /////////////////////////
const int qgsjetii_3_iron_nfpars   = 9;
const int qgsjetii_3_iron_nsecbins = 50;
const double qgsjetii_3_iron_seclo = 1.0;
const double qgsjetii_3_iron_secup = 2.0;
/* par[0-7]: pol7 fit parameters */
/* par[8]: point where the function becomes pol1 */
static double qgsjetii_3_iron_fitfun(double *x, const double *par)
{
  double delta=x[0]-par[8];
  return
    (
     (delta < 0) ?
     (par[0]+delta*(par[1]+delta*(par[2]+delta*(par[3]+delta*(par[4]+delta*(par[5]+delta*(par[6]+delta*par[7])))))))
     :
     (par[0]+par[1]*delta)
     );
}
double qgsjetii_3_iron(double s800, double theta)
{
  static const double secbs = (qgsjetii_3_iron_secup-qgsjetii_3_iron_seclo)/(double)qgsjetii_3_iron_nsecbins;
  static const double fpars[qgsjetii_3_iron_nsecbins][qgsjetii_3_iron_nfpars] = {
    {   18.940804,    1.081251,   -2.192230,   -5.233462,   -1.836565,    1.868264,   -0.249615,   -0.806433,    1.500000   },
    {   18.951831,    1.078138,   -1.817175,   -4.108881,   -1.268815,    1.439924,   -0.227502,   -0.604927,    1.500000   },
    {   18.957643,    1.084108,    0.484597,    7.325818,   16.268207,    7.256562,   -6.281043,   -3.985414,    1.500000   },
    {   18.972290,    1.081604,    0.647825,    7.773232,   16.490164,    7.108936,   -6.281582,   -3.920202,    1.500000   },
    {   18.984624,    1.080741,    1.136359,    9.234725,   17.148454,    6.489131,   -6.209207,   -3.624994,    1.500000   },
    {   18.999424,    1.078377,    1.325569,    9.677031,   17.312748,    6.357358,   -6.200719,   -3.573468,    1.500000   },
    {   19.012855,    1.078700,    1.778931,   10.869532,   17.734819,    5.894040,   -6.126635,   -3.368198,    1.500000   },
    {   19.031623,    1.074834,    1.739232,   10.817591,   17.763930,    5.890435,   -6.134945,   -3.357040,    1.500000   },
    {   19.043616,    1.078545,    2.362766,   12.310013,   18.192860,    5.314628,   -6.014171,   -3.105831,    1.500000   },
    {   19.060630,    1.078035,    2.246758,   11.859743,   18.002580,    5.532948,   -6.056011,   -3.212429,    1.500000   },
    {   19.075714,    1.080797,    2.620776,   12.840786,   18.354329,    5.112684,   -5.983089,   -3.016701,    1.500000   },
    {   19.095078,    1.078237,    2.919420,   13.505031,   18.469751,    4.849870,   -5.905874,   -2.904742,    1.500000   },
    {   19.115361,    1.074757,    2.407750,   11.056869,   15.057554,    3.958516,   -4.788238,   -2.356816,    1.500000   },
    {   19.129741,    1.080750,    2.725695,   11.714969,   15.214565,    3.699933,   -4.727242,   -2.242515,    1.500000   },
    {   19.149866,    1.080197,    2.817205,   11.857758,   15.224277,    3.645564,   -4.711762,   -2.220081,    1.500000   },
    {   19.174344,    1.075577,    2.783649,   11.846879,   15.233351,    3.642673,   -4.712904,   -2.217301,    1.500000   },
    {   19.197819,    1.076353,    2.726473,   11.716531,   15.193843,    3.677406,   -4.719858,   -2.229556,    1.500000   },
    {   19.223478,    1.072070,    1.897661,    7.914044,    9.951631,    2.565716,   -2.576791,   -1.216165,    1.500000   },
    {   19.252732,    1.062707,    1.781474,    7.705714,    9.883263,    2.647400,   -2.592753,   -1.254982,    1.500000   },
    {   19.276251,    1.064205,    1.518077,    6.528768,    8.343774,    2.222487,   -2.154911,   -1.031340,    1.500000   },
    {   19.293743,    1.072925,    1.674847,    6.707740,    8.315159,    2.185617,   -2.133795,   -1.023804,    1.500000   },
    {   19.317652,    1.072632,    1.224260,    4.556780,    5.329950,    1.557369,   -0.909696,   -0.446054,    1.500000   },
    {   19.343191,    1.064891,    1.013338,    3.659454,    4.234553,    1.469861,   -0.370034,   -0.220301,    1.500000   },
    {   19.363254,    1.070484,    1.739215,    6.750897,    8.145930,    1.934390,   -2.211295,   -1.009722,    1.500000   },
    {   19.387291,    1.075074,    1.238296,    4.497863,    5.283285,    1.427212,   -1.164903,   -0.554823,    1.500000   },
    {   19.415317,    1.070329,    0.444101,    1.166474,    1.164461,    0.832894,    0.533086,    0.176442,    1.500000   },
    {   19.440658,    1.069854,   -0.070917,   -1.440744,   -2.378505,    0.445449,    2.322516,    0.940535,    1.500000   },
    {   19.461017,    1.069933,    0.695519,    1.504408,    0.845516,    0.592781,    0.957669,    0.440778,    1.500000   },
    {   19.481938,    1.073297,    1.660046,    5.863362,    6.490737,    1.246391,   -1.812371,   -0.756834,    1.500000   },
    {   19.504202,    1.078283,    1.611942,    5.345001,    5.533051,    0.825360,   -1.606429,   -0.619250,    1.500000   },
    {   19.537307,    1.064469,    0.169286,   -0.418845,   -1.265860,    0.344104,    1.657521,    0.707824,    1.500000   },
    {   19.564973,    1.054546,   -0.969139,   -4.647196,   -5.783409,    0.331768,    3.873332,    1.539785,    1.500000   },
    {   19.581952,    1.076167,    0.108866,   -0.364261,   -0.524173,    1.210676,    1.890115,    0.680350,    1.500000   },
    {   19.618783,    1.057461,   -1.452384,   -5.973324,   -6.626454,    0.833793,    4.585513,    1.742867,    1.500000   },
    {   19.631565,    1.080854,    0.000391,   -0.274842,    0.179960,    1.652553,    1.664938,    0.513019,    1.500000   },
    {   19.665370,    1.059407,   -1.385240,   -5.710707,   -6.146180,    1.443316,    5.013766,    1.859295,    1.500000   },
    {   19.691661,    1.044674,   -1.239685,   -4.814748,   -4.932659,    1.602665,    4.520054,    1.663915,    1.500000   },
    {   19.723186,    1.022669,   -2.552551,   -9.016888,   -8.916842,    1.464789,    5.878602,    2.111335,    1.500000   },
    {   19.730625,    1.057611,   -1.393653,   -5.563542,   -5.718169,    1.661303,    4.892292,    1.782048,    1.500000   },
    {   19.754243,    1.061838,   -1.542372,   -6.081819,   -5.887404,    2.478338,    5.688418,    1.983330,    1.500000   },
    {   19.774296,    1.071683,   -1.094149,   -4.353708,   -3.779400,    2.971952,    5.124805,    1.730777,    1.500000   },
    {   19.800200,    1.062878,   -0.988511,   -3.687349,   -2.754719,    3.527408,    5.188612,    1.714629,    1.500000   },
    {   19.821351,    1.064327,   -0.990631,   -3.640253,   -2.723099,    3.505492,    5.192686,    1.727983,    1.500000   },
    {   19.806904,    1.140256,    8.724248,   55.199650,  134.930033,  156.960877,   86.987006,   18.490367,    1.500000   },
    {   19.819352,    1.153015,    9.528174,   58.440077,  138.889284,  157.223748,   84.861109,   17.594773,    1.500000   },
    {   19.863299,    1.111816,    0.590736,    1.929802,    2.343085,    0.840701,   -0.424200,   -0.224889,    1.500000   },
    {   19.891114,    1.101601,   -0.702382,   -2.909659,   -2.901988,    0.956441,    2.471422,    0.888169,    1.500000   },
    {   19.918318,    1.075231,   -1.882825,   -6.992546,   -6.950751,    1.519983,    5.065857,    1.822650,    1.500000   },
    {   19.921225,    1.119193,    0.406449,    2.411842,    5.002697,    3.606621,    0.187170,   -0.375318,    1.500000   },
    {   19.937885,    1.143016,   -0.515278,   -2.012187,   -0.461587,    4.017347,    4.164907,    1.226300,    1.500000   }
  };
  double log10en;
  double log10s800=log(s800)/2.3025851;
  int isectheta=(int)floor((1.0/cos(theta/57.2957895)-qgsjetii_3_iron_seclo)/secbs);
  if(isectheta<0) isectheta=0;
  if(isectheta>=qgsjetii_3_iron_nsecbins) isectheta=(qgsjetii_3_iron_nsecbins-1);
  log10en=qgsjetii_3_iron_fitfun(&log10s800,fpars[isectheta]);
  // for S800 < 1, the fit function may give a divergent value, in rare circumstatnces (
  // which manifests as energy that is too large or not a number)
  // check for that, and if so, obtain the energy at S800 = 1 and simply apply a linear scaling
  // to a value that corresponds to actual S800.
  // Such events with S800 < 1 do no pass the basic quality cuts, but we should
  // still try to obtain our best guess as to what is their energies.
  if(log10s800 < 0)
    {
      if(log10en > 19.0 || std::isnan(log10en))
	{
	  double log10s800_0 = 0;
	  double log10en_0 = sden_qgsjetii_3_proton_fitfun(&log10s800_0,fpars[isectheta]);
	  log10en = log10en_0 + log10s800;
	} 
    }
  return pow(10.0,log10en-18.0);
}
///////////////// JULY 2010 ENERGY ESTIMATION TABLE (MADE USING IRON !) (ABOVE) /////////////////////////


///////////////////////////////////////////////////////////////////////
/////////////////// CURRENT ENERGY ESTIMATION ROUTINE /////////////////
/////////////////// USE FOR MAKING THE ENERGY SPECTRUM! ///////////////
///////////////////////////////////////////////////////////////////////

// This routine uses PROTON energy estimation table (use for making the spectrum)
// this energy scale needs to be lowered by 1.27 when calibrated
// against the FD energy scale
// s800 in VEM/m^2, theta in degrees, answer in EeV.
double rusdenergy(double s800, double theta)
{
  return sden_qgsjetii_3_proton(s800, theta); // USE ENERGY ESTIMATION TABLE MADE FROM PROTONS
}

// This routine uses IRON energy estimation table (good for CORSIKA studies only)
// this energy scale needs to be lowered by 1.17 when calibrated
// against the FD energy scale
// s800 in VEM/m^2, theta in degrees, answer in EeV
double rusdenergy_iron(double s800, double theta)
{
  return qgsjetii_3_iron(s800,theta);
}
