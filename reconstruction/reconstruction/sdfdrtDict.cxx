//
// File generated by rootcint at Wed Sep  6 14:36:41 2023

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dInetdIminusdIhomedIgrishadItadIsdanalysisdIsdfdrtdIsdfdrtDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "sdfdrtDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void dstbank_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_dstbank_class(void *p);
   static void deleteArray_dstbank_class(void *p);
   static void destruct_dstbank_class(void *p);
   static void streamer_dstbank_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::dstbank_class*)
   {
      ::dstbank_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::dstbank_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("dstbank_class", ::dstbank_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdfdrt_class.h", 52,
                  typeid(::dstbank_class), DefineBehavior(ptr, ptr),
                  &::dstbank_class::Dictionary, isa_proxy, 0,
                  sizeof(::dstbank_class) );
      instance.SetDelete(&delete_dstbank_class);
      instance.SetDeleteArray(&deleteArray_dstbank_class);
      instance.SetDestructor(&destruct_dstbank_class);
      instance.SetStreamerFunc(&streamer_dstbank_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::dstbank_class*)
   {
      return GenerateInitInstanceLocal((::dstbank_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::dstbank_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void talex00_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_talex00_class(void *p = 0);
   static void *newArray_talex00_class(Long_t size, void *p);
   static void delete_talex00_class(void *p);
   static void deleteArray_talex00_class(void *p);
   static void destruct_talex00_class(void *p);
   static void streamer_talex00_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::talex00_class*)
   {
      ::talex00_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::talex00_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("talex00_class", ::talex00_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 27,
                  typeid(::talex00_class), DefineBehavior(ptr, ptr),
                  &::talex00_class::Dictionary, isa_proxy, 0,
                  sizeof(::talex00_class) );
      instance.SetNew(&new_talex00_class);
      instance.SetNewArray(&newArray_talex00_class);
      instance.SetDelete(&delete_talex00_class);
      instance.SetDeleteArray(&deleteArray_talex00_class);
      instance.SetDestructor(&destruct_talex00_class);
      instance.SetStreamerFunc(&streamer_talex00_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::talex00_class*)
   {
      return GenerateInitInstanceLocal((::talex00_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::talex00_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void rusdraw_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_rusdraw_class(void *p = 0);
   static void *newArray_rusdraw_class(Long_t size, void *p);
   static void delete_rusdraw_class(void *p);
   static void deleteArray_rusdraw_class(void *p);
   static void destruct_rusdraw_class(void *p);
   static void streamer_rusdraw_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::rusdraw_class*)
   {
      ::rusdraw_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::rusdraw_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("rusdraw_class", ::rusdraw_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 111,
                  typeid(::rusdraw_class), DefineBehavior(ptr, ptr),
                  &::rusdraw_class::Dictionary, isa_proxy, 0,
                  sizeof(::rusdraw_class) );
      instance.SetNew(&new_rusdraw_class);
      instance.SetNewArray(&newArray_rusdraw_class);
      instance.SetDelete(&delete_rusdraw_class);
      instance.SetDeleteArray(&deleteArray_rusdraw_class);
      instance.SetDestructor(&destruct_rusdraw_class);
      instance.SetStreamerFunc(&streamer_rusdraw_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::rusdraw_class*)
   {
      return GenerateInitInstanceLocal((::rusdraw_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::rusdraw_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void rusdmc_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_rusdmc_class(void *p = 0);
   static void *newArray_rusdmc_class(Long_t size, void *p);
   static void delete_rusdmc_class(void *p);
   static void deleteArray_rusdmc_class(void *p);
   static void destruct_rusdmc_class(void *p);
   static void streamer_rusdmc_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::rusdmc_class*)
   {
      ::rusdmc_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::rusdmc_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("rusdmc_class", ::rusdmc_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 187,
                  typeid(::rusdmc_class), DefineBehavior(ptr, ptr),
                  &::rusdmc_class::Dictionary, isa_proxy, 0,
                  sizeof(::rusdmc_class) );
      instance.SetNew(&new_rusdmc_class);
      instance.SetNewArray(&newArray_rusdmc_class);
      instance.SetDelete(&delete_rusdmc_class);
      instance.SetDeleteArray(&deleteArray_rusdmc_class);
      instance.SetDestructor(&destruct_rusdmc_class);
      instance.SetStreamerFunc(&streamer_rusdmc_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::rusdmc_class*)
   {
      return GenerateInitInstanceLocal((::rusdmc_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::rusdmc_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void rusdmc1_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_rusdmc1_class(void *p = 0);
   static void *newArray_rusdmc1_class(Long_t size, void *p);
   static void delete_rusdmc1_class(void *p);
   static void deleteArray_rusdmc1_class(void *p);
   static void destruct_rusdmc1_class(void *p);
   static void streamer_rusdmc1_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::rusdmc1_class*)
   {
      ::rusdmc1_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::rusdmc1_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("rusdmc1_class", ::rusdmc1_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 220,
                  typeid(::rusdmc1_class), DefineBehavior(ptr, ptr),
                  &::rusdmc1_class::Dictionary, isa_proxy, 0,
                  sizeof(::rusdmc1_class) );
      instance.SetNew(&new_rusdmc1_class);
      instance.SetNewArray(&newArray_rusdmc1_class);
      instance.SetDelete(&delete_rusdmc1_class);
      instance.SetDeleteArray(&deleteArray_rusdmc1_class);
      instance.SetDestructor(&destruct_rusdmc1_class);
      instance.SetStreamerFunc(&streamer_rusdmc1_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::rusdmc1_class*)
   {
      return GenerateInitInstanceLocal((::rusdmc1_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::rusdmc1_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void showlib_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_showlib_class(void *p = 0);
   static void *newArray_showlib_class(Long_t size, void *p);
   static void delete_showlib_class(void *p);
   static void deleteArray_showlib_class(void *p);
   static void destruct_showlib_class(void *p);
   static void streamer_showlib_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::showlib_class*)
   {
      ::showlib_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::showlib_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("showlib_class", ::showlib_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 260,
                  typeid(::showlib_class), DefineBehavior(ptr, ptr),
                  &::showlib_class::Dictionary, isa_proxy, 0,
                  sizeof(::showlib_class) );
      instance.SetNew(&new_showlib_class);
      instance.SetNewArray(&newArray_showlib_class);
      instance.SetDelete(&delete_showlib_class);
      instance.SetDeleteArray(&deleteArray_showlib_class);
      instance.SetDestructor(&destruct_showlib_class);
      instance.SetStreamerFunc(&streamer_showlib_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::showlib_class*)
   {
      return GenerateInitInstanceLocal((::showlib_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::showlib_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void bsdinfo_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_bsdinfo_class(void *p = 0);
   static void *newArray_bsdinfo_class(Long_t size, void *p);
   static void delete_bsdinfo_class(void *p);
   static void deleteArray_bsdinfo_class(void *p);
   static void destruct_bsdinfo_class(void *p);
   static void streamer_bsdinfo_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::bsdinfo_class*)
   {
      ::bsdinfo_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::bsdinfo_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("bsdinfo_class", ::bsdinfo_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 315,
                  typeid(::bsdinfo_class), DefineBehavior(ptr, ptr),
                  &::bsdinfo_class::Dictionary, isa_proxy, 0,
                  sizeof(::bsdinfo_class) );
      instance.SetNew(&new_bsdinfo_class);
      instance.SetNewArray(&newArray_bsdinfo_class);
      instance.SetDelete(&delete_bsdinfo_class);
      instance.SetDeleteArray(&deleteArray_bsdinfo_class);
      instance.SetDestructor(&destruct_bsdinfo_class);
      instance.SetStreamerFunc(&streamer_bsdinfo_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::bsdinfo_class*)
   {
      return GenerateInitInstanceLocal((::bsdinfo_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::bsdinfo_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void sdtrgbk_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_sdtrgbk_class(void *p = 0);
   static void *newArray_sdtrgbk_class(Long_t size, void *p);
   static void delete_sdtrgbk_class(void *p);
   static void deleteArray_sdtrgbk_class(void *p);
   static void destruct_sdtrgbk_class(void *p);
   static void streamer_sdtrgbk_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::sdtrgbk_class*)
   {
      ::sdtrgbk_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::sdtrgbk_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("sdtrgbk_class", ::sdtrgbk_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 373,
                  typeid(::sdtrgbk_class), DefineBehavior(ptr, ptr),
                  &::sdtrgbk_class::Dictionary, isa_proxy, 0,
                  sizeof(::sdtrgbk_class) );
      instance.SetNew(&new_sdtrgbk_class);
      instance.SetNewArray(&newArray_sdtrgbk_class);
      instance.SetDelete(&delete_sdtrgbk_class);
      instance.SetDeleteArray(&deleteArray_sdtrgbk_class);
      instance.SetDestructor(&destruct_sdtrgbk_class);
      instance.SetStreamerFunc(&streamer_sdtrgbk_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::sdtrgbk_class*)
   {
      return GenerateInitInstanceLocal((::sdtrgbk_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::sdtrgbk_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SDEventSubData_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SDEventSubData_class(void *p = 0);
   static void *newArray_SDEventSubData_class(Long_t size, void *p);
   static void delete_SDEventSubData_class(void *p);
   static void deleteArray_SDEventSubData_class(void *p);
   static void destruct_SDEventSubData_class(void *p);
   static void streamer_SDEventSubData_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SDEventSubData_class*)
   {
      ::SDEventSubData_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SDEventSubData_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SDEventSubData_class", ::SDEventSubData_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 514,
                  typeid(::SDEventSubData_class), DefineBehavior(ptr, ptr),
                  &::SDEventSubData_class::Dictionary, isa_proxy, 0,
                  sizeof(::SDEventSubData_class) );
      instance.SetNew(&new_SDEventSubData_class);
      instance.SetNewArray(&newArray_SDEventSubData_class);
      instance.SetDelete(&delete_SDEventSubData_class);
      instance.SetDeleteArray(&deleteArray_SDEventSubData_class);
      instance.SetDestructor(&destruct_SDEventSubData_class);
      instance.SetStreamerFunc(&streamer_SDEventSubData_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SDEventSubData_class*)
   {
      return GenerateInitInstanceLocal((::SDEventSubData_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SDEventSubData_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void tasdevent_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_tasdevent_class(void *p = 0);
   static void *newArray_tasdevent_class(Long_t size, void *p);
   static void delete_tasdevent_class(void *p);
   static void deleteArray_tasdevent_class(void *p);
   static void destruct_tasdevent_class(void *p);
   static void streamer_tasdevent_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::tasdevent_class*)
   {
      ::tasdevent_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::tasdevent_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("tasdevent_class", ::tasdevent_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 540,
                  typeid(::tasdevent_class), DefineBehavior(ptr, ptr),
                  &::tasdevent_class::Dictionary, isa_proxy, 0,
                  sizeof(::tasdevent_class) );
      instance.SetNew(&new_tasdevent_class);
      instance.SetNewArray(&newArray_tasdevent_class);
      instance.SetDelete(&delete_tasdevent_class);
      instance.SetDeleteArray(&deleteArray_tasdevent_class);
      instance.SetDestructor(&destruct_tasdevent_class);
      instance.SetStreamerFunc(&streamer_tasdevent_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::tasdevent_class*)
   {
      return GenerateInitInstanceLocal((::tasdevent_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::tasdevent_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SDCalibHostData_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SDCalibHostData_class(void *p = 0);
   static void *newArray_SDCalibHostData_class(Long_t size, void *p);
   static void delete_SDCalibHostData_class(void *p);
   static void deleteArray_SDCalibHostData_class(void *p);
   static void destruct_SDCalibHostData_class(void *p);
   static void streamer_SDCalibHostData_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SDCalibHostData_class*)
   {
      ::SDCalibHostData_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SDCalibHostData_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SDCalibHostData_class", ::SDCalibHostData_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 602,
                  typeid(::SDCalibHostData_class), DefineBehavior(ptr, ptr),
                  &::SDCalibHostData_class::Dictionary, isa_proxy, 0,
                  sizeof(::SDCalibHostData_class) );
      instance.SetNew(&new_SDCalibHostData_class);
      instance.SetNewArray(&newArray_SDCalibHostData_class);
      instance.SetDelete(&delete_SDCalibHostData_class);
      instance.SetDeleteArray(&deleteArray_SDCalibHostData_class);
      instance.SetDestructor(&destruct_SDCalibHostData_class);
      instance.SetStreamerFunc(&streamer_SDCalibHostData_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SDCalibHostData_class*)
   {
      return GenerateInitInstanceLocal((::SDCalibHostData_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SDCalibHostData_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SDCalibSubData_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SDCalibSubData_class(void *p = 0);
   static void *newArray_SDCalibSubData_class(Long_t size, void *p);
   static void delete_SDCalibSubData_class(void *p);
   static void deleteArray_SDCalibSubData_class(void *p);
   static void destruct_SDCalibSubData_class(void *p);
   static void streamer_SDCalibSubData_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SDCalibSubData_class*)
   {
      ::SDCalibSubData_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SDCalibSubData_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SDCalibSubData_class", ::SDCalibSubData_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 631,
                  typeid(::SDCalibSubData_class), DefineBehavior(ptr, ptr),
                  &::SDCalibSubData_class::Dictionary, isa_proxy, 0,
                  sizeof(::SDCalibSubData_class) );
      instance.SetNew(&new_SDCalibSubData_class);
      instance.SetNewArray(&newArray_SDCalibSubData_class);
      instance.SetDelete(&delete_SDCalibSubData_class);
      instance.SetDeleteArray(&deleteArray_SDCalibSubData_class);
      instance.SetDestructor(&destruct_SDCalibSubData_class);
      instance.SetStreamerFunc(&streamer_SDCalibSubData_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SDCalibSubData_class*)
   {
      return GenerateInitInstanceLocal((::SDCalibSubData_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SDCalibSubData_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SDCalibWeatherData_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SDCalibWeatherData_class(void *p = 0);
   static void *newArray_SDCalibWeatherData_class(Long_t size, void *p);
   static void delete_SDCalibWeatherData_class(void *p);
   static void deleteArray_SDCalibWeatherData_class(void *p);
   static void destruct_SDCalibWeatherData_class(void *p);
   static void streamer_SDCalibWeatherData_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SDCalibWeatherData_class*)
   {
      ::SDCalibWeatherData_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SDCalibWeatherData_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SDCalibWeatherData_class", ::SDCalibWeatherData_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 743,
                  typeid(::SDCalibWeatherData_class), DefineBehavior(ptr, ptr),
                  &::SDCalibWeatherData_class::Dictionary, isa_proxy, 0,
                  sizeof(::SDCalibWeatherData_class) );
      instance.SetNew(&new_SDCalibWeatherData_class);
      instance.SetNewArray(&newArray_SDCalibWeatherData_class);
      instance.SetDelete(&delete_SDCalibWeatherData_class);
      instance.SetDeleteArray(&deleteArray_SDCalibWeatherData_class);
      instance.SetDestructor(&destruct_SDCalibWeatherData_class);
      instance.SetStreamerFunc(&streamer_SDCalibWeatherData_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SDCalibWeatherData_class*)
   {
      return GenerateInitInstanceLocal((::SDCalibWeatherData_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SDCalibWeatherData_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void tasdcalib_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_tasdcalib_class(void *p = 0);
   static void *newArray_tasdcalib_class(Long_t size, void *p);
   static void delete_tasdcalib_class(void *p);
   static void deleteArray_tasdcalib_class(void *p);
   static void destruct_tasdcalib_class(void *p);
   static void streamer_tasdcalib_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::tasdcalib_class*)
   {
      ::tasdcalib_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::tasdcalib_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("tasdcalib_class", ::tasdcalib_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 767,
                  typeid(::tasdcalib_class), DefineBehavior(ptr, ptr),
                  &::tasdcalib_class::Dictionary, isa_proxy, 0,
                  sizeof(::tasdcalib_class) );
      instance.SetNew(&new_tasdcalib_class);
      instance.SetNewArray(&newArray_tasdcalib_class);
      instance.SetDelete(&delete_tasdcalib_class);
      instance.SetDeleteArray(&deleteArray_tasdcalib_class);
      instance.SetDestructor(&destruct_tasdcalib_class);
      instance.SetStreamerFunc(&streamer_tasdcalib_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::tasdcalib_class*)
   {
      return GenerateInitInstanceLocal((::tasdcalib_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::tasdcalib_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SDCalibevData_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SDCalibevData_class(void *p = 0);
   static void *newArray_SDCalibevData_class(Long_t size, void *p);
   static void delete_SDCalibevData_class(void *p);
   static void deleteArray_SDCalibevData_class(void *p);
   static void destruct_SDCalibevData_class(void *p);
   static void streamer_SDCalibevData_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SDCalibevData_class*)
   {
      ::SDCalibevData_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SDCalibevData_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SDCalibevData_class", ::SDCalibevData_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 817,
                  typeid(::SDCalibevData_class), DefineBehavior(ptr, ptr),
                  &::SDCalibevData_class::Dictionary, isa_proxy, 0,
                  sizeof(::SDCalibevData_class) );
      instance.SetNew(&new_SDCalibevData_class);
      instance.SetNewArray(&newArray_SDCalibevData_class);
      instance.SetDelete(&delete_SDCalibevData_class);
      instance.SetDeleteArray(&deleteArray_SDCalibevData_class);
      instance.SetDestructor(&destruct_SDCalibevData_class);
      instance.SetStreamerFunc(&streamer_SDCalibevData_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SDCalibevData_class*)
   {
      return GenerateInitInstanceLocal((::SDCalibevData_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SDCalibevData_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SDCalibevWeatherData_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SDCalibevWeatherData_class(void *p = 0);
   static void *newArray_SDCalibevWeatherData_class(Long_t size, void *p);
   static void delete_SDCalibevWeatherData_class(void *p);
   static void deleteArray_SDCalibevWeatherData_class(void *p);
   static void destruct_SDCalibevWeatherData_class(void *p);
   static void streamer_SDCalibevWeatherData_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SDCalibevWeatherData_class*)
   {
      ::SDCalibevWeatherData_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SDCalibevWeatherData_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SDCalibevWeatherData_class", ::SDCalibevWeatherData_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 964,
                  typeid(::SDCalibevWeatherData_class), DefineBehavior(ptr, ptr),
                  &::SDCalibevWeatherData_class::Dictionary, isa_proxy, 0,
                  sizeof(::SDCalibevWeatherData_class) );
      instance.SetNew(&new_SDCalibevWeatherData_class);
      instance.SetNewArray(&newArray_SDCalibevWeatherData_class);
      instance.SetDelete(&delete_SDCalibevWeatherData_class);
      instance.SetDeleteArray(&deleteArray_SDCalibevWeatherData_class);
      instance.SetDestructor(&destruct_SDCalibevWeatherData_class);
      instance.SetStreamerFunc(&streamer_SDCalibevWeatherData_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SDCalibevWeatherData_class*)
   {
      return GenerateInitInstanceLocal((::SDCalibevWeatherData_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SDCalibevWeatherData_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SDCalibevSimInfo_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SDCalibevSimInfo_class(void *p = 0);
   static void *newArray_SDCalibevSimInfo_class(Long_t size, void *p);
   static void delete_SDCalibevSimInfo_class(void *p);
   static void deleteArray_SDCalibevSimInfo_class(void *p);
   static void destruct_SDCalibevSimInfo_class(void *p);
   static void streamer_SDCalibevSimInfo_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SDCalibevSimInfo_class*)
   {
      ::SDCalibevSimInfo_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SDCalibevSimInfo_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SDCalibevSimInfo_class", ::SDCalibevSimInfo_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 983,
                  typeid(::SDCalibevSimInfo_class), DefineBehavior(ptr, ptr),
                  &::SDCalibevSimInfo_class::Dictionary, isa_proxy, 0,
                  sizeof(::SDCalibevSimInfo_class) );
      instance.SetNew(&new_SDCalibevSimInfo_class);
      instance.SetNewArray(&newArray_SDCalibevSimInfo_class);
      instance.SetDelete(&delete_SDCalibevSimInfo_class);
      instance.SetDeleteArray(&deleteArray_SDCalibevSimInfo_class);
      instance.SetDestructor(&destruct_SDCalibevSimInfo_class);
      instance.SetStreamerFunc(&streamer_SDCalibevSimInfo_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SDCalibevSimInfo_class*)
   {
      return GenerateInitInstanceLocal((::SDCalibevSimInfo_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SDCalibevSimInfo_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void tasdcalibev_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_tasdcalibev_class(void *p = 0);
   static void *newArray_tasdcalibev_class(Long_t size, void *p);
   static void delete_tasdcalibev_class(void *p);
   static void deleteArray_tasdcalibev_class(void *p);
   static void destruct_tasdcalibev_class(void *p);
   static void streamer_tasdcalibev_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::tasdcalibev_class*)
   {
      ::tasdcalibev_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::tasdcalibev_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("tasdcalibev_class", ::tasdcalibev_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 1009,
                  typeid(::tasdcalibev_class), DefineBehavior(ptr, ptr),
                  &::tasdcalibev_class::Dictionary, isa_proxy, 0,
                  sizeof(::tasdcalibev_class) );
      instance.SetNew(&new_tasdcalibev_class);
      instance.SetNewArray(&newArray_tasdcalibev_class);
      instance.SetDelete(&delete_tasdcalibev_class);
      instance.SetDeleteArray(&deleteArray_tasdcalibev_class);
      instance.SetDestructor(&destruct_tasdcalibev_class);
      instance.SetStreamerFunc(&streamer_tasdcalibev_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::tasdcalibev_class*)
   {
      return GenerateInitInstanceLocal((::tasdcalibev_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::tasdcalibev_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void rufptn_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_rufptn_class(void *p = 0);
   static void *newArray_rufptn_class(Long_t size, void *p);
   static void delete_rufptn_class(void *p);
   static void deleteArray_rufptn_class(void *p);
   static void destruct_rufptn_class(void *p);
   static void streamer_rufptn_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::rufptn_class*)
   {
      ::rufptn_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::rufptn_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("rufptn_class", ::rufptn_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 1078,
                  typeid(::rufptn_class), DefineBehavior(ptr, ptr),
                  &::rufptn_class::Dictionary, isa_proxy, 0,
                  sizeof(::rufptn_class) );
      instance.SetNew(&new_rufptn_class);
      instance.SetNewArray(&newArray_rufptn_class);
      instance.SetDelete(&delete_rufptn_class);
      instance.SetDeleteArray(&deleteArray_rufptn_class);
      instance.SetDestructor(&destruct_rufptn_class);
      instance.SetStreamerFunc(&streamer_rufptn_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::rufptn_class*)
   {
      return GenerateInitInstanceLocal((::rufptn_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::rufptn_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void rusdgeom_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_rusdgeom_class(void *p = 0);
   static void *newArray_rusdgeom_class(Long_t size, void *p);
   static void delete_rusdgeom_class(void *p);
   static void deleteArray_rusdgeom_class(void *p);
   static void destruct_rusdgeom_class(void *p);
   static void streamer_rusdgeom_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::rusdgeom_class*)
   {
      ::rusdgeom_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::rusdgeom_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("rusdgeom_class", ::rusdgeom_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 1185,
                  typeid(::rusdgeom_class), DefineBehavior(ptr, ptr),
                  &::rusdgeom_class::Dictionary, isa_proxy, 0,
                  sizeof(::rusdgeom_class) );
      instance.SetNew(&new_rusdgeom_class);
      instance.SetNewArray(&newArray_rusdgeom_class);
      instance.SetDelete(&delete_rusdgeom_class);
      instance.SetDeleteArray(&deleteArray_rusdgeom_class);
      instance.SetDestructor(&destruct_rusdgeom_class);
      instance.SetStreamerFunc(&streamer_rusdgeom_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::rusdgeom_class*)
   {
      return GenerateInitInstanceLocal((::rusdgeom_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::rusdgeom_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void rufldf_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_rufldf_class(void *p = 0);
   static void *newArray_rufldf_class(Long_t size, void *p);
   static void delete_rufldf_class(void *p);
   static void deleteArray_rufldf_class(void *p);
   static void destruct_rufldf_class(void *p);
   static void streamer_rufldf_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::rufldf_class*)
   {
      ::rufldf_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::rufldf_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("rufldf_class", ::rufldf_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 1333,
                  typeid(::rufldf_class), DefineBehavior(ptr, ptr),
                  &::rufldf_class::Dictionary, isa_proxy, 0,
                  sizeof(::rufldf_class) );
      instance.SetNew(&new_rufldf_class);
      instance.SetNewArray(&newArray_rufldf_class);
      instance.SetDelete(&delete_rufldf_class);
      instance.SetDeleteArray(&deleteArray_rufldf_class);
      instance.SetDestructor(&destruct_rufldf_class);
      instance.SetStreamerFunc(&streamer_rufldf_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::rufldf_class*)
   {
      return GenerateInitInstanceLocal((::rufldf_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::rufldf_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void etrack_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_etrack_class(void *p = 0);
   static void *newArray_etrack_class(Long_t size, void *p);
   static void delete_etrack_class(void *p);
   static void deleteArray_etrack_class(void *p);
   static void destruct_etrack_class(void *p);
   static void streamer_etrack_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::etrack_class*)
   {
      ::etrack_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::etrack_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("etrack_class", ::etrack_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 1399,
                  typeid(::etrack_class), DefineBehavior(ptr, ptr),
                  &::etrack_class::Dictionary, isa_proxy, 0,
                  sizeof(::etrack_class) );
      instance.SetNew(&new_etrack_class);
      instance.SetNewArray(&newArray_etrack_class);
      instance.SetDelete(&delete_etrack_class);
      instance.SetDeleteArray(&deleteArray_etrack_class);
      instance.SetDestructor(&destruct_etrack_class);
      instance.SetStreamerFunc(&streamer_etrack_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::etrack_class*)
   {
      return GenerateInitInstanceLocal((::etrack_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::etrack_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void atmpar_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_atmpar_class(void *p = 0);
   static void *newArray_atmpar_class(Long_t size, void *p);
   static void delete_atmpar_class(void *p);
   static void deleteArray_atmpar_class(void *p);
   static void destruct_atmpar_class(void *p);
   static void streamer_atmpar_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::atmpar_class*)
   {
      ::atmpar_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::atmpar_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("atmpar_class", ::atmpar_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdrt_class.h", 1455,
                  typeid(::atmpar_class), DefineBehavior(ptr, ptr),
                  &::atmpar_class::Dictionary, isa_proxy, 0,
                  sizeof(::atmpar_class) );
      instance.SetNew(&new_atmpar_class);
      instance.SetNewArray(&newArray_atmpar_class);
      instance.SetDelete(&delete_atmpar_class);
      instance.SetDeleteArray(&deleteArray_atmpar_class);
      instance.SetDestructor(&destruct_atmpar_class);
      instance.SetStreamerFunc(&streamer_atmpar_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::atmpar_class*)
   {
      return GenerateInitInstanceLocal((::atmpar_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::atmpar_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void fdraw_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_fdraw_class(void *p = 0);
   static void *newArray_fdraw_class(Long_t size, void *p);
   static void delete_fdraw_class(void *p);
   static void deleteArray_fdraw_class(void *p);
   static void destruct_fdraw_class(void *p);
   static void streamer_fdraw_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::fdraw_class*)
   {
      ::fdraw_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::fdraw_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("fdraw_class", ::fdraw_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 15,
                  typeid(::fdraw_class), DefineBehavior(ptr, ptr),
                  &::fdraw_class::Dictionary, isa_proxy, 0,
                  sizeof(::fdraw_class) );
      instance.SetNew(&new_fdraw_class);
      instance.SetNewArray(&newArray_fdraw_class);
      instance.SetDelete(&delete_fdraw_class);
      instance.SetDeleteArray(&deleteArray_fdraw_class);
      instance.SetDestructor(&destruct_fdraw_class);
      instance.SetStreamerFunc(&streamer_fdraw_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::fdraw_class*)
   {
      return GenerateInitInstanceLocal((::fdraw_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::fdraw_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void brraw_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_brraw_class(void *p = 0);
   static void *newArray_brraw_class(Long_t size, void *p);
   static void delete_brraw_class(void *p);
   static void deleteArray_brraw_class(void *p);
   static void destruct_brraw_class(void *p);
   static void streamer_brraw_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::brraw_class*)
   {
      ::brraw_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::brraw_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("brraw_class", ::brraw_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 101,
                  typeid(::brraw_class), DefineBehavior(ptr, ptr),
                  &::brraw_class::Dictionary, isa_proxy, 0,
                  sizeof(::brraw_class) );
      instance.SetNew(&new_brraw_class);
      instance.SetNewArray(&newArray_brraw_class);
      instance.SetDelete(&delete_brraw_class);
      instance.SetDeleteArray(&deleteArray_brraw_class);
      instance.SetDestructor(&destruct_brraw_class);
      instance.SetStreamerFunc(&streamer_brraw_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::brraw_class*)
   {
      return GenerateInitInstanceLocal((::brraw_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::brraw_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void lrraw_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_lrraw_class(void *p = 0);
   static void *newArray_lrraw_class(Long_t size, void *p);
   static void delete_lrraw_class(void *p);
   static void deleteArray_lrraw_class(void *p);
   static void destruct_lrraw_class(void *p);
   static void streamer_lrraw_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::lrraw_class*)
   {
      ::lrraw_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::lrraw_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("lrraw_class", ::lrraw_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 120,
                  typeid(::lrraw_class), DefineBehavior(ptr, ptr),
                  &::lrraw_class::Dictionary, isa_proxy, 0,
                  sizeof(::lrraw_class) );
      instance.SetNew(&new_lrraw_class);
      instance.SetNewArray(&newArray_lrraw_class);
      instance.SetDelete(&delete_lrraw_class);
      instance.SetDeleteArray(&deleteArray_lrraw_class);
      instance.SetDestructor(&destruct_lrraw_class);
      instance.SetStreamerFunc(&streamer_lrraw_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::lrraw_class*)
   {
      return GenerateInitInstanceLocal((::lrraw_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::lrraw_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void fdplane_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_fdplane_class(void *p = 0);
   static void *newArray_fdplane_class(Long_t size, void *p);
   static void delete_fdplane_class(void *p);
   static void deleteArray_fdplane_class(void *p);
   static void destruct_fdplane_class(void *p);
   static void streamer_fdplane_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::fdplane_class*)
   {
      ::fdplane_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::fdplane_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("fdplane_class", ::fdplane_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 142,
                  typeid(::fdplane_class), DefineBehavior(ptr, ptr),
                  &::fdplane_class::Dictionary, isa_proxy, 0,
                  sizeof(::fdplane_class) );
      instance.SetNew(&new_fdplane_class);
      instance.SetNewArray(&newArray_fdplane_class);
      instance.SetDelete(&delete_fdplane_class);
      instance.SetDeleteArray(&deleteArray_fdplane_class);
      instance.SetDestructor(&destruct_fdplane_class);
      instance.SetStreamerFunc(&streamer_fdplane_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::fdplane_class*)
   {
      return GenerateInitInstanceLocal((::fdplane_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::fdplane_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void brplane_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_brplane_class(void *p = 0);
   static void *newArray_brplane_class(Long_t size, void *p);
   static void delete_brplane_class(void *p);
   static void deleteArray_brplane_class(void *p);
   static void destruct_brplane_class(void *p);
   static void streamer_brplane_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::brplane_class*)
   {
      ::brplane_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::brplane_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("brplane_class", ::brplane_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 256,
                  typeid(::brplane_class), DefineBehavior(ptr, ptr),
                  &::brplane_class::Dictionary, isa_proxy, 0,
                  sizeof(::brplane_class) );
      instance.SetNew(&new_brplane_class);
      instance.SetNewArray(&newArray_brplane_class);
      instance.SetDelete(&delete_brplane_class);
      instance.SetDeleteArray(&deleteArray_brplane_class);
      instance.SetDestructor(&destruct_brplane_class);
      instance.SetStreamerFunc(&streamer_brplane_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::brplane_class*)
   {
      return GenerateInitInstanceLocal((::brplane_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::brplane_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void lrplane_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_lrplane_class(void *p = 0);
   static void *newArray_lrplane_class(Long_t size, void *p);
   static void delete_lrplane_class(void *p);
   static void deleteArray_lrplane_class(void *p);
   static void destruct_lrplane_class(void *p);
   static void streamer_lrplane_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::lrplane_class*)
   {
      ::lrplane_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::lrplane_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("lrplane_class", ::lrplane_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 275,
                  typeid(::lrplane_class), DefineBehavior(ptr, ptr),
                  &::lrplane_class::Dictionary, isa_proxy, 0,
                  sizeof(::lrplane_class) );
      instance.SetNew(&new_lrplane_class);
      instance.SetNewArray(&newArray_lrplane_class);
      instance.SetDelete(&delete_lrplane_class);
      instance.SetDeleteArray(&deleteArray_lrplane_class);
      instance.SetDestructor(&destruct_lrplane_class);
      instance.SetStreamerFunc(&streamer_lrplane_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::lrplane_class*)
   {
      return GenerateInitInstanceLocal((::lrplane_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::lrplane_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void fdprofile_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_fdprofile_class(void *p = 0);
   static void *newArray_fdprofile_class(Long_t size, void *p);
   static void delete_fdprofile_class(void *p);
   static void deleteArray_fdprofile_class(void *p);
   static void destruct_fdprofile_class(void *p);
   static void streamer_fdprofile_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::fdprofile_class*)
   {
      ::fdprofile_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::fdprofile_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("fdprofile_class", ::fdprofile_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 297,
                  typeid(::fdprofile_class), DefineBehavior(ptr, ptr),
                  &::fdprofile_class::Dictionary, isa_proxy, 0,
                  sizeof(::fdprofile_class) );
      instance.SetNew(&new_fdprofile_class);
      instance.SetNewArray(&newArray_fdprofile_class);
      instance.SetDelete(&delete_fdprofile_class);
      instance.SetDeleteArray(&deleteArray_fdprofile_class);
      instance.SetDestructor(&destruct_fdprofile_class);
      instance.SetStreamerFunc(&streamer_fdprofile_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::fdprofile_class*)
   {
      return GenerateInitInstanceLocal((::fdprofile_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::fdprofile_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void brprofile_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_brprofile_class(void *p = 0);
   static void *newArray_brprofile_class(Long_t size, void *p);
   static void delete_brprofile_class(void *p);
   static void deleteArray_brprofile_class(void *p);
   static void destruct_brprofile_class(void *p);
   static void streamer_brprofile_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::brprofile_class*)
   {
      ::brprofile_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::brprofile_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("brprofile_class", ::brprofile_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 380,
                  typeid(::brprofile_class), DefineBehavior(ptr, ptr),
                  &::brprofile_class::Dictionary, isa_proxy, 0,
                  sizeof(::brprofile_class) );
      instance.SetNew(&new_brprofile_class);
      instance.SetNewArray(&newArray_brprofile_class);
      instance.SetDelete(&delete_brprofile_class);
      instance.SetDeleteArray(&deleteArray_brprofile_class);
      instance.SetDestructor(&destruct_brprofile_class);
      instance.SetStreamerFunc(&streamer_brprofile_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::brprofile_class*)
   {
      return GenerateInitInstanceLocal((::brprofile_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::brprofile_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void lrprofile_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_lrprofile_class(void *p = 0);
   static void *newArray_lrprofile_class(Long_t size, void *p);
   static void delete_lrprofile_class(void *p);
   static void deleteArray_lrprofile_class(void *p);
   static void destruct_lrprofile_class(void *p);
   static void streamer_lrprofile_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::lrprofile_class*)
   {
      ::lrprofile_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::lrprofile_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("lrprofile_class", ::lrprofile_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 399,
                  typeid(::lrprofile_class), DefineBehavior(ptr, ptr),
                  &::lrprofile_class::Dictionary, isa_proxy, 0,
                  sizeof(::lrprofile_class) );
      instance.SetNew(&new_lrprofile_class);
      instance.SetNewArray(&newArray_lrprofile_class);
      instance.SetDelete(&delete_lrprofile_class);
      instance.SetDeleteArray(&deleteArray_lrprofile_class);
      instance.SetDestructor(&destruct_lrprofile_class);
      instance.SetStreamerFunc(&streamer_lrprofile_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::lrprofile_class*)
   {
      return GenerateInitInstanceLocal((::lrprofile_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::lrprofile_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void fdtubeprofile_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_fdtubeprofile_class(void *p = 0);
   static void *newArray_fdtubeprofile_class(Long_t size, void *p);
   static void delete_fdtubeprofile_class(void *p);
   static void deleteArray_fdtubeprofile_class(void *p);
   static void destruct_fdtubeprofile_class(void *p);
   static void streamer_fdtubeprofile_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::fdtubeprofile_class*)
   {
      ::fdtubeprofile_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::fdtubeprofile_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("fdtubeprofile_class", ::fdtubeprofile_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 423,
                  typeid(::fdtubeprofile_class), DefineBehavior(ptr, ptr),
                  &::fdtubeprofile_class::Dictionary, isa_proxy, 0,
                  sizeof(::fdtubeprofile_class) );
      instance.SetNew(&new_fdtubeprofile_class);
      instance.SetNewArray(&newArray_fdtubeprofile_class);
      instance.SetDelete(&delete_fdtubeprofile_class);
      instance.SetDeleteArray(&deleteArray_fdtubeprofile_class);
      instance.SetDestructor(&destruct_fdtubeprofile_class);
      instance.SetStreamerFunc(&streamer_fdtubeprofile_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::fdtubeprofile_class*)
   {
      return GenerateInitInstanceLocal((::fdtubeprofile_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::fdtubeprofile_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void brtubeprofile_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_brtubeprofile_class(void *p = 0);
   static void *newArray_brtubeprofile_class(Long_t size, void *p);
   static void delete_brtubeprofile_class(void *p);
   static void deleteArray_brtubeprofile_class(void *p);
   static void destruct_brtubeprofile_class(void *p);
   static void streamer_brtubeprofile_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::brtubeprofile_class*)
   {
      ::brtubeprofile_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::brtubeprofile_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("brtubeprofile_class", ::brtubeprofile_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 518,
                  typeid(::brtubeprofile_class), DefineBehavior(ptr, ptr),
                  &::brtubeprofile_class::Dictionary, isa_proxy, 0,
                  sizeof(::brtubeprofile_class) );
      instance.SetNew(&new_brtubeprofile_class);
      instance.SetNewArray(&newArray_brtubeprofile_class);
      instance.SetDelete(&delete_brtubeprofile_class);
      instance.SetDeleteArray(&deleteArray_brtubeprofile_class);
      instance.SetDestructor(&destruct_brtubeprofile_class);
      instance.SetStreamerFunc(&streamer_brtubeprofile_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::brtubeprofile_class*)
   {
      return GenerateInitInstanceLocal((::brtubeprofile_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::brtubeprofile_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void lrtubeprofile_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_lrtubeprofile_class(void *p = 0);
   static void *newArray_lrtubeprofile_class(Long_t size, void *p);
   static void delete_lrtubeprofile_class(void *p);
   static void deleteArray_lrtubeprofile_class(void *p);
   static void destruct_lrtubeprofile_class(void *p);
   static void streamer_lrtubeprofile_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::lrtubeprofile_class*)
   {
      ::lrtubeprofile_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::lrtubeprofile_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("lrtubeprofile_class", ::lrtubeprofile_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 537,
                  typeid(::lrtubeprofile_class), DefineBehavior(ptr, ptr),
                  &::lrtubeprofile_class::Dictionary, isa_proxy, 0,
                  sizeof(::lrtubeprofile_class) );
      instance.SetNew(&new_lrtubeprofile_class);
      instance.SetNewArray(&newArray_lrtubeprofile_class);
      instance.SetDelete(&delete_lrtubeprofile_class);
      instance.SetDeleteArray(&deleteArray_lrtubeprofile_class);
      instance.SetDestructor(&destruct_lrtubeprofile_class);
      instance.SetStreamerFunc(&streamer_lrtubeprofile_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::lrtubeprofile_class*)
   {
      return GenerateInitInstanceLocal((::lrtubeprofile_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::lrtubeprofile_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void hbar_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_hbar_class(void *p = 0);
   static void *newArray_hbar_class(Long_t size, void *p);
   static void delete_hbar_class(void *p);
   static void deleteArray_hbar_class(void *p);
   static void destruct_hbar_class(void *p);
   static void streamer_hbar_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::hbar_class*)
   {
      ::hbar_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::hbar_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("hbar_class", ::hbar_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 559,
                  typeid(::hbar_class), DefineBehavior(ptr, ptr),
                  &::hbar_class::Dictionary, isa_proxy, 0,
                  sizeof(::hbar_class) );
      instance.SetNew(&new_hbar_class);
      instance.SetNewArray(&newArray_hbar_class);
      instance.SetDelete(&delete_hbar_class);
      instance.SetDeleteArray(&deleteArray_hbar_class);
      instance.SetDestructor(&destruct_hbar_class);
      instance.SetStreamerFunc(&streamer_hbar_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::hbar_class*)
   {
      return GenerateInitInstanceLocal((::hbar_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::hbar_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void hraw1_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_hraw1_class(void *p = 0);
   static void *newArray_hraw1_class(Long_t size, void *p);
   static void delete_hraw1_class(void *p);
   static void deleteArray_hraw1_class(void *p);
   static void destruct_hraw1_class(void *p);
   static void streamer_hraw1_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::hraw1_class*)
   {
      ::hraw1_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::hraw1_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("hraw1_class", ::hraw1_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 686,
                  typeid(::hraw1_class), DefineBehavior(ptr, ptr),
                  &::hraw1_class::Dictionary, isa_proxy, 0,
                  sizeof(::hraw1_class) );
      instance.SetNew(&new_hraw1_class);
      instance.SetNewArray(&newArray_hraw1_class);
      instance.SetDelete(&delete_hraw1_class);
      instance.SetDeleteArray(&deleteArray_hraw1_class);
      instance.SetDestructor(&destruct_hraw1_class);
      instance.SetStreamerFunc(&streamer_hraw1_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::hraw1_class*)
   {
      return GenerateInitInstanceLocal((::hraw1_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::hraw1_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void mc04_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_mc04_class(void *p = 0);
   static void *newArray_mc04_class(Long_t size, void *p);
   static void delete_mc04_class(void *p);
   static void deleteArray_mc04_class(void *p);
   static void destruct_mc04_class(void *p);
   static void streamer_mc04_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::mc04_class*)
   {
      ::mc04_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::mc04_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("mc04_class", ::mc04_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 743,
                  typeid(::mc04_class), DefineBehavior(ptr, ptr),
                  &::mc04_class::Dictionary, isa_proxy, 0,
                  sizeof(::mc04_class) );
      instance.SetNew(&new_mc04_class);
      instance.SetNewArray(&newArray_mc04_class);
      instance.SetDelete(&delete_mc04_class);
      instance.SetDeleteArray(&deleteArray_mc04_class);
      instance.SetDestructor(&destruct_mc04_class);
      instance.SetStreamerFunc(&streamer_mc04_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::mc04_class*)
   {
      return GenerateInitInstanceLocal((::mc04_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::mc04_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void mcraw_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_mcraw_class(void *p = 0);
   static void *newArray_mcraw_class(Long_t size, void *p);
   static void delete_mcraw_class(void *p);
   static void deleteArray_mcraw_class(void *p);
   static void destruct_mcraw_class(void *p);
   static void streamer_mcraw_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::mcraw_class*)
   {
      ::mcraw_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::mcraw_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("mcraw_class", ::mcraw_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 840,
                  typeid(::mcraw_class), DefineBehavior(ptr, ptr),
                  &::mcraw_class::Dictionary, isa_proxy, 0,
                  sizeof(::mcraw_class) );
      instance.SetNew(&new_mcraw_class);
      instance.SetNewArray(&newArray_mcraw_class);
      instance.SetDelete(&delete_mcraw_class);
      instance.SetDeleteArray(&deleteArray_mcraw_class);
      instance.SetDestructor(&destruct_mcraw_class);
      instance.SetStreamerFunc(&streamer_mcraw_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::mcraw_class*)
   {
      return GenerateInitInstanceLocal((::mcraw_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::mcraw_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void stps2_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_stps2_class(void *p = 0);
   static void *newArray_stps2_class(Long_t size, void *p);
   static void delete_stps2_class(void *p);
   static void deleteArray_stps2_class(void *p);
   static void destruct_stps2_class(void *p);
   static void streamer_stps2_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::stps2_class*)
   {
      ::stps2_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::stps2_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("stps2_class", ::stps2_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 907,
                  typeid(::stps2_class), DefineBehavior(ptr, ptr),
                  &::stps2_class::Dictionary, isa_proxy, 0,
                  sizeof(::stps2_class) );
      instance.SetNew(&new_stps2_class);
      instance.SetNewArray(&newArray_stps2_class);
      instance.SetDelete(&delete_stps2_class);
      instance.SetDeleteArray(&deleteArray_stps2_class);
      instance.SetDestructor(&destruct_stps2_class);
      instance.SetStreamerFunc(&streamer_stps2_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::stps2_class*)
   {
      return GenerateInitInstanceLocal((::stps2_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::stps2_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void stpln_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_stpln_class(void *p = 0);
   static void *newArray_stpln_class(Long_t size, void *p);
   static void delete_stpln_class(void *p);
   static void deleteArray_stpln_class(void *p);
   static void destruct_stpln_class(void *p);
   static void streamer_stpln_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::stpln_class*)
   {
      ::stpln_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::stpln_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("stpln_class", ::stpln_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 1007,
                  typeid(::stpln_class), DefineBehavior(ptr, ptr),
                  &::stpln_class::Dictionary, isa_proxy, 0,
                  sizeof(::stpln_class) );
      instance.SetNew(&new_stpln_class);
      instance.SetNewArray(&newArray_stpln_class);
      instance.SetDelete(&delete_stpln_class);
      instance.SetDeleteArray(&deleteArray_stpln_class);
      instance.SetDestructor(&destruct_stpln_class);
      instance.SetStreamerFunc(&streamer_stpln_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::stpln_class*)
   {
      return GenerateInitInstanceLocal((::stpln_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::stpln_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void hctim_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_hctim_class(void *p = 0);
   static void *newArray_hctim_class(Long_t size, void *p);
   static void delete_hctim_class(void *p);
   static void deleteArray_hctim_class(void *p);
   static void destruct_hctim_class(void *p);
   static void streamer_hctim_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::hctim_class*)
   {
      ::hctim_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::hctim_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("hctim_class", ::hctim_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 1090,
                  typeid(::hctim_class), DefineBehavior(ptr, ptr),
                  &::hctim_class::Dictionary, isa_proxy, 0,
                  sizeof(::hctim_class) );
      instance.SetNew(&new_hctim_class);
      instance.SetNewArray(&newArray_hctim_class);
      instance.SetDelete(&delete_hctim_class);
      instance.SetDeleteArray(&deleteArray_hctim_class);
      instance.SetDestructor(&destruct_hctim_class);
      instance.SetStreamerFunc(&streamer_hctim_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::hctim_class*)
   {
      return GenerateInitInstanceLocal((::hctim_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::hctim_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void hcbin_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_hcbin_class(void *p = 0);
   static void *newArray_hcbin_class(Long_t size, void *p);
   static void delete_hcbin_class(void *p);
   static void deleteArray_hcbin_class(void *p);
   static void destruct_hcbin_class(void *p);
   static void streamer_hcbin_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::hcbin_class*)
   {
      ::hcbin_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::hcbin_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("hcbin_class", ::hcbin_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 1178,
                  typeid(::hcbin_class), DefineBehavior(ptr, ptr),
                  &::hcbin_class::Dictionary, isa_proxy, 0,
                  sizeof(::hcbin_class) );
      instance.SetNew(&new_hcbin_class);
      instance.SetNewArray(&newArray_hcbin_class);
      instance.SetDelete(&delete_hcbin_class);
      instance.SetDeleteArray(&deleteArray_hcbin_class);
      instance.SetDestructor(&destruct_hcbin_class);
      instance.SetStreamerFunc(&streamer_hcbin_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::hcbin_class*)
   {
      return GenerateInitInstanceLocal((::hcbin_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::hcbin_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void prfc_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_prfc_class(void *p = 0);
   static void *newArray_prfc_class(Long_t size, void *p);
   static void delete_prfc_class(void *p);
   static void deleteArray_prfc_class(void *p);
   static void destruct_prfc_class(void *p);
   static void streamer_prfc_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::prfc_class*)
   {
      ::prfc_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::prfc_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("prfc_class", ::prfc_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 1224,
                  typeid(::prfc_class), DefineBehavior(ptr, ptr),
                  &::prfc_class::Dictionary, isa_proxy, 0,
                  sizeof(::prfc_class) );
      instance.SetNew(&new_prfc_class);
      instance.SetNewArray(&newArray_prfc_class);
      instance.SetDelete(&delete_prfc_class);
      instance.SetDeleteArray(&deleteArray_prfc_class);
      instance.SetDestructor(&destruct_prfc_class);
      instance.SetStreamerFunc(&streamer_prfc_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::prfc_class*)
   {
      return GenerateInitInstanceLocal((::prfc_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::prfc_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void fdatmos_param_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_fdatmos_param_class(void *p = 0);
   static void *newArray_fdatmos_param_class(Long_t size, void *p);
   static void delete_fdatmos_param_class(void *p);
   static void deleteArray_fdatmos_param_class(void *p);
   static void destruct_fdatmos_param_class(void *p);
   static void streamer_fdatmos_param_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::fdatmos_param_class*)
   {
      ::fdatmos_param_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::fdatmos_param_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("fdatmos_param_class", ::fdatmos_param_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 1396,
                  typeid(::fdatmos_param_class), DefineBehavior(ptr, ptr),
                  &::fdatmos_param_class::Dictionary, isa_proxy, 0,
                  sizeof(::fdatmos_param_class) );
      instance.SetNew(&new_fdatmos_param_class);
      instance.SetNewArray(&newArray_fdatmos_param_class);
      instance.SetDelete(&delete_fdatmos_param_class);
      instance.SetDeleteArray(&deleteArray_fdatmos_param_class);
      instance.SetDestructor(&destruct_fdatmos_param_class);
      instance.SetStreamerFunc(&streamer_fdatmos_param_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::fdatmos_param_class*)
   {
      return GenerateInitInstanceLocal((::fdatmos_param_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::fdatmos_param_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void gdas_class_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_gdas_class(void *p = 0);
   static void *newArray_gdas_class(Long_t size, void *p);
   static void delete_gdas_class(void *p);
   static void deleteArray_gdas_class(void *p);
   static void destruct_gdas_class(void *p);
   static void streamer_gdas_class(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::gdas_class*)
   {
      ::gdas_class *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::gdas_class >(0);
      static ::ROOT::TGenericClassInfo 
         instance("gdas_class", ::gdas_class::Class_Version(), "/net/minus/home/grisha/ta/sdanalysis/sdfdrt/fdrt_class.h", 1439,
                  typeid(::gdas_class), DefineBehavior(ptr, ptr),
                  &::gdas_class::Dictionary, isa_proxy, 0,
                  sizeof(::gdas_class) );
      instance.SetNew(&new_gdas_class);
      instance.SetNewArray(&newArray_gdas_class);
      instance.SetDelete(&delete_gdas_class);
      instance.SetDeleteArray(&deleteArray_gdas_class);
      instance.SetDestructor(&destruct_gdas_class);
      instance.SetStreamerFunc(&streamer_gdas_class);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::gdas_class*)
   {
      return GenerateInitInstanceLocal((::gdas_class*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::gdas_class*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *dstbank_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *dstbank_class::Class_Name()
{
   return "dstbank_class";
}

//______________________________________________________________________________
const char *dstbank_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::dstbank_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int dstbank_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::dstbank_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void dstbank_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::dstbank_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *dstbank_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::dstbank_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *talex00_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *talex00_class::Class_Name()
{
   return "talex00_class";
}

//______________________________________________________________________________
const char *talex00_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::talex00_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int talex00_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::talex00_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void talex00_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::talex00_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *talex00_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::talex00_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *rusdraw_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *rusdraw_class::Class_Name()
{
   return "rusdraw_class";
}

//______________________________________________________________________________
const char *rusdraw_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::rusdraw_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int rusdraw_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::rusdraw_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void rusdraw_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::rusdraw_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *rusdraw_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::rusdraw_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *rusdmc_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *rusdmc_class::Class_Name()
{
   return "rusdmc_class";
}

//______________________________________________________________________________
const char *rusdmc_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::rusdmc_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int rusdmc_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::rusdmc_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void rusdmc_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::rusdmc_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *rusdmc_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::rusdmc_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *rusdmc1_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *rusdmc1_class::Class_Name()
{
   return "rusdmc1_class";
}

//______________________________________________________________________________
const char *rusdmc1_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::rusdmc1_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int rusdmc1_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::rusdmc1_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void rusdmc1_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::rusdmc1_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *rusdmc1_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::rusdmc1_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *showlib_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *showlib_class::Class_Name()
{
   return "showlib_class";
}

//______________________________________________________________________________
const char *showlib_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::showlib_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int showlib_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::showlib_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void showlib_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::showlib_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *showlib_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::showlib_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *bsdinfo_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *bsdinfo_class::Class_Name()
{
   return "bsdinfo_class";
}

//______________________________________________________________________________
const char *bsdinfo_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::bsdinfo_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int bsdinfo_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::bsdinfo_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void bsdinfo_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::bsdinfo_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *bsdinfo_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::bsdinfo_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *sdtrgbk_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *sdtrgbk_class::Class_Name()
{
   return "sdtrgbk_class";
}

//______________________________________________________________________________
const char *sdtrgbk_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::sdtrgbk_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int sdtrgbk_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::sdtrgbk_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void sdtrgbk_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::sdtrgbk_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *sdtrgbk_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::sdtrgbk_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SDEventSubData_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SDEventSubData_class::Class_Name()
{
   return "SDEventSubData_class";
}

//______________________________________________________________________________
const char *SDEventSubData_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SDEventSubData_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SDEventSubData_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SDEventSubData_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SDEventSubData_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SDEventSubData_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SDEventSubData_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SDEventSubData_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *tasdevent_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *tasdevent_class::Class_Name()
{
   return "tasdevent_class";
}

//______________________________________________________________________________
const char *tasdevent_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tasdevent_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int tasdevent_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tasdevent_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void tasdevent_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tasdevent_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *tasdevent_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tasdevent_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SDCalibHostData_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SDCalibHostData_class::Class_Name()
{
   return "SDCalibHostData_class";
}

//______________________________________________________________________________
const char *SDCalibHostData_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SDCalibHostData_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SDCalibHostData_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SDCalibHostData_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SDCalibHostData_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SDCalibHostData_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SDCalibHostData_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SDCalibHostData_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SDCalibSubData_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SDCalibSubData_class::Class_Name()
{
   return "SDCalibSubData_class";
}

//______________________________________________________________________________
const char *SDCalibSubData_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SDCalibSubData_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SDCalibSubData_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SDCalibSubData_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SDCalibSubData_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SDCalibSubData_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SDCalibSubData_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SDCalibSubData_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SDCalibWeatherData_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SDCalibWeatherData_class::Class_Name()
{
   return "SDCalibWeatherData_class";
}

//______________________________________________________________________________
const char *SDCalibWeatherData_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SDCalibWeatherData_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SDCalibWeatherData_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SDCalibWeatherData_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SDCalibWeatherData_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SDCalibWeatherData_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SDCalibWeatherData_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SDCalibWeatherData_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *tasdcalib_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *tasdcalib_class::Class_Name()
{
   return "tasdcalib_class";
}

//______________________________________________________________________________
const char *tasdcalib_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tasdcalib_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int tasdcalib_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tasdcalib_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void tasdcalib_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tasdcalib_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *tasdcalib_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tasdcalib_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SDCalibevData_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SDCalibevData_class::Class_Name()
{
   return "SDCalibevData_class";
}

//______________________________________________________________________________
const char *SDCalibevData_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SDCalibevData_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SDCalibevData_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SDCalibevData_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SDCalibevData_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SDCalibevData_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SDCalibevData_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SDCalibevData_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SDCalibevWeatherData_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SDCalibevWeatherData_class::Class_Name()
{
   return "SDCalibevWeatherData_class";
}

//______________________________________________________________________________
const char *SDCalibevWeatherData_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SDCalibevWeatherData_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SDCalibevWeatherData_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SDCalibevWeatherData_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SDCalibevWeatherData_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SDCalibevWeatherData_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SDCalibevWeatherData_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SDCalibevWeatherData_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SDCalibevSimInfo_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SDCalibevSimInfo_class::Class_Name()
{
   return "SDCalibevSimInfo_class";
}

//______________________________________________________________________________
const char *SDCalibevSimInfo_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SDCalibevSimInfo_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SDCalibevSimInfo_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SDCalibevSimInfo_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SDCalibevSimInfo_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SDCalibevSimInfo_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SDCalibevSimInfo_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SDCalibevSimInfo_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *tasdcalibev_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *tasdcalibev_class::Class_Name()
{
   return "tasdcalibev_class";
}

//______________________________________________________________________________
const char *tasdcalibev_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tasdcalibev_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int tasdcalibev_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tasdcalibev_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void tasdcalibev_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tasdcalibev_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *tasdcalibev_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tasdcalibev_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *rufptn_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *rufptn_class::Class_Name()
{
   return "rufptn_class";
}

//______________________________________________________________________________
const char *rufptn_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::rufptn_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int rufptn_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::rufptn_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void rufptn_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::rufptn_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *rufptn_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::rufptn_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *rusdgeom_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *rusdgeom_class::Class_Name()
{
   return "rusdgeom_class";
}

//______________________________________________________________________________
const char *rusdgeom_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::rusdgeom_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int rusdgeom_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::rusdgeom_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void rusdgeom_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::rusdgeom_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *rusdgeom_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::rusdgeom_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *rufldf_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *rufldf_class::Class_Name()
{
   return "rufldf_class";
}

//______________________________________________________________________________
const char *rufldf_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::rufldf_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int rufldf_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::rufldf_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void rufldf_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::rufldf_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *rufldf_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::rufldf_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *etrack_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *etrack_class::Class_Name()
{
   return "etrack_class";
}

//______________________________________________________________________________
const char *etrack_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::etrack_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int etrack_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::etrack_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void etrack_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::etrack_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *etrack_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::etrack_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *atmpar_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *atmpar_class::Class_Name()
{
   return "atmpar_class";
}

//______________________________________________________________________________
const char *atmpar_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::atmpar_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int atmpar_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::atmpar_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void atmpar_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::atmpar_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *atmpar_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::atmpar_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *fdraw_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *fdraw_class::Class_Name()
{
   return "fdraw_class";
}

//______________________________________________________________________________
const char *fdraw_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::fdraw_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int fdraw_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::fdraw_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void fdraw_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::fdraw_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *fdraw_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::fdraw_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *brraw_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *brraw_class::Class_Name()
{
   return "brraw_class";
}

//______________________________________________________________________________
const char *brraw_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::brraw_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int brraw_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::brraw_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void brraw_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::brraw_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *brraw_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::brraw_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *lrraw_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *lrraw_class::Class_Name()
{
   return "lrraw_class";
}

//______________________________________________________________________________
const char *lrraw_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::lrraw_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int lrraw_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::lrraw_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void lrraw_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::lrraw_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *lrraw_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::lrraw_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *fdplane_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *fdplane_class::Class_Name()
{
   return "fdplane_class";
}

//______________________________________________________________________________
const char *fdplane_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::fdplane_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int fdplane_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::fdplane_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void fdplane_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::fdplane_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *fdplane_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::fdplane_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *brplane_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *brplane_class::Class_Name()
{
   return "brplane_class";
}

//______________________________________________________________________________
const char *brplane_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::brplane_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int brplane_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::brplane_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void brplane_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::brplane_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *brplane_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::brplane_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *lrplane_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *lrplane_class::Class_Name()
{
   return "lrplane_class";
}

//______________________________________________________________________________
const char *lrplane_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::lrplane_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int lrplane_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::lrplane_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void lrplane_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::lrplane_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *lrplane_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::lrplane_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *fdprofile_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *fdprofile_class::Class_Name()
{
   return "fdprofile_class";
}

//______________________________________________________________________________
const char *fdprofile_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::fdprofile_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int fdprofile_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::fdprofile_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void fdprofile_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::fdprofile_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *fdprofile_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::fdprofile_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *brprofile_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *brprofile_class::Class_Name()
{
   return "brprofile_class";
}

//______________________________________________________________________________
const char *brprofile_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::brprofile_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int brprofile_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::brprofile_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void brprofile_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::brprofile_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *brprofile_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::brprofile_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *lrprofile_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *lrprofile_class::Class_Name()
{
   return "lrprofile_class";
}

//______________________________________________________________________________
const char *lrprofile_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::lrprofile_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int lrprofile_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::lrprofile_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void lrprofile_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::lrprofile_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *lrprofile_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::lrprofile_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *fdtubeprofile_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *fdtubeprofile_class::Class_Name()
{
   return "fdtubeprofile_class";
}

//______________________________________________________________________________
const char *fdtubeprofile_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::fdtubeprofile_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int fdtubeprofile_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::fdtubeprofile_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void fdtubeprofile_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::fdtubeprofile_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *fdtubeprofile_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::fdtubeprofile_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *brtubeprofile_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *brtubeprofile_class::Class_Name()
{
   return "brtubeprofile_class";
}

//______________________________________________________________________________
const char *brtubeprofile_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::brtubeprofile_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int brtubeprofile_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::brtubeprofile_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void brtubeprofile_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::brtubeprofile_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *brtubeprofile_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::brtubeprofile_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *lrtubeprofile_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *lrtubeprofile_class::Class_Name()
{
   return "lrtubeprofile_class";
}

//______________________________________________________________________________
const char *lrtubeprofile_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::lrtubeprofile_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int lrtubeprofile_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::lrtubeprofile_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void lrtubeprofile_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::lrtubeprofile_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *lrtubeprofile_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::lrtubeprofile_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *hbar_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *hbar_class::Class_Name()
{
   return "hbar_class";
}

//______________________________________________________________________________
const char *hbar_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::hbar_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int hbar_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::hbar_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void hbar_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::hbar_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *hbar_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::hbar_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *hraw1_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *hraw1_class::Class_Name()
{
   return "hraw1_class";
}

//______________________________________________________________________________
const char *hraw1_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::hraw1_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int hraw1_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::hraw1_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void hraw1_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::hraw1_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *hraw1_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::hraw1_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *mc04_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *mc04_class::Class_Name()
{
   return "mc04_class";
}

//______________________________________________________________________________
const char *mc04_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::mc04_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int mc04_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::mc04_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void mc04_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::mc04_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *mc04_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::mc04_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *mcraw_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *mcraw_class::Class_Name()
{
   return "mcraw_class";
}

//______________________________________________________________________________
const char *mcraw_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::mcraw_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int mcraw_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::mcraw_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void mcraw_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::mcraw_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *mcraw_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::mcraw_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *stps2_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *stps2_class::Class_Name()
{
   return "stps2_class";
}

//______________________________________________________________________________
const char *stps2_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::stps2_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int stps2_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::stps2_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void stps2_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::stps2_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *stps2_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::stps2_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *stpln_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *stpln_class::Class_Name()
{
   return "stpln_class";
}

//______________________________________________________________________________
const char *stpln_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::stpln_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int stpln_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::stpln_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void stpln_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::stpln_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *stpln_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::stpln_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *hctim_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *hctim_class::Class_Name()
{
   return "hctim_class";
}

//______________________________________________________________________________
const char *hctim_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::hctim_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int hctim_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::hctim_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void hctim_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::hctim_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *hctim_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::hctim_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *hcbin_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *hcbin_class::Class_Name()
{
   return "hcbin_class";
}

//______________________________________________________________________________
const char *hcbin_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::hcbin_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int hcbin_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::hcbin_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void hcbin_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::hcbin_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *hcbin_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::hcbin_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *prfc_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *prfc_class::Class_Name()
{
   return "prfc_class";
}

//______________________________________________________________________________
const char *prfc_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::prfc_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int prfc_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::prfc_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void prfc_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::prfc_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *prfc_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::prfc_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *fdatmos_param_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *fdatmos_param_class::Class_Name()
{
   return "fdatmos_param_class";
}

//______________________________________________________________________________
const char *fdatmos_param_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::fdatmos_param_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int fdatmos_param_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::fdatmos_param_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void fdatmos_param_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::fdatmos_param_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *fdatmos_param_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::fdatmos_param_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *gdas_class::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *gdas_class::Class_Name()
{
   return "gdas_class";
}

//______________________________________________________________________________
const char *gdas_class::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::gdas_class*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int gdas_class::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::gdas_class*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void gdas_class::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::gdas_class*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *gdas_class::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::gdas_class*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void dstbank_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class dstbank_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> dstbank_id;
      R__b >> dstbank_version;
      R__b.CheckByteCount(R__s, R__c, dstbank_class::IsA());
   } else {
      R__c = R__b.WriteVersion(dstbank_class::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << dstbank_id;
      R__b << dstbank_version;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void dstbank_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class dstbank_class.
      TClass *R__cl = ::dstbank_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dstbank_id", &dstbank_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dstbank_version", &dstbank_version);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_dstbank_class(void *p) {
      delete ((::dstbank_class*)p);
   }
   static void deleteArray_dstbank_class(void *p) {
      delete [] ((::dstbank_class*)p);
   }
   static void destruct_dstbank_class(void *p) {
      typedef ::dstbank_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_dstbank_class(TBuffer &buf, void *obj) {
      ((::dstbank_class*)obj)->::dstbank_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::dstbank_class

//______________________________________________________________________________
void talex00_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class talex00_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> event_num;
      R__b >> event_code;
      R__b >> site;
      {
         vector<Int_t> &R__stl =  run_id;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  trig_id;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> errcode;
      R__b >> yymmdd;
      R__b >> hhmmss;
      R__b >> usec;
      R__b >> monyymmdd;
      R__b >> monhhmmss;
      R__b >> nofwf;
      {
         vector<Int_t> &R__stl =  nretry;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  wf_id;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  trig_code;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  xxyy;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  clkcnt;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mclkcnt;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  fadcti;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("fadcti streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  fadcav;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("fadcav streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<vector<Int_t> > > &R__stl =  fadc;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >));
         if (R__tcl1==0) {
            Error("fadc streamer","Missing the TClass object for vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  pchmip;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("pchmip streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  pchped;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("pchped streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  lhpchmip;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("lhpchmip streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  lhpchped;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("lhpchped streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  rhpchmip;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("rhpchmip streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  rhpchped;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("rhpchped streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  mftndof;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("mftndof streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  mip;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("mip streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  mftchi2;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("mftchi2 streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<vector<Double_t> > > &R__stl =  mftp;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >));
         if (R__tcl1==0) {
            Error("mftp streamer","Missing the TClass object for vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<vector<Double_t> > > &R__stl =  mftpe;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >));
         if (R__tcl1==0) {
            Error("mftpe streamer","Missing the TClass object for vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  lat_lon_alt;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("lat_lon_alt streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  xyz_cor_clf;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("xyz_cor_clf streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, talex00_class::IsA());
   } else {
      R__c = R__b.WriteVersion(talex00_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << event_num;
      R__b << event_code;
      R__b << site;
      {
         vector<Int_t> &R__stl =  run_id;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  trig_id;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << errcode;
      R__b << yymmdd;
      R__b << hhmmss;
      R__b << usec;
      R__b << monyymmdd;
      R__b << monhhmmss;
      R__b << nofwf;
      {
         vector<Int_t> &R__stl =  nretry;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  wf_id;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  trig_code;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  xxyy;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  clkcnt;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mclkcnt;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  fadcti;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("fadcti streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  fadcav;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("fadcav streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<vector<Int_t> > > &R__stl =  fadc;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >));
         if (R__tcl1==0) {
            Error("fadc streamer","Missing the TClass object for vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >!");
            return;
         }
            vector<vector<vector<Int_t> > >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  pchmip;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("pchmip streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  pchped;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("pchped streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  lhpchmip;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("lhpchmip streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  lhpchped;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("lhpchped streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  rhpchmip;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("rhpchmip streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  rhpchped;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("rhpchped streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  mftndof;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("mftndof streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  mip;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("mip streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  mftchi2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("mftchi2 streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<vector<Double_t> > > &R__stl =  mftp;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >));
         if (R__tcl1==0) {
            Error("mftp streamer","Missing the TClass object for vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >!");
            return;
         }
            vector<vector<vector<Double_t> > >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<vector<Double_t> > > &R__stl =  mftpe;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >));
         if (R__tcl1==0) {
            Error("mftpe streamer","Missing the TClass object for vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >!");
            return;
         }
            vector<vector<vector<Double_t> > >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  lat_lon_alt;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("lat_lon_alt streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  xyz_cor_clf;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("xyz_cor_clf streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void talex00_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class talex00_class.
      TClass *R__cl = ::talex00_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event_num", &event_num);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event_code", &event_code);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "site", &site);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run_id", (void*)&run_id);
      R__insp.InspectMember("vector<Int_t>", (void*)&run_id, "run_id.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trig_id", (void*)&trig_id);
      R__insp.InspectMember("vector<Int_t>", (void*)&trig_id, "trig_id.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errcode", &errcode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yymmdd", &yymmdd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hhmmss", &hhmmss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "usec", &usec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "monyymmdd", &monyymmdd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "monhhmmss", &monhhmmss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nofwf", &nofwf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nretry", (void*)&nretry);
      R__insp.InspectMember("vector<Int_t>", (void*)&nretry, "nretry.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wf_id", (void*)&wf_id);
      R__insp.InspectMember("vector<Int_t>", (void*)&wf_id, "wf_id.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trig_code", (void*)&trig_code);
      R__insp.InspectMember("vector<Int_t>", (void*)&trig_code, "trig_code.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xxyy", (void*)&xxyy);
      R__insp.InspectMember("vector<Int_t>", (void*)&xxyy, "xxyy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clkcnt", (void*)&clkcnt);
      R__insp.InspectMember("vector<Int_t>", (void*)&clkcnt, "clkcnt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mclkcnt", (void*)&mclkcnt);
      R__insp.InspectMember("vector<Int_t>", (void*)&mclkcnt, "mclkcnt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fadcti", (void*)&fadcti);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&fadcti, "fadcti.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fadcav", (void*)&fadcav);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&fadcav, "fadcav.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fadc", (void*)&fadc);
      R__insp.InspectMember("vector<vector<vector<Int_t> > >", (void*)&fadc, "fadc.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pchmip", (void*)&pchmip);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&pchmip, "pchmip.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pchped", (void*)&pchped);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&pchped, "pchped.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lhpchmip", (void*)&lhpchmip);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&lhpchmip, "lhpchmip.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lhpchped", (void*)&lhpchped);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&lhpchped, "lhpchped.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rhpchmip", (void*)&rhpchmip);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&rhpchmip, "rhpchmip.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rhpchped", (void*)&rhpchped);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&rhpchped, "rhpchped.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mftndof", (void*)&mftndof);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&mftndof, "mftndof.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mip", (void*)&mip);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&mip, "mip.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mftchi2", (void*)&mftchi2);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&mftchi2, "mftchi2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mftp", (void*)&mftp);
      R__insp.InspectMember("vector<vector<vector<Double_t> > >", (void*)&mftp, "mftp.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mftpe", (void*)&mftpe);
      R__insp.InspectMember("vector<vector<vector<Double_t> > >", (void*)&mftpe, "mftpe.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lat_lon_alt", (void*)&lat_lon_alt);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&lat_lon_alt, "lat_lon_alt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xyz_cor_clf", (void*)&xyz_cor_clf);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&xyz_cor_clf, "xyz_cor_clf.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_talex00_class(void *p) {
      return  p ? new(p) ::talex00_class : new ::talex00_class;
   }
   static void *newArray_talex00_class(Long_t nElements, void *p) {
      return p ? new(p) ::talex00_class[nElements] : new ::talex00_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_talex00_class(void *p) {
      delete ((::talex00_class*)p);
   }
   static void deleteArray_talex00_class(void *p) {
      delete [] ((::talex00_class*)p);
   }
   static void destruct_talex00_class(void *p) {
      typedef ::talex00_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_talex00_class(TBuffer &buf, void *obj) {
      ((::talex00_class*)obj)->::talex00_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::talex00_class

//______________________________________________________________________________
void rusdraw_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class rusdraw_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> event_num;
      R__b >> event_code;
      R__b >> site;
      {
         vector<Int_t> &R__stl =  run_id;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  trig_id;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> errcode;
      R__b >> yymmdd;
      R__b >> hhmmss;
      R__b >> usec;
      R__b >> monyymmdd;
      R__b >> monhhmmss;
      R__b >> nofwf;
      {
         vector<Int_t> &R__stl =  nretry;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  wf_id;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  trig_code;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  xxyy;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  clkcnt;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mclkcnt;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  fadcti;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("fadcti streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  fadcav;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("fadcav streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<vector<Int_t> > > &R__stl =  fadc;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >));
         if (R__tcl1==0) {
            Error("fadc streamer","Missing the TClass object for vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  pchmip;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("pchmip streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  pchped;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("pchped streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  lhpchmip;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("lhpchmip streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  lhpchped;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("lhpchped streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  rhpchmip;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("rhpchmip streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  rhpchped;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("rhpchped streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  mftndof;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("mftndof streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  mip;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("mip streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  mftchi2;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("mftchi2 streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<vector<Double_t> > > &R__stl =  mftp;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >));
         if (R__tcl1==0) {
            Error("mftp streamer","Missing the TClass object for vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<vector<Double_t> > > &R__stl =  mftpe;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >));
         if (R__tcl1==0) {
            Error("mftpe streamer","Missing the TClass object for vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, rusdraw_class::IsA());
   } else {
      R__c = R__b.WriteVersion(rusdraw_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << event_num;
      R__b << event_code;
      R__b << site;
      {
         vector<Int_t> &R__stl =  run_id;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  trig_id;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << errcode;
      R__b << yymmdd;
      R__b << hhmmss;
      R__b << usec;
      R__b << monyymmdd;
      R__b << monhhmmss;
      R__b << nofwf;
      {
         vector<Int_t> &R__stl =  nretry;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  wf_id;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  trig_code;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  xxyy;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  clkcnt;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mclkcnt;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  fadcti;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("fadcti streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  fadcav;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("fadcav streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<vector<Int_t> > > &R__stl =  fadc;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >));
         if (R__tcl1==0) {
            Error("fadc streamer","Missing the TClass object for vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >!");
            return;
         }
            vector<vector<vector<Int_t> > >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  pchmip;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("pchmip streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  pchped;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("pchped streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  lhpchmip;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("lhpchmip streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  lhpchped;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("lhpchped streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  rhpchmip;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("rhpchmip streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  rhpchped;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("rhpchped streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  mftndof;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("mftndof streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  mip;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("mip streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  mftchi2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("mftchi2 streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<vector<Double_t> > > &R__stl =  mftp;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >));
         if (R__tcl1==0) {
            Error("mftp streamer","Missing the TClass object for vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >!");
            return;
         }
            vector<vector<vector<Double_t> > >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<vector<Double_t> > > &R__stl =  mftpe;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >));
         if (R__tcl1==0) {
            Error("mftpe streamer","Missing the TClass object for vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >!");
            return;
         }
            vector<vector<vector<Double_t> > >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*)&(*R__k),R__tcl1);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void rusdraw_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class rusdraw_class.
      TClass *R__cl = ::rusdraw_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event_num", &event_num);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event_code", &event_code);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "site", &site);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run_id", (void*)&run_id);
      R__insp.InspectMember("vector<Int_t>", (void*)&run_id, "run_id.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trig_id", (void*)&trig_id);
      R__insp.InspectMember("vector<Int_t>", (void*)&trig_id, "trig_id.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errcode", &errcode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yymmdd", &yymmdd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hhmmss", &hhmmss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "usec", &usec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "monyymmdd", &monyymmdd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "monhhmmss", &monhhmmss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nofwf", &nofwf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nretry", (void*)&nretry);
      R__insp.InspectMember("vector<Int_t>", (void*)&nretry, "nretry.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wf_id", (void*)&wf_id);
      R__insp.InspectMember("vector<Int_t>", (void*)&wf_id, "wf_id.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trig_code", (void*)&trig_code);
      R__insp.InspectMember("vector<Int_t>", (void*)&trig_code, "trig_code.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xxyy", (void*)&xxyy);
      R__insp.InspectMember("vector<Int_t>", (void*)&xxyy, "xxyy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clkcnt", (void*)&clkcnt);
      R__insp.InspectMember("vector<Int_t>", (void*)&clkcnt, "clkcnt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mclkcnt", (void*)&mclkcnt);
      R__insp.InspectMember("vector<Int_t>", (void*)&mclkcnt, "mclkcnt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fadcti", (void*)&fadcti);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&fadcti, "fadcti.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fadcav", (void*)&fadcav);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&fadcav, "fadcav.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fadc", (void*)&fadc);
      R__insp.InspectMember("vector<vector<vector<Int_t> > >", (void*)&fadc, "fadc.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pchmip", (void*)&pchmip);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&pchmip, "pchmip.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pchped", (void*)&pchped);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&pchped, "pchped.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lhpchmip", (void*)&lhpchmip);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&lhpchmip, "lhpchmip.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lhpchped", (void*)&lhpchped);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&lhpchped, "lhpchped.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rhpchmip", (void*)&rhpchmip);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&rhpchmip, "rhpchmip.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rhpchped", (void*)&rhpchped);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&rhpchped, "rhpchped.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mftndof", (void*)&mftndof);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&mftndof, "mftndof.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mip", (void*)&mip);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&mip, "mip.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mftchi2", (void*)&mftchi2);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&mftchi2, "mftchi2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mftp", (void*)&mftp);
      R__insp.InspectMember("vector<vector<vector<Double_t> > >", (void*)&mftp, "mftp.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mftpe", (void*)&mftpe);
      R__insp.InspectMember("vector<vector<vector<Double_t> > >", (void*)&mftpe, "mftpe.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_rusdraw_class(void *p) {
      return  p ? new(p) ::rusdraw_class : new ::rusdraw_class;
   }
   static void *newArray_rusdraw_class(Long_t nElements, void *p) {
      return p ? new(p) ::rusdraw_class[nElements] : new ::rusdraw_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_rusdraw_class(void *p) {
      delete ((::rusdraw_class*)p);
   }
   static void deleteArray_rusdraw_class(void *p) {
      delete [] ((::rusdraw_class*)p);
   }
   static void destruct_rusdraw_class(void *p) {
      typedef ::rusdraw_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_rusdraw_class(TBuffer &buf, void *obj) {
      ((::rusdraw_class*)obj)->::rusdraw_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::rusdraw_class

//______________________________________________________________________________
void rusdmc_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class rusdmc_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> event_num;
      R__b >> parttype;
      R__b >> corecounter;
      R__b >> tc;
      R__b >> energy;
      R__b >> height;
      R__b >> theta;
      R__b >> phi;
      {
         vector<Float_t> &R__stl =  corexyz;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, rusdmc_class::IsA());
   } else {
      R__c = R__b.WriteVersion(rusdmc_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << event_num;
      R__b << parttype;
      R__b << corecounter;
      R__b << tc;
      R__b << energy;
      R__b << height;
      R__b << theta;
      R__b << phi;
      {
         vector<Float_t> &R__stl =  corexyz;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void rusdmc_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class rusdmc_class.
      TClass *R__cl = ::rusdmc_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event_num", &event_num);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parttype", &parttype);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "corecounter", &corecounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tc", &tc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "height", &height);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "corexyz", (void*)&corexyz);
      R__insp.InspectMember("vector<Float_t>", (void*)&corexyz, "corexyz.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_rusdmc_class(void *p) {
      return  p ? new(p) ::rusdmc_class : new ::rusdmc_class;
   }
   static void *newArray_rusdmc_class(Long_t nElements, void *p) {
      return p ? new(p) ::rusdmc_class[nElements] : new ::rusdmc_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_rusdmc_class(void *p) {
      delete ((::rusdmc_class*)p);
   }
   static void deleteArray_rusdmc_class(void *p) {
      delete [] ((::rusdmc_class*)p);
   }
   static void destruct_rusdmc_class(void *p) {
      typedef ::rusdmc_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_rusdmc_class(TBuffer &buf, void *obj) {
      ((::rusdmc_class*)obj)->::rusdmc_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::rusdmc_class

//______________________________________________________________________________
void rusdmc1_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class rusdmc1_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> xcore;
      R__b >> ycore;
      R__b >> t0;
      R__b >> bdist;
      R__b >> tdistbr;
      R__b >> tdistlr;
      R__b >> tdistsk;
      R__b >> tdist;
      R__b.CheckByteCount(R__s, R__c, rusdmc1_class::IsA());
   } else {
      R__c = R__b.WriteVersion(rusdmc1_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << xcore;
      R__b << ycore;
      R__b << t0;
      R__b << bdist;
      R__b << tdistbr;
      R__b << tdistlr;
      R__b << tdistsk;
      R__b << tdist;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void rusdmc1_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class rusdmc1_class.
      TClass *R__cl = ::rusdmc1_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xcore", &xcore);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ycore", &ycore);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t0", &t0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bdist", &bdist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdistbr", &tdistbr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdistlr", &tdistlr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdistsk", &tdistsk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdist", &tdist);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_rusdmc1_class(void *p) {
      return  p ? new(p) ::rusdmc1_class : new ::rusdmc1_class;
   }
   static void *newArray_rusdmc1_class(Long_t nElements, void *p) {
      return p ? new(p) ::rusdmc1_class[nElements] : new ::rusdmc1_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_rusdmc1_class(void *p) {
      delete ((::rusdmc1_class*)p);
   }
   static void deleteArray_rusdmc1_class(void *p) {
      delete [] ((::rusdmc1_class*)p);
   }
   static void destruct_rusdmc1_class(void *p) {
      typedef ::rusdmc1_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_rusdmc1_class(TBuffer &buf, void *obj) {
      ((::rusdmc1_class*)obj)->::rusdmc1_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::rusdmc1_class

//______________________________________________________________________________
void showlib_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class showlib_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> code;
      R__b >> number;
      R__b >> angle;
      R__b >> particle;
      R__b >> energy;
      R__b >> first;
      R__b >> nmax;
      R__b >> x0;
      R__b >> xmax;
      R__b >> lambda;
      R__b >> chi2;
      R__b.CheckByteCount(R__s, R__c, showlib_class::IsA());
   } else {
      R__c = R__b.WriteVersion(showlib_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << code;
      R__b << number;
      R__b << angle;
      R__b << particle;
      R__b << energy;
      R__b << first;
      R__b << nmax;
      R__b << x0;
      R__b << xmax;
      R__b << lambda;
      R__b << chi2;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void showlib_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class showlib_class.
      TClass *R__cl = ::showlib_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "code", &code);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "number", &number);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "angle", &angle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "particle", &particle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "first", &first);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nmax", &nmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x0", &x0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xmax", &xmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lambda", &lambda);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", &chi2);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_showlib_class(void *p) {
      return  p ? new(p) ::showlib_class : new ::showlib_class;
   }
   static void *newArray_showlib_class(Long_t nElements, void *p) {
      return p ? new(p) ::showlib_class[nElements] : new ::showlib_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_showlib_class(void *p) {
      delete ((::showlib_class*)p);
   }
   static void deleteArray_showlib_class(void *p) {
      delete [] ((::showlib_class*)p);
   }
   static void destruct_showlib_class(void *p) {
      typedef ::showlib_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_showlib_class(TBuffer &buf, void *obj) {
      ((::showlib_class*)obj)->::showlib_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::showlib_class

//______________________________________________________________________________
void bsdinfo_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class bsdinfo_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> yymmdd;
      R__b >> hhmmss;
      R__b >> usec;
      R__b >> nbsds;
      {
         vector<Int_t> &R__stl =  xxyy;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  bitf;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> nsdsout;
      {
         vector<Int_t> &R__stl =  xxyyout;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  bitfout;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, bsdinfo_class::IsA());
   } else {
      R__c = R__b.WriteVersion(bsdinfo_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << yymmdd;
      R__b << hhmmss;
      R__b << usec;
      R__b << nbsds;
      {
         vector<Int_t> &R__stl =  xxyy;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  bitf;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << nsdsout;
      {
         vector<Int_t> &R__stl =  xxyyout;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  bitfout;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void bsdinfo_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class bsdinfo_class.
      TClass *R__cl = ::bsdinfo_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yymmdd", &yymmdd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hhmmss", &hhmmss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "usec", &usec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nbsds", &nbsds);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xxyy", (void*)&xxyy);
      R__insp.InspectMember("vector<Int_t>", (void*)&xxyy, "xxyy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bitf", (void*)&bitf);
      R__insp.InspectMember("vector<Int_t>", (void*)&bitf, "bitf.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nsdsout", &nsdsout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xxyyout", (void*)&xxyyout);
      R__insp.InspectMember("vector<Int_t>", (void*)&xxyyout, "xxyyout.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bitfout", (void*)&bitfout);
      R__insp.InspectMember("vector<Int_t>", (void*)&bitfout, "bitfout.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_bsdinfo_class(void *p) {
      return  p ? new(p) ::bsdinfo_class : new ::bsdinfo_class;
   }
   static void *newArray_bsdinfo_class(Long_t nElements, void *p) {
      return p ? new(p) ::bsdinfo_class[nElements] : new ::bsdinfo_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_bsdinfo_class(void *p) {
      delete ((::bsdinfo_class*)p);
   }
   static void deleteArray_bsdinfo_class(void *p) {
      delete [] ((::bsdinfo_class*)p);
   }
   static void destruct_bsdinfo_class(void *p) {
      typedef ::bsdinfo_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_bsdinfo_class(TBuffer &buf, void *obj) {
      ((::bsdinfo_class*)obj)->::bsdinfo_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::bsdinfo_class

//______________________________________________________________________________
void sdtrgbk_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class sdtrgbk_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      {
         vector<vector<Double_t> > &R__stl =  secf;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("secf streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tlim;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tlim streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b >> raw_bankid;
      {
         vector<vector<Short_t> > &R__stl =  ich;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<short,allocator<short> >));
         if (R__tcl1==0) {
            Error("ich streamer","Missing the TClass object for vector<short,allocator<short> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<short,allocator<short> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<vector<Short_t> > > &R__stl =  q;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >));
         if (R__tcl1==0) {
            Error("q streamer","Missing the TClass object for vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Short_t> > &R__stl =  l1sig_wfindex;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<short,allocator<short> >));
         if (R__tcl1==0) {
            Error("l1sig_wfindex streamer","Missing the TClass object for vector<short,allocator<short> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<short,allocator<short> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Short_t> &R__stl =  xxyy;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Short_t> &R__stl =  wfindex_cal;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Short_t> &R__stl =  nl1;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> nsd;
      R__b >> n_bad_ped;
      R__b >> n_spat_cont;
      R__b >> n_isol;
      R__b >> n_pot_st_cont;
      R__b >> n_l1_tg;
      R__b >> dec_ped;
      R__b >> inc_ped;
      {
         vector<Short_t> &R__stl =  il2sd;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Short_t> &R__stl =  il2sd_sig;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Char_t> &R__stl =  ig;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            char R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> trigp;
      R__b >> igevent;
      R__b.CheckByteCount(R__s, R__c, sdtrgbk_class::IsA());
   } else {
      R__c = R__b.WriteVersion(sdtrgbk_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      {
         vector<vector<Double_t> > &R__stl =  secf;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("secf streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tlim;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tlim streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      R__b << raw_bankid;
      {
         vector<vector<Short_t> > &R__stl =  ich;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<short,allocator<short> >));
         if (R__tcl1==0) {
            Error("ich streamer","Missing the TClass object for vector<short,allocator<short> >!");
            return;
         }
            vector<vector<Short_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<short,allocator<short> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<vector<Short_t> > > &R__stl =  q;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >));
         if (R__tcl1==0) {
            Error("q streamer","Missing the TClass object for vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >!");
            return;
         }
            vector<vector<vector<Short_t> > >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Short_t> > &R__stl =  l1sig_wfindex;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<short,allocator<short> >));
         if (R__tcl1==0) {
            Error("l1sig_wfindex streamer","Missing the TClass object for vector<short,allocator<short> >!");
            return;
         }
            vector<vector<Short_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<short,allocator<short> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<Short_t> &R__stl =  xxyy;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Short_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Short_t> &R__stl =  wfindex_cal;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Short_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Short_t> &R__stl =  nl1;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Short_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << nsd;
      R__b << n_bad_ped;
      R__b << n_spat_cont;
      R__b << n_isol;
      R__b << n_pot_st_cont;
      R__b << n_l1_tg;
      R__b << dec_ped;
      R__b << inc_ped;
      {
         vector<Short_t> &R__stl =  il2sd;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Short_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Short_t> &R__stl =  il2sd_sig;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Short_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Char_t> &R__stl =  ig;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Char_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << trigp;
      R__b << igevent;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void sdtrgbk_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class sdtrgbk_class.
      TClass *R__cl = ::sdtrgbk_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "secf", (void*)&secf);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&secf, "secf.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tlim", (void*)&tlim);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&tlim, "tlim.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "raw_bankid", &raw_bankid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ich", (void*)&ich);
      R__insp.InspectMember("vector<vector<Short_t> >", (void*)&ich, "ich.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "q", (void*)&q);
      R__insp.InspectMember("vector<vector<vector<Short_t> > >", (void*)&q, "q.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "l1sig_wfindex", (void*)&l1sig_wfindex);
      R__insp.InspectMember("vector<vector<Short_t> >", (void*)&l1sig_wfindex, "l1sig_wfindex.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xxyy", (void*)&xxyy);
      R__insp.InspectMember("vector<Short_t>", (void*)&xxyy, "xxyy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wfindex_cal", (void*)&wfindex_cal);
      R__insp.InspectMember("vector<Short_t>", (void*)&wfindex_cal, "wfindex_cal.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nl1", (void*)&nl1);
      R__insp.InspectMember("vector<Short_t>", (void*)&nl1, "nl1.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nsd", &nsd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n_bad_ped", &n_bad_ped);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n_spat_cont", &n_spat_cont);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n_isol", &n_isol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n_pot_st_cont", &n_pot_st_cont);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n_l1_tg", &n_l1_tg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dec_ped", &dec_ped);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "inc_ped", &inc_ped);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "il2sd", (void*)&il2sd);
      R__insp.InspectMember("vector<Short_t>", (void*)&il2sd, "il2sd.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "il2sd_sig", (void*)&il2sd_sig);
      R__insp.InspectMember("vector<Short_t>", (void*)&il2sd_sig, "il2sd_sig.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ig", (void*)&ig);
      R__insp.InspectMember("vector<Char_t>", (void*)&ig, "ig.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trigp", &trigp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "igevent", &igevent);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_sdtrgbk_class(void *p) {
      return  p ? new(p) ::sdtrgbk_class : new ::sdtrgbk_class;
   }
   static void *newArray_sdtrgbk_class(Long_t nElements, void *p) {
      return p ? new(p) ::sdtrgbk_class[nElements] : new ::sdtrgbk_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_sdtrgbk_class(void *p) {
      delete ((::sdtrgbk_class*)p);
   }
   static void deleteArray_sdtrgbk_class(void *p) {
      delete [] ((::sdtrgbk_class*)p);
   }
   static void destruct_sdtrgbk_class(void *p) {
      typedef ::sdtrgbk_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_sdtrgbk_class(TBuffer &buf, void *obj) {
      ((::sdtrgbk_class*)obj)->::sdtrgbk_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::sdtrgbk_class

//______________________________________________________________________________
void SDEventSubData_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class SDEventSubData_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> clock;
      R__b >> max_clock;
      R__b >> lid;
      R__b >> usum;
      R__b >> lsum;
      R__b >> uavr;
      R__b >> lavr;
      R__b >> wf_id;
      R__b >> num_trgwf;
      R__b >> bank;
      R__b >> num_retry;
      R__b >> trig_code;
      R__b >> wf_error;
      {
         vector<Short_t> &R__stl =  uwf;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Short_t> &R__stl =  lwf;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, SDEventSubData_class::IsA());
   } else {
      R__c = R__b.WriteVersion(SDEventSubData_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << clock;
      R__b << max_clock;
      R__b << lid;
      R__b << usum;
      R__b << lsum;
      R__b << uavr;
      R__b << lavr;
      R__b << wf_id;
      R__b << num_trgwf;
      R__b << bank;
      R__b << num_retry;
      R__b << trig_code;
      R__b << wf_error;
      {
         vector<Short_t> &R__stl =  uwf;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Short_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Short_t> &R__stl =  lwf;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Short_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void SDEventSubData_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SDEventSubData_class.
      TClass *R__cl = ::SDEventSubData_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clock", &clock);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "max_clock", &max_clock);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lid", &lid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "usum", &usum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lsum", &lsum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "uavr", &uavr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lavr", &lavr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wf_id", &wf_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "num_trgwf", &num_trgwf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bank", &bank);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "num_retry", &num_retry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trig_code", &trig_code);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wf_error", &wf_error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "uwf", (void*)&uwf);
      R__insp.InspectMember("vector<Short_t>", (void*)&uwf, "uwf.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lwf", (void*)&lwf);
      R__insp.InspectMember("vector<Short_t>", (void*)&lwf, "lwf.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SDEventSubData_class(void *p) {
      return  p ? new(p) ::SDEventSubData_class : new ::SDEventSubData_class;
   }
   static void *newArray_SDEventSubData_class(Long_t nElements, void *p) {
      return p ? new(p) ::SDEventSubData_class[nElements] : new ::SDEventSubData_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_SDEventSubData_class(void *p) {
      delete ((::SDEventSubData_class*)p);
   }
   static void deleteArray_SDEventSubData_class(void *p) {
      delete [] ((::SDEventSubData_class*)p);
   }
   static void destruct_SDEventSubData_class(void *p) {
      typedef ::SDEventSubData_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_SDEventSubData_class(TBuffer &buf, void *obj) {
      ((::SDEventSubData_class*)obj)->::SDEventSubData_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::SDEventSubData_class

//______________________________________________________________________________
void tasdevent_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class tasdevent_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> event_code;
      R__b >> run_id;
      R__b >> site;
      R__b >> trig_id;
      R__b >> trig_code;
      R__b >> code;
      R__b >> num_trgwf;
      R__b >> num_wf;
      R__b >> bank;
      R__b >> date;
      R__b >> time;
      R__b >> date_org;
      R__b >> time_org;
      R__b >> usec;
      R__b >> gps_error;
      R__b >> pos;
      {
         vector<Int_t> &R__stl =  pattern;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<SDEventSubData_class> &R__stl =  sub;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            SDEventSubData_class R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, tasdevent_class::IsA());
   } else {
      R__c = R__b.WriteVersion(tasdevent_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << event_code;
      R__b << run_id;
      R__b << site;
      R__b << trig_id;
      R__b << trig_code;
      R__b << code;
      R__b << num_trgwf;
      R__b << num_wf;
      R__b << bank;
      R__b << date;
      R__b << time;
      R__b << date_org;
      R__b << time_org;
      R__b << usec;
      R__b << gps_error;
      R__b << pos;
      {
         vector<Int_t> &R__stl =  pattern;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<SDEventSubData_class> &R__stl =  sub;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<SDEventSubData_class>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((SDEventSubData_class&)(*R__k)).Streamer(R__b);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void tasdevent_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class tasdevent_class.
      TClass *R__cl = ::tasdevent_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event_code", &event_code);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run_id", &run_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "site", &site);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trig_id", &trig_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trig_code", &trig_code);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "code", &code);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "num_trgwf", &num_trgwf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "num_wf", &num_wf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bank", &bank);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "date", &date);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "date_org", &date_org);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time_org", &time_org);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "usec", &usec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gps_error", &gps_error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pos", &pos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pattern", (void*)&pattern);
      R__insp.InspectMember("vector<Int_t>", (void*)&pattern, "pattern.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sub", (void*)&sub);
      R__insp.InspectMember("vector<SDEventSubData_class>", (void*)&sub, "sub.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_tasdevent_class(void *p) {
      return  p ? new(p) ::tasdevent_class : new ::tasdevent_class;
   }
   static void *newArray_tasdevent_class(Long_t nElements, void *p) {
      return p ? new(p) ::tasdevent_class[nElements] : new ::tasdevent_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_tasdevent_class(void *p) {
      delete ((::tasdevent_class*)p);
   }
   static void deleteArray_tasdevent_class(void *p) {
      delete [] ((::tasdevent_class*)p);
   }
   static void destruct_tasdevent_class(void *p) {
      typedef ::tasdevent_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_tasdevent_class(TBuffer &buf, void *obj) {
      ((::tasdevent_class*)obj)->::tasdevent_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::tasdevent_class

//______________________________________________________________________________
void SDCalibHostData_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class SDCalibHostData_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> site;
      R__b >> numTrg;
      {
         vector<Int_t> &R__stl =  trgBank;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  trgSec;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Short_t> &R__stl =  trgPos;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  daqMode;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Char_t> &R__stl =  miss;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            char R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Short_t> &R__stl =  run_id;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, SDCalibHostData_class::IsA());
   } else {
      R__c = R__b.WriteVersion(SDCalibHostData_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << site;
      R__b << numTrg;
      {
         vector<Int_t> &R__stl =  trgBank;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  trgSec;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Short_t> &R__stl =  trgPos;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Short_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  daqMode;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Char_t> &R__stl =  miss;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Char_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Short_t> &R__stl =  run_id;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Short_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void SDCalibHostData_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SDCalibHostData_class.
      TClass *R__cl = ::SDCalibHostData_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "site", &site);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numTrg", &numTrg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trgBank", (void*)&trgBank);
      R__insp.InspectMember("vector<Int_t>", (void*)&trgBank, "trgBank.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trgSec", (void*)&trgSec);
      R__insp.InspectMember("vector<Int_t>", (void*)&trgSec, "trgSec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trgPos", (void*)&trgPos);
      R__insp.InspectMember("vector<Short_t>", (void*)&trgPos, "trgPos.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "daqMode", (void*)&daqMode);
      R__insp.InspectMember("vector<Int_t>", (void*)&daqMode, "daqMode.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "miss", (void*)&miss);
      R__insp.InspectMember("vector<Char_t>", (void*)&miss, "miss.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run_id", (void*)&run_id);
      R__insp.InspectMember("vector<Short_t>", (void*)&run_id, "run_id.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SDCalibHostData_class(void *p) {
      return  p ? new(p) ::SDCalibHostData_class : new ::SDCalibHostData_class;
   }
   static void *newArray_SDCalibHostData_class(Long_t nElements, void *p) {
      return p ? new(p) ::SDCalibHostData_class[nElements] : new ::SDCalibHostData_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_SDCalibHostData_class(void *p) {
      delete ((::SDCalibHostData_class*)p);
   }
   static void deleteArray_SDCalibHostData_class(void *p) {
      delete [] ((::SDCalibHostData_class*)p);
   }
   static void destruct_SDCalibHostData_class(void *p) {
      typedef ::SDCalibHostData_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_SDCalibHostData_class(TBuffer &buf, void *obj) {
      ((::SDCalibHostData_class*)obj)->::SDCalibHostData_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::SDCalibHostData_class

//______________________________________________________________________________
void SDCalibSubData_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class SDCalibSubData_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> site;
      R__b >> lid;
      R__b >> livetime;
      R__b >> warning;
      R__b >> dontUse;
      R__b >> dataQuality;
      R__b >> gpsRunMode;
      {
         vector<Char_t> &R__stl =  miss;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            char R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> clockFreq;
      R__b >> clockChirp;
      R__b >> clockError;
      R__b >> upedAvr;
      R__b >> lpedAvr;
      R__b >> upedStdev;
      R__b >> lpedStdev;
      R__b >> upedChisq;
      R__b >> lpedChisq;
      R__b >> umipNonuni;
      R__b >> lmipNonuni;
      R__b >> umipMev2cnt;
      R__b >> lmipMev2cnt;
      R__b >> umipMev2pe;
      R__b >> lmipMev2pe;
      R__b >> umipChisq;
      R__b >> lmipChisq;
      R__b >> lvl0Rate;
      R__b >> lvl1Rate;
      R__b >> scinti_temp;
      {
         vector<Int_t> &R__stl =  pchmip;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  pchped;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  lhpchmip;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  lhpchped;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  rhpchmip;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  rhpchped;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mftndof;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  mip;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  mftchi2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Float_t> > &R__stl =  mftp;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<float,allocator<float> >));
         if (R__tcl1==0) {
            Error("mftp streamer","Missing the TClass object for vector<float,allocator<float> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<float,allocator<float> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Float_t> > &R__stl =  mftpe;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<float,allocator<float> >));
         if (R__tcl1==0) {
            Error("mftpe streamer","Missing the TClass object for vector<float,allocator<float> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<float,allocator<float> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, SDCalibSubData_class::IsA());
   } else {
      R__c = R__b.WriteVersion(SDCalibSubData_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << site;
      R__b << lid;
      R__b << livetime;
      R__b << warning;
      R__b << dontUse;
      R__b << dataQuality;
      R__b << gpsRunMode;
      {
         vector<Char_t> &R__stl =  miss;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Char_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << clockFreq;
      R__b << clockChirp;
      R__b << clockError;
      R__b << upedAvr;
      R__b << lpedAvr;
      R__b << upedStdev;
      R__b << lpedStdev;
      R__b << upedChisq;
      R__b << lpedChisq;
      R__b << umipNonuni;
      R__b << lmipNonuni;
      R__b << umipMev2cnt;
      R__b << lmipMev2cnt;
      R__b << umipMev2pe;
      R__b << lmipMev2pe;
      R__b << umipChisq;
      R__b << lmipChisq;
      R__b << lvl0Rate;
      R__b << lvl1Rate;
      R__b << scinti_temp;
      {
         vector<Int_t> &R__stl =  pchmip;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  pchped;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  lhpchmip;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  lhpchped;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  rhpchmip;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  rhpchped;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mftndof;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  mip;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  mftchi2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<vector<Float_t> > &R__stl =  mftp;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<float,allocator<float> >));
         if (R__tcl1==0) {
            Error("mftp streamer","Missing the TClass object for vector<float,allocator<float> >!");
            return;
         }
            vector<vector<Float_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<float,allocator<float> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Float_t> > &R__stl =  mftpe;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<float,allocator<float> >));
         if (R__tcl1==0) {
            Error("mftpe streamer","Missing the TClass object for vector<float,allocator<float> >!");
            return;
         }
            vector<vector<Float_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<float,allocator<float> >*)&(*R__k),R__tcl1);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void SDCalibSubData_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SDCalibSubData_class.
      TClass *R__cl = ::SDCalibSubData_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "site", &site);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lid", &lid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "livetime", &livetime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "warning", &warning);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dontUse", &dontUse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dataQuality", &dataQuality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gpsRunMode", &gpsRunMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "miss", (void*)&miss);
      R__insp.InspectMember("vector<Char_t>", (void*)&miss, "miss.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clockFreq", &clockFreq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clockChirp", &clockChirp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clockError", &clockError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "upedAvr", &upedAvr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lpedAvr", &lpedAvr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "upedStdev", &upedStdev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lpedStdev", &lpedStdev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "upedChisq", &upedChisq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lpedChisq", &lpedChisq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "umipNonuni", &umipNonuni);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lmipNonuni", &lmipNonuni);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "umipMev2cnt", &umipMev2cnt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lmipMev2cnt", &lmipMev2cnt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "umipMev2pe", &umipMev2pe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lmipMev2pe", &lmipMev2pe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "umipChisq", &umipChisq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lmipChisq", &lmipChisq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lvl0Rate", &lvl0Rate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lvl1Rate", &lvl1Rate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scinti_temp", &scinti_temp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pchmip", (void*)&pchmip);
      R__insp.InspectMember("vector<Int_t>", (void*)&pchmip, "pchmip.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pchped", (void*)&pchped);
      R__insp.InspectMember("vector<Int_t>", (void*)&pchped, "pchped.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lhpchmip", (void*)&lhpchmip);
      R__insp.InspectMember("vector<Int_t>", (void*)&lhpchmip, "lhpchmip.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lhpchped", (void*)&lhpchped);
      R__insp.InspectMember("vector<Int_t>", (void*)&lhpchped, "lhpchped.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rhpchmip", (void*)&rhpchmip);
      R__insp.InspectMember("vector<Int_t>", (void*)&rhpchmip, "rhpchmip.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rhpchped", (void*)&rhpchped);
      R__insp.InspectMember("vector<Int_t>", (void*)&rhpchped, "rhpchped.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mftndof", (void*)&mftndof);
      R__insp.InspectMember("vector<Int_t>", (void*)&mftndof, "mftndof.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mip", (void*)&mip);
      R__insp.InspectMember("vector<Float_t>", (void*)&mip, "mip.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mftchi2", (void*)&mftchi2);
      R__insp.InspectMember("vector<Float_t>", (void*)&mftchi2, "mftchi2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mftp", (void*)&mftp);
      R__insp.InspectMember("vector<vector<Float_t> >", (void*)&mftp, "mftp.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mftpe", (void*)&mftpe);
      R__insp.InspectMember("vector<vector<Float_t> >", (void*)&mftpe, "mftpe.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SDCalibSubData_class(void *p) {
      return  p ? new(p) ::SDCalibSubData_class : new ::SDCalibSubData_class;
   }
   static void *newArray_SDCalibSubData_class(Long_t nElements, void *p) {
      return p ? new(p) ::SDCalibSubData_class[nElements] : new ::SDCalibSubData_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_SDCalibSubData_class(void *p) {
      delete ((::SDCalibSubData_class*)p);
   }
   static void deleteArray_SDCalibSubData_class(void *p) {
      delete [] ((::SDCalibSubData_class*)p);
   }
   static void destruct_SDCalibSubData_class(void *p) {
      typedef ::SDCalibSubData_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_SDCalibSubData_class(TBuffer &buf, void *obj) {
      ((::SDCalibSubData_class*)obj)->::SDCalibSubData_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::SDCalibSubData_class

//______________________________________________________________________________
void SDCalibWeatherData_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class SDCalibWeatherData_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> site;
      R__b >> averageWindSpeed;
      R__b >> maximumWindSpeed;
      R__b >> windDirection;
      R__b >> atmosphericPressure;
      R__b >> temperature;
      R__b >> humidity;
      R__b >> rainfall;
      R__b >> numberOfHails;
      R__b.CheckByteCount(R__s, R__c, SDCalibWeatherData_class::IsA());
   } else {
      R__c = R__b.WriteVersion(SDCalibWeatherData_class::IsA(), kTRUE);
      R__b << site;
      R__b << averageWindSpeed;
      R__b << maximumWindSpeed;
      R__b << windDirection;
      R__b << atmosphericPressure;
      R__b << temperature;
      R__b << humidity;
      R__b << rainfall;
      R__b << numberOfHails;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void SDCalibWeatherData_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SDCalibWeatherData_class.
      TClass *R__cl = ::SDCalibWeatherData_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "site", &site);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "averageWindSpeed", &averageWindSpeed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maximumWindSpeed", &maximumWindSpeed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "windDirection", &windDirection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "atmosphericPressure", &atmosphericPressure);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "temperature", &temperature);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "humidity", &humidity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rainfall", &rainfall);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfHails", &numberOfHails);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SDCalibWeatherData_class(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SDCalibWeatherData_class : new ::SDCalibWeatherData_class;
   }
   static void *newArray_SDCalibWeatherData_class(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SDCalibWeatherData_class[nElements] : new ::SDCalibWeatherData_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_SDCalibWeatherData_class(void *p) {
      delete ((::SDCalibWeatherData_class*)p);
   }
   static void deleteArray_SDCalibWeatherData_class(void *p) {
      delete [] ((::SDCalibWeatherData_class*)p);
   }
   static void destruct_SDCalibWeatherData_class(void *p) {
      typedef ::SDCalibWeatherData_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_SDCalibWeatherData_class(TBuffer &buf, void *obj) {
      ((::SDCalibWeatherData_class*)obj)->::SDCalibWeatherData_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::SDCalibWeatherData_class

//______________________________________________________________________________
void tasdcalib_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class tasdcalib_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> num_host;
      R__b >> num_det;
      R__b >> num_weather;
      R__b >> date;
      R__b >> time;
      {
         vector<Char_t> &R__stl =  trgMode;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            char R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<SDCalibHostData_class> &R__stl =  host;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            SDCalibHostData_class R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<SDCalibSubData_class> &R__stl =  sub;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            SDCalibSubData_class R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<SDCalibWeatherData_class> &R__stl =  weather;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            SDCalibWeatherData_class R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      R__b >> footer;
      R__b.CheckByteCount(R__s, R__c, tasdcalib_class::IsA());
   } else {
      R__c = R__b.WriteVersion(tasdcalib_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << num_host;
      R__b << num_det;
      R__b << num_weather;
      R__b << date;
      R__b << time;
      {
         vector<Char_t> &R__stl =  trgMode;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Char_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<SDCalibHostData_class> &R__stl =  host;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<SDCalibHostData_class>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((SDCalibHostData_class&)(*R__k)).Streamer(R__b);
            }
         }
      }
      {
         vector<SDCalibSubData_class> &R__stl =  sub;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<SDCalibSubData_class>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((SDCalibSubData_class&)(*R__k)).Streamer(R__b);
            }
         }
      }
      {
         vector<SDCalibWeatherData_class> &R__stl =  weather;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<SDCalibWeatherData_class>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((SDCalibWeatherData_class&)(*R__k)).Streamer(R__b);
            }
         }
      }
      R__b << footer;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void tasdcalib_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class tasdcalib_class.
      TClass *R__cl = ::tasdcalib_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "num_host", &num_host);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "num_det", &num_det);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "num_weather", &num_weather);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "date", &date);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trgMode", (void*)&trgMode);
      R__insp.InspectMember("vector<Char_t>", (void*)&trgMode, "trgMode.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "host", (void*)&host);
      R__insp.InspectMember("vector<SDCalibHostData_class>", (void*)&host, "host.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sub", (void*)&sub);
      R__insp.InspectMember("vector<SDCalibSubData_class>", (void*)&sub, "sub.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "weather", (void*)&weather);
      R__insp.InspectMember("vector<SDCalibWeatherData_class>", (void*)&weather, "weather.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "footer", &footer);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_tasdcalib_class(void *p) {
      return  p ? new(p) ::tasdcalib_class : new ::tasdcalib_class;
   }
   static void *newArray_tasdcalib_class(Long_t nElements, void *p) {
      return p ? new(p) ::tasdcalib_class[nElements] : new ::tasdcalib_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_tasdcalib_class(void *p) {
      delete ((::tasdcalib_class*)p);
   }
   static void deleteArray_tasdcalib_class(void *p) {
      delete [] ((::tasdcalib_class*)p);
   }
   static void destruct_tasdcalib_class(void *p) {
      typedef ::tasdcalib_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_tasdcalib_class(TBuffer &buf, void *obj) {
      ((::tasdcalib_class*)obj)->::tasdcalib_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::tasdcalib_class

//______________________________________________________________________________
void SDCalibevData_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class SDCalibevData_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> site;
      R__b >> lid;
      R__b >> clock;
      R__b >> maxClock;
      R__b >> wfId;
      R__b >> numTrgwf;
      R__b >> trgCode;
      R__b >> wfError;
      {
         vector<Short_t> &R__stl =  uwf;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Short_t> &R__stl =  lwf;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> clockError;
      R__b >> upedAvr;
      R__b >> lpedAvr;
      R__b >> upedStdev;
      R__b >> lpedStdev;
      R__b >> umipNonuni;
      R__b >> lmipNonuni;
      R__b >> umipMev2cnt;
      R__b >> lmipMev2cnt;
      R__b >> umipMev2pe;
      R__b >> lmipMev2pe;
      R__b >> lvl0Rate;
      R__b >> lvl1Rate;
      R__b >> scintiTemp;
      R__b >> warning;
      R__b >> dontUse;
      R__b >> dataQuality;
      R__b >> trgMode0;
      R__b >> trgMode1;
      R__b >> gpsRunMode;
      R__b >> uthreLvl0;
      R__b >> lthreLvl0;
      R__b >> uthreLvl1;
      R__b >> lthreLvl1;
      R__b >> posX;
      R__b >> posY;
      R__b >> posZ;
      R__b >> delayns;
      R__b >> ppsofs;
      R__b >> ppsflu;
      R__b >> lonmas;
      R__b >> latmas;
      R__b >> heicm;
      R__b >> udec5pled;
      R__b >> ldec5pled;
      R__b >> udec5pmip;
      R__b >> ldec5pmip;
      {
         vector<Int_t> &R__stl =  pchmip;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  pchped;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  lhpchmip;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  lhpchped;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  rhpchmip;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  rhpchped;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mftndof;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  mip;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  mftchi2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Float_t> > &R__stl =  mftp;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<float,allocator<float> >));
         if (R__tcl1==0) {
            Error("mftp streamer","Missing the TClass object for vector<float,allocator<float> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<float,allocator<float> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Float_t> > &R__stl =  mftpe;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<float,allocator<float> >));
         if (R__tcl1==0) {
            Error("mftpe streamer","Missing the TClass object for vector<float,allocator<float> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<float,allocator<float> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, SDCalibevData_class::IsA());
   } else {
      R__c = R__b.WriteVersion(SDCalibevData_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << site;
      R__b << lid;
      R__b << clock;
      R__b << maxClock;
      R__b << wfId;
      R__b << numTrgwf;
      R__b << trgCode;
      R__b << wfError;
      {
         vector<Short_t> &R__stl =  uwf;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Short_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Short_t> &R__stl =  lwf;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Short_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << clockError;
      R__b << upedAvr;
      R__b << lpedAvr;
      R__b << upedStdev;
      R__b << lpedStdev;
      R__b << umipNonuni;
      R__b << lmipNonuni;
      R__b << umipMev2cnt;
      R__b << lmipMev2cnt;
      R__b << umipMev2pe;
      R__b << lmipMev2pe;
      R__b << lvl0Rate;
      R__b << lvl1Rate;
      R__b << scintiTemp;
      R__b << warning;
      R__b << dontUse;
      R__b << dataQuality;
      R__b << trgMode0;
      R__b << trgMode1;
      R__b << gpsRunMode;
      R__b << uthreLvl0;
      R__b << lthreLvl0;
      R__b << uthreLvl1;
      R__b << lthreLvl1;
      R__b << posX;
      R__b << posY;
      R__b << posZ;
      R__b << delayns;
      R__b << ppsofs;
      R__b << ppsflu;
      R__b << lonmas;
      R__b << latmas;
      R__b << heicm;
      R__b << udec5pled;
      R__b << ldec5pled;
      R__b << udec5pmip;
      R__b << ldec5pmip;
      {
         vector<Int_t> &R__stl =  pchmip;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  pchped;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  lhpchmip;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  lhpchped;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  rhpchmip;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  rhpchped;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mftndof;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  mip;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  mftchi2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<vector<Float_t> > &R__stl =  mftp;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<float,allocator<float> >));
         if (R__tcl1==0) {
            Error("mftp streamer","Missing the TClass object for vector<float,allocator<float> >!");
            return;
         }
            vector<vector<Float_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<float,allocator<float> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Float_t> > &R__stl =  mftpe;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<float,allocator<float> >));
         if (R__tcl1==0) {
            Error("mftpe streamer","Missing the TClass object for vector<float,allocator<float> >!");
            return;
         }
            vector<vector<Float_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<float,allocator<float> >*)&(*R__k),R__tcl1);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void SDCalibevData_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SDCalibevData_class.
      TClass *R__cl = ::SDCalibevData_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "site", &site);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lid", &lid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clock", &clock);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxClock", &maxClock);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wfId", &wfId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numTrgwf", &numTrgwf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trgCode", &trgCode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wfError", &wfError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "uwf", (void*)&uwf);
      R__insp.InspectMember("vector<Short_t>", (void*)&uwf, "uwf.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lwf", (void*)&lwf);
      R__insp.InspectMember("vector<Short_t>", (void*)&lwf, "lwf.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clockError", &clockError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "upedAvr", &upedAvr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lpedAvr", &lpedAvr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "upedStdev", &upedStdev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lpedStdev", &lpedStdev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "umipNonuni", &umipNonuni);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lmipNonuni", &lmipNonuni);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "umipMev2cnt", &umipMev2cnt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lmipMev2cnt", &lmipMev2cnt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "umipMev2pe", &umipMev2pe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lmipMev2pe", &lmipMev2pe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lvl0Rate", &lvl0Rate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lvl1Rate", &lvl1Rate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scintiTemp", &scintiTemp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "warning", &warning);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dontUse", &dontUse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dataQuality", &dataQuality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trgMode0", &trgMode0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trgMode1", &trgMode1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gpsRunMode", &gpsRunMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "uthreLvl0", &uthreLvl0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lthreLvl0", &lthreLvl0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "uthreLvl1", &uthreLvl1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lthreLvl1", &lthreLvl1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "posX", &posX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "posY", &posY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "posZ", &posZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "delayns", &delayns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ppsofs", &ppsofs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ppsflu", &ppsflu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lonmas", &lonmas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "latmas", &latmas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "heicm", &heicm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "udec5pled", &udec5pled);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ldec5pled", &ldec5pled);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "udec5pmip", &udec5pmip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ldec5pmip", &ldec5pmip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pchmip", (void*)&pchmip);
      R__insp.InspectMember("vector<Int_t>", (void*)&pchmip, "pchmip.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pchped", (void*)&pchped);
      R__insp.InspectMember("vector<Int_t>", (void*)&pchped, "pchped.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lhpchmip", (void*)&lhpchmip);
      R__insp.InspectMember("vector<Int_t>", (void*)&lhpchmip, "lhpchmip.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lhpchped", (void*)&lhpchped);
      R__insp.InspectMember("vector<Int_t>", (void*)&lhpchped, "lhpchped.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rhpchmip", (void*)&rhpchmip);
      R__insp.InspectMember("vector<Int_t>", (void*)&rhpchmip, "rhpchmip.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rhpchped", (void*)&rhpchped);
      R__insp.InspectMember("vector<Int_t>", (void*)&rhpchped, "rhpchped.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mftndof", (void*)&mftndof);
      R__insp.InspectMember("vector<Int_t>", (void*)&mftndof, "mftndof.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mip", (void*)&mip);
      R__insp.InspectMember("vector<Float_t>", (void*)&mip, "mip.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mftchi2", (void*)&mftchi2);
      R__insp.InspectMember("vector<Float_t>", (void*)&mftchi2, "mftchi2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mftp", (void*)&mftp);
      R__insp.InspectMember("vector<vector<Float_t> >", (void*)&mftp, "mftp.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mftpe", (void*)&mftpe);
      R__insp.InspectMember("vector<vector<Float_t> >", (void*)&mftpe, "mftpe.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SDCalibevData_class(void *p) {
      return  p ? new(p) ::SDCalibevData_class : new ::SDCalibevData_class;
   }
   static void *newArray_SDCalibevData_class(Long_t nElements, void *p) {
      return p ? new(p) ::SDCalibevData_class[nElements] : new ::SDCalibevData_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_SDCalibevData_class(void *p) {
      delete ((::SDCalibevData_class*)p);
   }
   static void deleteArray_SDCalibevData_class(void *p) {
      delete [] ((::SDCalibevData_class*)p);
   }
   static void destruct_SDCalibevData_class(void *p) {
      typedef ::SDCalibevData_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_SDCalibevData_class(TBuffer &buf, void *obj) {
      ((::SDCalibevData_class*)obj)->::SDCalibevData_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::SDCalibevData_class

//______________________________________________________________________________
void SDCalibevWeatherData_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class SDCalibevWeatherData_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> site;
      R__b >> atmosphericPressure;
      R__b >> temperature;
      R__b >> humidity;
      R__b >> rainfall;
      R__b >> numberOfHails;
      R__b.CheckByteCount(R__s, R__c, SDCalibevWeatherData_class::IsA());
   } else {
      R__c = R__b.WriteVersion(SDCalibevWeatherData_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << site;
      R__b << atmosphericPressure;
      R__b << temperature;
      R__b << humidity;
      R__b << rainfall;
      R__b << numberOfHails;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void SDCalibevWeatherData_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SDCalibevWeatherData_class.
      TClass *R__cl = ::SDCalibevWeatherData_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "site", &site);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "atmosphericPressure", &atmosphericPressure);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "temperature", &temperature);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "humidity", &humidity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rainfall", &rainfall);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfHails", &numberOfHails);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SDCalibevWeatherData_class(void *p) {
      return  p ? new(p) ::SDCalibevWeatherData_class : new ::SDCalibevWeatherData_class;
   }
   static void *newArray_SDCalibevWeatherData_class(Long_t nElements, void *p) {
      return p ? new(p) ::SDCalibevWeatherData_class[nElements] : new ::SDCalibevWeatherData_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_SDCalibevWeatherData_class(void *p) {
      delete ((::SDCalibevWeatherData_class*)p);
   }
   static void deleteArray_SDCalibevWeatherData_class(void *p) {
      delete [] ((::SDCalibevWeatherData_class*)p);
   }
   static void destruct_SDCalibevWeatherData_class(void *p) {
      typedef ::SDCalibevWeatherData_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_SDCalibevWeatherData_class(TBuffer &buf, void *obj) {
      ((::SDCalibevWeatherData_class*)obj)->::SDCalibevWeatherData_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::SDCalibevWeatherData_class

//______________________________________________________________________________
void SDCalibevSimInfo_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class SDCalibevSimInfo_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      {
         vector<Char_t> &R__stl =  interactionModel;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            char R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Char_t> &R__stl =  primaryParticleType;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            char R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> primaryEnergy;
      R__b >> primaryCosZenith;
      R__b >> primaryAzimuth;
      R__b >> primaryFirstIntDepth;
      R__b >> primaryArrivalTimeFromPps;
      R__b >> primaryCorePosX;
      R__b >> primaryCorePosY;
      R__b >> primaryCorePosZ;
      R__b >> thinRatio;
      R__b >> maxWeight;
      R__b >> trgCode;
      R__b >> userInfo;
      {
         vector<Float_t> &R__stl =  detailUserInfo;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, SDCalibevSimInfo_class::IsA());
   } else {
      R__c = R__b.WriteVersion(SDCalibevSimInfo_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      {
         vector<Char_t> &R__stl =  interactionModel;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Char_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Char_t> &R__stl =  primaryParticleType;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Char_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << primaryEnergy;
      R__b << primaryCosZenith;
      R__b << primaryAzimuth;
      R__b << primaryFirstIntDepth;
      R__b << primaryArrivalTimeFromPps;
      R__b << primaryCorePosX;
      R__b << primaryCorePosY;
      R__b << primaryCorePosZ;
      R__b << thinRatio;
      R__b << maxWeight;
      R__b << trgCode;
      R__b << userInfo;
      {
         vector<Float_t> &R__stl =  detailUserInfo;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void SDCalibevSimInfo_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SDCalibevSimInfo_class.
      TClass *R__cl = ::SDCalibevSimInfo_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "interactionModel", (void*)&interactionModel);
      R__insp.InspectMember("vector<Char_t>", (void*)&interactionModel, "interactionModel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "primaryParticleType", (void*)&primaryParticleType);
      R__insp.InspectMember("vector<Char_t>", (void*)&primaryParticleType, "primaryParticleType.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "primaryEnergy", &primaryEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "primaryCosZenith", &primaryCosZenith);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "primaryAzimuth", &primaryAzimuth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "primaryFirstIntDepth", &primaryFirstIntDepth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "primaryArrivalTimeFromPps", &primaryArrivalTimeFromPps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "primaryCorePosX", &primaryCorePosX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "primaryCorePosY", &primaryCorePosY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "primaryCorePosZ", &primaryCorePosZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thinRatio", &thinRatio);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxWeight", &maxWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trgCode", &trgCode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "userInfo", &userInfo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detailUserInfo", (void*)&detailUserInfo);
      R__insp.InspectMember("vector<Float_t>", (void*)&detailUserInfo, "detailUserInfo.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SDCalibevSimInfo_class(void *p) {
      return  p ? new(p) ::SDCalibevSimInfo_class : new ::SDCalibevSimInfo_class;
   }
   static void *newArray_SDCalibevSimInfo_class(Long_t nElements, void *p) {
      return p ? new(p) ::SDCalibevSimInfo_class[nElements] : new ::SDCalibevSimInfo_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_SDCalibevSimInfo_class(void *p) {
      delete ((::SDCalibevSimInfo_class*)p);
   }
   static void deleteArray_SDCalibevSimInfo_class(void *p) {
      delete [] ((::SDCalibevSimInfo_class*)p);
   }
   static void destruct_SDCalibevSimInfo_class(void *p) {
      typedef ::SDCalibevSimInfo_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_SDCalibevSimInfo_class(TBuffer &buf, void *obj) {
      ((::SDCalibevSimInfo_class*)obj)->::SDCalibevSimInfo_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::SDCalibevSimInfo_class

//______________________________________________________________________________
void tasdcalibev_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class tasdcalibev_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> eventCode;
      R__b >> date;
      R__b >> time;
      R__b >> usec;
      R__b >> trgBank;
      R__b >> trgPos;
      R__b >> trgMode;
      R__b >> daqMode;
      R__b >> numWf;
      R__b >> numTrgwf;
      R__b >> numWeather;
      R__b >> numAlive;
      R__b >> numDead;
      {
         vector<Int_t> &R__stl =  runId;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  daqMiss;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<SDCalibevData_class> &R__stl =  sub;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            SDCalibevData_class R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<SDCalibevWeatherData_class> &R__stl =  weather;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            SDCalibevWeatherData_class R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      sim.Streamer(R__b);
      {
         vector<Short_t> &R__stl =  aliveDetLid;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Short_t> &R__stl =  aliveDetSite;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  aliveDetPosX;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  aliveDetPosY;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  aliveDetPosZ;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Short_t> &R__stl =  deadDetLid;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Short_t> &R__stl =  deadDetSite;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  deadDetPosX;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  deadDetPosY;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  deadDetPosZ;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> footer;
      R__b.CheckByteCount(R__s, R__c, tasdcalibev_class::IsA());
   } else {
      R__c = R__b.WriteVersion(tasdcalibev_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << eventCode;
      R__b << date;
      R__b << time;
      R__b << usec;
      R__b << trgBank;
      R__b << trgPos;
      R__b << trgMode;
      R__b << daqMode;
      R__b << numWf;
      R__b << numTrgwf;
      R__b << numWeather;
      R__b << numAlive;
      R__b << numDead;
      {
         vector<Int_t> &R__stl =  runId;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  daqMiss;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<SDCalibevData_class> &R__stl =  sub;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<SDCalibevData_class>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((SDCalibevData_class&)(*R__k)).Streamer(R__b);
            }
         }
      }
      {
         vector<SDCalibevWeatherData_class> &R__stl =  weather;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<SDCalibevWeatherData_class>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((SDCalibevWeatherData_class&)(*R__k)).Streamer(R__b);
            }
         }
      }
      sim.Streamer(R__b);
      {
         vector<Short_t> &R__stl =  aliveDetLid;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Short_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Short_t> &R__stl =  aliveDetSite;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Short_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  aliveDetPosX;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  aliveDetPosY;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  aliveDetPosZ;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Short_t> &R__stl =  deadDetLid;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Short_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Short_t> &R__stl =  deadDetSite;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Short_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  deadDetPosX;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  deadDetPosY;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  deadDetPosZ;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << footer;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void tasdcalibev_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class tasdcalibev_class.
      TClass *R__cl = ::tasdcalibev_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventCode", &eventCode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "date", &date);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "usec", &usec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trgBank", &trgBank);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trgPos", &trgPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trgMode", &trgMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "daqMode", &daqMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numWf", &numWf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numTrgwf", &numTrgwf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numWeather", &numWeather);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numAlive", &numAlive);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numDead", &numDead);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "runId", (void*)&runId);
      R__insp.InspectMember("vector<Int_t>", (void*)&runId, "runId.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "daqMiss", (void*)&daqMiss);
      R__insp.InspectMember("vector<Int_t>", (void*)&daqMiss, "daqMiss.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sub", (void*)&sub);
      R__insp.InspectMember("vector<SDCalibevData_class>", (void*)&sub, "sub.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "weather", (void*)&weather);
      R__insp.InspectMember("vector<SDCalibevWeatherData_class>", (void*)&weather, "weather.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sim", &sim);
      R__insp.InspectMember(sim, "sim.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aliveDetLid", (void*)&aliveDetLid);
      R__insp.InspectMember("vector<Short_t>", (void*)&aliveDetLid, "aliveDetLid.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aliveDetSite", (void*)&aliveDetSite);
      R__insp.InspectMember("vector<Short_t>", (void*)&aliveDetSite, "aliveDetSite.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aliveDetPosX", (void*)&aliveDetPosX);
      R__insp.InspectMember("vector<Float_t>", (void*)&aliveDetPosX, "aliveDetPosX.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aliveDetPosY", (void*)&aliveDetPosY);
      R__insp.InspectMember("vector<Float_t>", (void*)&aliveDetPosY, "aliveDetPosY.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aliveDetPosZ", (void*)&aliveDetPosZ);
      R__insp.InspectMember("vector<Float_t>", (void*)&aliveDetPosZ, "aliveDetPosZ.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deadDetLid", (void*)&deadDetLid);
      R__insp.InspectMember("vector<Short_t>", (void*)&deadDetLid, "deadDetLid.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deadDetSite", (void*)&deadDetSite);
      R__insp.InspectMember("vector<Short_t>", (void*)&deadDetSite, "deadDetSite.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deadDetPosX", (void*)&deadDetPosX);
      R__insp.InspectMember("vector<Float_t>", (void*)&deadDetPosX, "deadDetPosX.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deadDetPosY", (void*)&deadDetPosY);
      R__insp.InspectMember("vector<Float_t>", (void*)&deadDetPosY, "deadDetPosY.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deadDetPosZ", (void*)&deadDetPosZ);
      R__insp.InspectMember("vector<Float_t>", (void*)&deadDetPosZ, "deadDetPosZ.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "footer", &footer);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_tasdcalibev_class(void *p) {
      return  p ? new(p) ::tasdcalibev_class : new ::tasdcalibev_class;
   }
   static void *newArray_tasdcalibev_class(Long_t nElements, void *p) {
      return p ? new(p) ::tasdcalibev_class[nElements] : new ::tasdcalibev_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_tasdcalibev_class(void *p) {
      delete ((::tasdcalibev_class*)p);
   }
   static void deleteArray_tasdcalibev_class(void *p) {
      delete [] ((::tasdcalibev_class*)p);
   }
   static void destruct_tasdcalibev_class(void *p) {
      typedef ::tasdcalibev_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_tasdcalibev_class(TBuffer &buf, void *obj) {
      ((::tasdcalibev_class*)obj)->::tasdcalibev_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::tasdcalibev_class

//______________________________________________________________________________
void rufptn_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class rufptn_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> nhits;
      R__b >> nsclust;
      R__b >> nstclust;
      R__b >> nborder;
      {
         vector<Int_t> &R__stl =  isgood;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  wfindex;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  xxyy;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  nfold;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  sstart;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("sstart streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  sstop;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("sstop streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  lderiv;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("lderiv streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  zderiv;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("zderiv streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  xyzclf;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("xyzclf streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  qtot;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  tearliest;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  reltime;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("reltime streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  timeerr;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("timeerr streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  fadcpa;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("fadcpa streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  fadcpaerr;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("fadcpaerr streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  pulsa;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("pulsa streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  pulsaerr;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("pulsaerr streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ped;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ped streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  pederr;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("pederr streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  vem;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("vem streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  vemerr;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("vemerr streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tyro_cdist;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tyro_cdist streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tyro_xymoments;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tyro_xymoments streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tyro_xypmoments;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tyro_xypmoments streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tyro_u;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tyro_u streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tyro_v;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tyro_v streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tyro_tfitpars;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tyro_tfitpars streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  tyro_chi2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  tyro_ndof;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  tyro_theta;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  tyro_phi;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, rufptn_class::IsA());
   } else {
      R__c = R__b.WriteVersion(rufptn_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << nhits;
      R__b << nsclust;
      R__b << nstclust;
      R__b << nborder;
      {
         vector<Int_t> &R__stl =  isgood;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  wfindex;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  xxyy;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  nfold;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  sstart;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("sstart streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  sstop;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("sstop streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  lderiv;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("lderiv streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  zderiv;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("zderiv streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  xyzclf;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("xyzclf streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  qtot;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  tearliest;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  reltime;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("reltime streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  timeerr;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("timeerr streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  fadcpa;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("fadcpa streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  fadcpaerr;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("fadcpaerr streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  pulsa;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("pulsa streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  pulsaerr;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("pulsaerr streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ped;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ped streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  pederr;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("pederr streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  vem;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("vem streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  vemerr;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("vemerr streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tyro_cdist;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tyro_cdist streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tyro_xymoments;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tyro_xymoments streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tyro_xypmoments;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tyro_xypmoments streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tyro_u;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tyro_u streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tyro_v;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tyro_v streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tyro_tfitpars;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tyro_tfitpars streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  tyro_chi2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  tyro_ndof;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  tyro_theta;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  tyro_phi;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void rufptn_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class rufptn_class.
      TClass *R__cl = ::rufptn_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nhits", &nhits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nsclust", &nsclust);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nstclust", &nstclust);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nborder", &nborder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isgood", (void*)&isgood);
      R__insp.InspectMember("vector<Int_t>", (void*)&isgood, "isgood.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wfindex", (void*)&wfindex);
      R__insp.InspectMember("vector<Int_t>", (void*)&wfindex, "wfindex.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xxyy", (void*)&xxyy);
      R__insp.InspectMember("vector<Int_t>", (void*)&xxyy, "xxyy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nfold", (void*)&nfold);
      R__insp.InspectMember("vector<Int_t>", (void*)&nfold, "nfold.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sstart", (void*)&sstart);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&sstart, "sstart.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sstop", (void*)&sstop);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&sstop, "sstop.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lderiv", (void*)&lderiv);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&lderiv, "lderiv.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zderiv", (void*)&zderiv);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&zderiv, "zderiv.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xyzclf", (void*)&xyzclf);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&xyzclf, "xyzclf.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qtot", (void*)&qtot);
      R__insp.InspectMember("vector<Double_t>", (void*)&qtot, "qtot.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tearliest", (void*)&tearliest);
      R__insp.InspectMember("vector<Double_t>", (void*)&tearliest, "tearliest.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reltime", (void*)&reltime);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&reltime, "reltime.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeerr", (void*)&timeerr);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&timeerr, "timeerr.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fadcpa", (void*)&fadcpa);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&fadcpa, "fadcpa.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fadcpaerr", (void*)&fadcpaerr);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&fadcpaerr, "fadcpaerr.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pulsa", (void*)&pulsa);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&pulsa, "pulsa.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pulsaerr", (void*)&pulsaerr);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&pulsaerr, "pulsaerr.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ped", (void*)&ped);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&ped, "ped.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pederr", (void*)&pederr);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&pederr, "pederr.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vem", (void*)&vem);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&vem, "vem.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vemerr", (void*)&vemerr);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&vemerr, "vemerr.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tyro_cdist", (void*)&tyro_cdist);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&tyro_cdist, "tyro_cdist.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tyro_xymoments", (void*)&tyro_xymoments);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&tyro_xymoments, "tyro_xymoments.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tyro_xypmoments", (void*)&tyro_xypmoments);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&tyro_xypmoments, "tyro_xypmoments.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tyro_u", (void*)&tyro_u);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&tyro_u, "tyro_u.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tyro_v", (void*)&tyro_v);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&tyro_v, "tyro_v.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tyro_tfitpars", (void*)&tyro_tfitpars);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&tyro_tfitpars, "tyro_tfitpars.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tyro_chi2", (void*)&tyro_chi2);
      R__insp.InspectMember("vector<Double_t>", (void*)&tyro_chi2, "tyro_chi2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tyro_ndof", (void*)&tyro_ndof);
      R__insp.InspectMember("vector<Double_t>", (void*)&tyro_ndof, "tyro_ndof.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tyro_theta", (void*)&tyro_theta);
      R__insp.InspectMember("vector<Double_t>", (void*)&tyro_theta, "tyro_theta.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tyro_phi", (void*)&tyro_phi);
      R__insp.InspectMember("vector<Double_t>", (void*)&tyro_phi, "tyro_phi.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_rufptn_class(void *p) {
      return  p ? new(p) ::rufptn_class : new ::rufptn_class;
   }
   static void *newArray_rufptn_class(Long_t nElements, void *p) {
      return p ? new(p) ::rufptn_class[nElements] : new ::rufptn_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_rufptn_class(void *p) {
      delete ((::rufptn_class*)p);
   }
   static void deleteArray_rufptn_class(void *p) {
      delete [] ((::rufptn_class*)p);
   }
   static void destruct_rufptn_class(void *p) {
      typedef ::rufptn_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_rufptn_class(TBuffer &buf, void *obj) {
      ((::rufptn_class*)obj)->::rufptn_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::rufptn_class

//______________________________________________________________________________
void rusdgeom_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class rusdgeom_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      {
         vector<vector<Double_t> > &R__stl =  sdsigq;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("sdsigq streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  sdsigt;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("sdsigt streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  sdsigte;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("sdsigte streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  xyzclf;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("xyzclf streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  pulsa;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  sdtime;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  sdterr;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  xcore;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  dxcore;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  ycore;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  dycore;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  t0;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  dt0;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  theta;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  dtheta;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  phi;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  dphi;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  chi2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> a;
      R__b >> da;
      R__b >> tearliest;
      {
         vector<vector<Int_t> > &R__stl =  igsig;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("igsig streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  irufptn;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("irufptn streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  igsd;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  xxyy;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  nsig;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  sdirufptn;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  ndof;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> nsds;
      R__b.CheckByteCount(R__s, R__c, rusdgeom_class::IsA());
   } else {
      R__c = R__b.WriteVersion(rusdgeom_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      {
         vector<vector<Double_t> > &R__stl =  sdsigq;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("sdsigq streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  sdsigt;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("sdsigt streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  sdsigte;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("sdsigte streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  xyzclf;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("xyzclf streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  pulsa;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  sdtime;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  sdterr;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  xcore;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  dxcore;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  ycore;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  dycore;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  t0;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  dt0;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  theta;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  dtheta;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  phi;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  dphi;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  chi2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << a;
      R__b << da;
      R__b << tearliest;
      {
         vector<vector<Int_t> > &R__stl =  igsig;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("igsig streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  irufptn;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("irufptn streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  igsd;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  xxyy;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  nsig;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  sdirufptn;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  ndof;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << nsds;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void rusdgeom_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class rusdgeom_class.
      TClass *R__cl = ::rusdgeom_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdsigq", (void*)&sdsigq);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&sdsigq, "sdsigq.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdsigt", (void*)&sdsigt);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&sdsigt, "sdsigt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdsigte", (void*)&sdsigte);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&sdsigte, "sdsigte.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xyzclf", (void*)&xyzclf);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&xyzclf, "xyzclf.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pulsa", (void*)&pulsa);
      R__insp.InspectMember("vector<Double_t>", (void*)&pulsa, "pulsa.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdtime", (void*)&sdtime);
      R__insp.InspectMember("vector<Double_t>", (void*)&sdtime, "sdtime.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdterr", (void*)&sdterr);
      R__insp.InspectMember("vector<Double_t>", (void*)&sdterr, "sdterr.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xcore", (void*)&xcore);
      R__insp.InspectMember("vector<Double_t>", (void*)&xcore, "xcore.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxcore", (void*)&dxcore);
      R__insp.InspectMember("vector<Double_t>", (void*)&dxcore, "dxcore.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ycore", (void*)&ycore);
      R__insp.InspectMember("vector<Double_t>", (void*)&ycore, "ycore.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dycore", (void*)&dycore);
      R__insp.InspectMember("vector<Double_t>", (void*)&dycore, "dycore.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t0", (void*)&t0);
      R__insp.InspectMember("vector<Double_t>", (void*)&t0, "t0.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dt0", (void*)&dt0);
      R__insp.InspectMember("vector<Double_t>", (void*)&dt0, "dt0.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", (void*)&theta);
      R__insp.InspectMember("vector<Double_t>", (void*)&theta, "theta.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dtheta", (void*)&dtheta);
      R__insp.InspectMember("vector<Double_t>", (void*)&dtheta, "dtheta.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", (void*)&phi);
      R__insp.InspectMember("vector<Double_t>", (void*)&phi, "phi.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dphi", (void*)&dphi);
      R__insp.InspectMember("vector<Double_t>", (void*)&dphi, "dphi.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", (void*)&chi2);
      R__insp.InspectMember("vector<Double_t>", (void*)&chi2, "chi2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "a", &a);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "da", &da);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tearliest", &tearliest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "igsig", (void*)&igsig);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&igsig, "igsig.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "irufptn", (void*)&irufptn);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&irufptn, "irufptn.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "igsd", (void*)&igsd);
      R__insp.InspectMember("vector<Int_t>", (void*)&igsd, "igsd.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xxyy", (void*)&xxyy);
      R__insp.InspectMember("vector<Int_t>", (void*)&xxyy, "xxyy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nsig", (void*)&nsig);
      R__insp.InspectMember("vector<Int_t>", (void*)&nsig, "nsig.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdirufptn", (void*)&sdirufptn);
      R__insp.InspectMember("vector<Int_t>", (void*)&sdirufptn, "sdirufptn.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndof", (void*)&ndof);
      R__insp.InspectMember("vector<Int_t>", (void*)&ndof, "ndof.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nsds", &nsds);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_rusdgeom_class(void *p) {
      return  p ? new(p) ::rusdgeom_class : new ::rusdgeom_class;
   }
   static void *newArray_rusdgeom_class(Long_t nElements, void *p) {
      return p ? new(p) ::rusdgeom_class[nElements] : new ::rusdgeom_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_rusdgeom_class(void *p) {
      delete ((::rusdgeom_class*)p);
   }
   static void deleteArray_rusdgeom_class(void *p) {
      delete [] ((::rusdgeom_class*)p);
   }
   static void destruct_rusdgeom_class(void *p) {
      typedef ::rusdgeom_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_rusdgeom_class(TBuffer &buf, void *obj) {
      ((::rusdgeom_class*)obj)->::rusdgeom_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::rusdgeom_class

//______________________________________________________________________________
void rufldf_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class rufldf_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      {
         vector<Double_t> &R__stl =  xcore;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  dxcore;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  ycore;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  dycore;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  sc;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  dsc;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  s600;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  s600_0;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  s800;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  s800_0;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  aenergy;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  energy;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  atmcor;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  chi2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> theta;
      R__b >> dtheta;
      R__b >> phi;
      R__b >> dphi;
      R__b >> t0;
      R__b >> dt0;
      R__b >> bdist;
      R__b >> tdistbr;
      R__b >> tdistlr;
      R__b >> tdistsk;
      R__b >> tdist;
      {
         vector<Int_t> &R__stl =  ndof;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, rufldf_class::IsA());
   } else {
      R__c = R__b.WriteVersion(rufldf_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      {
         vector<Double_t> &R__stl =  xcore;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  dxcore;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  ycore;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  dycore;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  sc;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  dsc;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  s600;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  s600_0;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  s800;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  s800_0;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  aenergy;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  energy;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  atmcor;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  chi2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << theta;
      R__b << dtheta;
      R__b << phi;
      R__b << dphi;
      R__b << t0;
      R__b << dt0;
      R__b << bdist;
      R__b << tdistbr;
      R__b << tdistlr;
      R__b << tdistsk;
      R__b << tdist;
      {
         vector<Int_t> &R__stl =  ndof;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void rufldf_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class rufldf_class.
      TClass *R__cl = ::rufldf_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xcore", (void*)&xcore);
      R__insp.InspectMember("vector<Double_t>", (void*)&xcore, "xcore.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxcore", (void*)&dxcore);
      R__insp.InspectMember("vector<Double_t>", (void*)&dxcore, "dxcore.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ycore", (void*)&ycore);
      R__insp.InspectMember("vector<Double_t>", (void*)&ycore, "ycore.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dycore", (void*)&dycore);
      R__insp.InspectMember("vector<Double_t>", (void*)&dycore, "dycore.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sc", (void*)&sc);
      R__insp.InspectMember("vector<Double_t>", (void*)&sc, "sc.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dsc", (void*)&dsc);
      R__insp.InspectMember("vector<Double_t>", (void*)&dsc, "dsc.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "s600", (void*)&s600);
      R__insp.InspectMember("vector<Double_t>", (void*)&s600, "s600.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "s600_0", (void*)&s600_0);
      R__insp.InspectMember("vector<Double_t>", (void*)&s600_0, "s600_0.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "s800", (void*)&s800);
      R__insp.InspectMember("vector<Double_t>", (void*)&s800, "s800.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "s800_0", (void*)&s800_0);
      R__insp.InspectMember("vector<Double_t>", (void*)&s800_0, "s800_0.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aenergy", (void*)&aenergy);
      R__insp.InspectMember("vector<Double_t>", (void*)&aenergy, "aenergy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", (void*)&energy);
      R__insp.InspectMember("vector<Double_t>", (void*)&energy, "energy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "atmcor", (void*)&atmcor);
      R__insp.InspectMember("vector<Double_t>", (void*)&atmcor, "atmcor.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", (void*)&chi2);
      R__insp.InspectMember("vector<Double_t>", (void*)&chi2, "chi2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dtheta", &dtheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dphi", &dphi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t0", &t0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dt0", &dt0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bdist", &bdist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdistbr", &tdistbr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdistlr", &tdistlr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdistsk", &tdistsk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdist", &tdist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndof", (void*)&ndof);
      R__insp.InspectMember("vector<Int_t>", (void*)&ndof, "ndof.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_rufldf_class(void *p) {
      return  p ? new(p) ::rufldf_class : new ::rufldf_class;
   }
   static void *newArray_rufldf_class(Long_t nElements, void *p) {
      return p ? new(p) ::rufldf_class[nElements] : new ::rufldf_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_rufldf_class(void *p) {
      delete ((::rufldf_class*)p);
   }
   static void deleteArray_rufldf_class(void *p) {
      delete [] ((::rufldf_class*)p);
   }
   static void destruct_rufldf_class(void *p) {
      typedef ::rufldf_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_rufldf_class(TBuffer &buf, void *obj) {
      ((::rufldf_class*)obj)->::rufldf_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::rufldf_class

//______________________________________________________________________________
void etrack_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class etrack_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> energy;
      R__b >> xmax;
      R__b >> theta;
      R__b >> phi;
      R__b >> t0;
      R__b.ReadStaticArray((float*)xycore);
      {
         vector<Float_t> &R__stl =  udata;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> nudata;
      R__b >> yymmdd;
      R__b >> hhmmss;
      R__b >> qualct;
      R__b.CheckByteCount(R__s, R__c, etrack_class::IsA());
   } else {
      R__c = R__b.WriteVersion(etrack_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << energy;
      R__b << xmax;
      R__b << theta;
      R__b << phi;
      R__b << t0;
      R__b.WriteArray(xycore, 2);
      {
         vector<Float_t> &R__stl =  udata;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << nudata;
      R__b << yymmdd;
      R__b << hhmmss;
      R__b << qualct;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void etrack_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class etrack_class.
      TClass *R__cl = ::etrack_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xmax", &xmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t0", &t0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xycore[2]", xycore);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "udata", (void*)&udata);
      R__insp.InspectMember("vector<Float_t>", (void*)&udata, "udata.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nudata", &nudata);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yymmdd", &yymmdd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hhmmss", &hhmmss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qualct", &qualct);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_etrack_class(void *p) {
      return  p ? new(p) ::etrack_class : new ::etrack_class;
   }
   static void *newArray_etrack_class(Long_t nElements, void *p) {
      return p ? new(p) ::etrack_class[nElements] : new ::etrack_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_etrack_class(void *p) {
      delete ((::etrack_class*)p);
   }
   static void deleteArray_etrack_class(void *p) {
      delete [] ((::etrack_class*)p);
   }
   static void destruct_etrack_class(void *p) {
      typedef ::etrack_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_etrack_class(TBuffer &buf, void *obj) {
      ((::etrack_class*)obj)->::etrack_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::etrack_class

//______________________________________________________________________________
void atmpar_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class atmpar_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> dateFrom;
      R__b >> dateTo;
      R__b >> modelid;
      R__b >> nh;
      {
         vector<Double_t> &R__stl =  h;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  a;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  b;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  c;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> chi2;
      R__b >> ndof;
      R__b.CheckByteCount(R__s, R__c, atmpar_class::IsA());
   } else {
      R__c = R__b.WriteVersion(atmpar_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << dateFrom;
      R__b << dateTo;
      R__b << modelid;
      R__b << nh;
      {
         vector<Double_t> &R__stl =  h;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  a;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  b;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  c;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << chi2;
      R__b << ndof;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void atmpar_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class atmpar_class.
      TClass *R__cl = ::atmpar_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dateFrom", &dateFrom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dateTo", &dateTo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modelid", &modelid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nh", &nh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "h", (void*)&h);
      R__insp.InspectMember("vector<Double_t>", (void*)&h, "h.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "a", (void*)&a);
      R__insp.InspectMember("vector<Double_t>", (void*)&a, "a.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "b", (void*)&b);
      R__insp.InspectMember("vector<Double_t>", (void*)&b, "b.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c", (void*)&c);
      R__insp.InspectMember("vector<Double_t>", (void*)&c, "c.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", &chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndof", &ndof);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_atmpar_class(void *p) {
      return  p ? new(p) ::atmpar_class : new ::atmpar_class;
   }
   static void *newArray_atmpar_class(Long_t nElements, void *p) {
      return p ? new(p) ::atmpar_class[nElements] : new ::atmpar_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_atmpar_class(void *p) {
      delete ((::atmpar_class*)p);
   }
   static void deleteArray_atmpar_class(void *p) {
      delete [] ((::atmpar_class*)p);
   }
   static void destruct_atmpar_class(void *p) {
      typedef ::atmpar_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_atmpar_class(TBuffer &buf, void *obj) {
      ((::atmpar_class*)obj)->::atmpar_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::atmpar_class

//______________________________________________________________________________
void fdraw_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class fdraw_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> event_code;
      R__b >> part;
      R__b >> num_mir;
      R__b >> event_num;
      R__b >> julian;
      R__b >> jsecond;
      R__b >> gps1pps_tick;
      R__b >> ctdclock;
      R__b >> ctd_version;
      R__b >> tf_version;
      R__b >> sdf_version;
      {
         vector<Int_t> &R__stl =  trig_code;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  second;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  microsec;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  clkcnt;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Short_t> &R__stl =  mir_num;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Short_t> &R__stl =  num_chan;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  tf_mode;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  tf_mode2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Short_t> > &R__stl =  hit_pt;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<short,allocator<short> >));
         if (R__tcl1==0) {
            Error("hit_pt streamer","Missing the TClass object for vector<short,allocator<short> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<short,allocator<short> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Short_t> > &R__stl =  channel;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<short,allocator<short> >));
         if (R__tcl1==0) {
            Error("channel streamer","Missing the TClass object for vector<short,allocator<short> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<short,allocator<short> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Short_t> > &R__stl =  sdf_peak;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<short,allocator<short> >));
         if (R__tcl1==0) {
            Error("sdf_peak streamer","Missing the TClass object for vector<short,allocator<short> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<short,allocator<short> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Short_t> > &R__stl =  sdf_tmphit;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<short,allocator<short> >));
         if (R__tcl1==0) {
            Error("sdf_tmphit streamer","Missing the TClass object for vector<short,allocator<short> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<short,allocator<short> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Short_t> > &R__stl =  sdf_mode;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<short,allocator<short> >));
         if (R__tcl1==0) {
            Error("sdf_mode streamer","Missing the TClass object for vector<short,allocator<short> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<short,allocator<short> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Short_t> > &R__stl =  sdf_ctrl;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<short,allocator<short> >));
         if (R__tcl1==0) {
            Error("sdf_ctrl streamer","Missing the TClass object for vector<short,allocator<short> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<short,allocator<short> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Short_t> > &R__stl =  sdf_thre;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<short,allocator<short> >));
         if (R__tcl1==0) {
            Error("sdf_thre streamer","Missing the TClass object for vector<short,allocator<short> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<short,allocator<short> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<vector<UShort_t> > > &R__stl =  mean;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > >));
         if (R__tcl1==0) {
            Error("mean streamer","Missing the TClass object for vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<vector<UShort_t> > > &R__stl =  disp;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > >));
         if (R__tcl1==0) {
            Error("disp streamer","Missing the TClass object for vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<vector<Short_t> > > &R__stl =  m_fadc;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >));
         if (R__tcl1==0) {
            Error("m_fadc streamer","Missing the TClass object for vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b >> used_bankid;
      R__b.CheckByteCount(R__s, R__c, fdraw_class::IsA());
   } else {
      R__c = R__b.WriteVersion(fdraw_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << event_code;
      R__b << part;
      R__b << num_mir;
      R__b << event_num;
      R__b << julian;
      R__b << jsecond;
      R__b << gps1pps_tick;
      R__b << ctdclock;
      R__b << ctd_version;
      R__b << tf_version;
      R__b << sdf_version;
      {
         vector<Int_t> &R__stl =  trig_code;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  second;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  microsec;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  clkcnt;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Short_t> &R__stl =  mir_num;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Short_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Short_t> &R__stl =  num_chan;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Short_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  tf_mode;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  tf_mode2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<vector<Short_t> > &R__stl =  hit_pt;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<short,allocator<short> >));
         if (R__tcl1==0) {
            Error("hit_pt streamer","Missing the TClass object for vector<short,allocator<short> >!");
            return;
         }
            vector<vector<Short_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<short,allocator<short> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Short_t> > &R__stl =  channel;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<short,allocator<short> >));
         if (R__tcl1==0) {
            Error("channel streamer","Missing the TClass object for vector<short,allocator<short> >!");
            return;
         }
            vector<vector<Short_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<short,allocator<short> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Short_t> > &R__stl =  sdf_peak;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<short,allocator<short> >));
         if (R__tcl1==0) {
            Error("sdf_peak streamer","Missing the TClass object for vector<short,allocator<short> >!");
            return;
         }
            vector<vector<Short_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<short,allocator<short> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Short_t> > &R__stl =  sdf_tmphit;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<short,allocator<short> >));
         if (R__tcl1==0) {
            Error("sdf_tmphit streamer","Missing the TClass object for vector<short,allocator<short> >!");
            return;
         }
            vector<vector<Short_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<short,allocator<short> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Short_t> > &R__stl =  sdf_mode;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<short,allocator<short> >));
         if (R__tcl1==0) {
            Error("sdf_mode streamer","Missing the TClass object for vector<short,allocator<short> >!");
            return;
         }
            vector<vector<Short_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<short,allocator<short> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Short_t> > &R__stl =  sdf_ctrl;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<short,allocator<short> >));
         if (R__tcl1==0) {
            Error("sdf_ctrl streamer","Missing the TClass object for vector<short,allocator<short> >!");
            return;
         }
            vector<vector<Short_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<short,allocator<short> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Short_t> > &R__stl =  sdf_thre;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<short,allocator<short> >));
         if (R__tcl1==0) {
            Error("sdf_thre streamer","Missing the TClass object for vector<short,allocator<short> >!");
            return;
         }
            vector<vector<Short_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<short,allocator<short> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<vector<UShort_t> > > &R__stl =  mean;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > >));
         if (R__tcl1==0) {
            Error("mean streamer","Missing the TClass object for vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > >!");
            return;
         }
            vector<vector<vector<UShort_t> > >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<vector<UShort_t> > > &R__stl =  disp;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > >));
         if (R__tcl1==0) {
            Error("disp streamer","Missing the TClass object for vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > >!");
            return;
         }
            vector<vector<vector<UShort_t> > >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<vector<Short_t> > > &R__stl =  m_fadc;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >));
         if (R__tcl1==0) {
            Error("m_fadc streamer","Missing the TClass object for vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >!");
            return;
         }
            vector<vector<vector<Short_t> > >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*)&(*R__k),R__tcl1);
            }
         }
      }
      R__b << used_bankid;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void fdraw_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class fdraw_class.
      TClass *R__cl = ::fdraw_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event_code", &event_code);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "part", &part);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "num_mir", &num_mir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event_num", &event_num);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "julian", &julian);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jsecond", &jsecond);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gps1pps_tick", &gps1pps_tick);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ctdclock", &ctdclock);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ctd_version", &ctd_version);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tf_version", &tf_version);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdf_version", &sdf_version);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trig_code", (void*)&trig_code);
      R__insp.InspectMember("vector<Int_t>", (void*)&trig_code, "trig_code.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "second", (void*)&second);
      R__insp.InspectMember("vector<Int_t>", (void*)&second, "second.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "microsec", (void*)&microsec);
      R__insp.InspectMember("vector<Int_t>", (void*)&microsec, "microsec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clkcnt", (void*)&clkcnt);
      R__insp.InspectMember("vector<Int_t>", (void*)&clkcnt, "clkcnt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mir_num", (void*)&mir_num);
      R__insp.InspectMember("vector<Short_t>", (void*)&mir_num, "mir_num.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "num_chan", (void*)&num_chan);
      R__insp.InspectMember("vector<Short_t>", (void*)&num_chan, "num_chan.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tf_mode", (void*)&tf_mode);
      R__insp.InspectMember("vector<Int_t>", (void*)&tf_mode, "tf_mode.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tf_mode2", (void*)&tf_mode2);
      R__insp.InspectMember("vector<Int_t>", (void*)&tf_mode2, "tf_mode2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hit_pt", (void*)&hit_pt);
      R__insp.InspectMember("vector<vector<Short_t> >", (void*)&hit_pt, "hit_pt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "channel", (void*)&channel);
      R__insp.InspectMember("vector<vector<Short_t> >", (void*)&channel, "channel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdf_peak", (void*)&sdf_peak);
      R__insp.InspectMember("vector<vector<Short_t> >", (void*)&sdf_peak, "sdf_peak.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdf_tmphit", (void*)&sdf_tmphit);
      R__insp.InspectMember("vector<vector<Short_t> >", (void*)&sdf_tmphit, "sdf_tmphit.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdf_mode", (void*)&sdf_mode);
      R__insp.InspectMember("vector<vector<Short_t> >", (void*)&sdf_mode, "sdf_mode.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdf_ctrl", (void*)&sdf_ctrl);
      R__insp.InspectMember("vector<vector<Short_t> >", (void*)&sdf_ctrl, "sdf_ctrl.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdf_thre", (void*)&sdf_thre);
      R__insp.InspectMember("vector<vector<Short_t> >", (void*)&sdf_thre, "sdf_thre.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mean", (void*)&mean);
      R__insp.InspectMember("vector<vector<vector<UShort_t> > >", (void*)&mean, "mean.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "disp", (void*)&disp);
      R__insp.InspectMember("vector<vector<vector<UShort_t> > >", (void*)&disp, "disp.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fadc", (void*)&m_fadc);
      R__insp.InspectMember("vector<vector<vector<Short_t> > >", (void*)&m_fadc, "m_fadc.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "used_bankid", &used_bankid);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_fdraw_class(void *p) {
      return  p ? new(p) ::fdraw_class : new ::fdraw_class;
   }
   static void *newArray_fdraw_class(Long_t nElements, void *p) {
      return p ? new(p) ::fdraw_class[nElements] : new ::fdraw_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_fdraw_class(void *p) {
      delete ((::fdraw_class*)p);
   }
   static void deleteArray_fdraw_class(void *p) {
      delete [] ((::fdraw_class*)p);
   }
   static void destruct_fdraw_class(void *p) {
      typedef ::fdraw_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_fdraw_class(TBuffer &buf, void *obj) {
      ((::fdraw_class*)obj)->::fdraw_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::fdraw_class

//______________________________________________________________________________
void brraw_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class brraw_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      fdraw_class::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, brraw_class::IsA());
   } else {
      R__c = R__b.WriteVersion(brraw_class::IsA(), kTRUE);
      fdraw_class::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void brraw_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class brraw_class.
      TClass *R__cl = ::brraw_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      fdraw_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_brraw_class(void *p) {
      return  p ? new(p) ::brraw_class : new ::brraw_class;
   }
   static void *newArray_brraw_class(Long_t nElements, void *p) {
      return p ? new(p) ::brraw_class[nElements] : new ::brraw_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_brraw_class(void *p) {
      delete ((::brraw_class*)p);
   }
   static void deleteArray_brraw_class(void *p) {
      delete [] ((::brraw_class*)p);
   }
   static void destruct_brraw_class(void *p) {
      typedef ::brraw_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_brraw_class(TBuffer &buf, void *obj) {
      ((::brraw_class*)obj)->::brraw_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::brraw_class

//______________________________________________________________________________
void lrraw_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class lrraw_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      fdraw_class::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, lrraw_class::IsA());
   } else {
      R__c = R__b.WriteVersion(lrraw_class::IsA(), kTRUE);
      fdraw_class::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void lrraw_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class lrraw_class.
      TClass *R__cl = ::lrraw_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      fdraw_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_lrraw_class(void *p) {
      return  p ? new(p) ::lrraw_class : new ::lrraw_class;
   }
   static void *newArray_lrraw_class(Long_t nElements, void *p) {
      return p ? new(p) ::lrraw_class[nElements] : new ::lrraw_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_lrraw_class(void *p) {
      delete ((::lrraw_class*)p);
   }
   static void deleteArray_lrraw_class(void *p) {
      delete [] ((::lrraw_class*)p);
   }
   static void destruct_lrraw_class(void *p) {
      typedef ::lrraw_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_lrraw_class(TBuffer &buf, void *obj) {
      ((::lrraw_class*)obj)->::lrraw_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::lrraw_class

//______________________________________________________________________________
void fdplane_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class fdplane_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> part;
      R__b >> event_num;
      R__b >> julian;
      R__b >> jsecond;
      R__b >> jsecfrac;
      R__b >> second;
      R__b >> secfrac;
      R__b >> ntube;
      R__b >> uniqID;
      R__b >> fmode;
      {
         vector<Double_t> &R__stl =  npe;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  adc;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  ped;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  time;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  time_rms;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  sigma;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.ReadStaticArray((double*)sdp_n);
      R__b.ReadStaticArray((double*)sdp_en);
      R__b.ReadStaticArray((double*)sdp_n_cov);
      R__b >> sdp_the;
      R__b >> sdp_phi;
      R__b >> sdp_chi2;
      {
         vector<Double_t> &R__stl =  alt;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  azm;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  plane_alt;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  plane_azm;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> linefit_slope;
      R__b >> linefit_eslope;
      R__b >> linefit_int;
      R__b >> linefit_eint;
      R__b >> linefit_chi2;
      R__b.ReadStaticArray((double*)linefit_cov);
      {
         vector<Double_t> &R__stl =  linefit_res;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  linefit_tchi2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> ptanfit_rp;
      R__b >> ptanfit_erp;
      R__b >> ptanfit_t0;
      R__b >> ptanfit_et0;
      R__b >> ptanfit_chi2;
      R__b.ReadStaticArray((double*)ptanfit_cov);
      {
         vector<Double_t> &R__stl =  ptanfit_res;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  ptanfit_tchi2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> rp;
      R__b >> erp;
      R__b >> psi;
      R__b >> epsi;
      R__b >> t0;
      R__b >> et0;
      R__b >> tanfit_chi2;
      R__b.ReadStaticArray((double*)tanfit_cov);
      {
         vector<Double_t> &R__stl =  tanfit_res;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  tanfit_tchi2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> azm_extent;
      R__b >> time_extent;
      R__b >> shower_zen;
      R__b >> shower_azm;
      R__b.ReadStaticArray((double*)shower_axis);
      R__b.ReadStaticArray((double*)rpuv);
      R__b.ReadStaticArray((double*)core);
      {
         vector<Int_t> &R__stl =  camera;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  tube;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  it0;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  it1;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  knex_qual;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  tube_qual;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> ngtube;
      R__b >> seed;
      R__b >> type;
      R__b >> status;
      R__b >> siteid;
      R__b >> used_bankid;
      R__b.CheckByteCount(R__s, R__c, fdplane_class::IsA());
   } else {
      R__c = R__b.WriteVersion(fdplane_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << part;
      R__b << event_num;
      R__b << julian;
      R__b << jsecond;
      R__b << jsecfrac;
      R__b << second;
      R__b << secfrac;
      R__b << ntube;
      R__b << uniqID;
      R__b << fmode;
      {
         vector<Double_t> &R__stl =  npe;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  adc;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  ped;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  time;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  time_rms;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  sigma;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.WriteArray(sdp_n, 3);
      R__b.WriteArray(sdp_en, 3);
      R__b.WriteArray((double*)sdp_n_cov, 9);
      R__b << sdp_the;
      R__b << sdp_phi;
      R__b << sdp_chi2;
      {
         vector<Double_t> &R__stl =  alt;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  azm;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  plane_alt;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  plane_azm;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << linefit_slope;
      R__b << linefit_eslope;
      R__b << linefit_int;
      R__b << linefit_eint;
      R__b << linefit_chi2;
      R__b.WriteArray((double*)linefit_cov, 4);
      {
         vector<Double_t> &R__stl =  linefit_res;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  linefit_tchi2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << ptanfit_rp;
      R__b << ptanfit_erp;
      R__b << ptanfit_t0;
      R__b << ptanfit_et0;
      R__b << ptanfit_chi2;
      R__b.WriteArray((double*)ptanfit_cov, 4);
      {
         vector<Double_t> &R__stl =  ptanfit_res;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  ptanfit_tchi2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << rp;
      R__b << erp;
      R__b << psi;
      R__b << epsi;
      R__b << t0;
      R__b << et0;
      R__b << tanfit_chi2;
      R__b.WriteArray((double*)tanfit_cov, 9);
      {
         vector<Double_t> &R__stl =  tanfit_res;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  tanfit_tchi2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << azm_extent;
      R__b << time_extent;
      R__b << shower_zen;
      R__b << shower_azm;
      R__b.WriteArray(shower_axis, 3);
      R__b.WriteArray(rpuv, 3);
      R__b.WriteArray(core, 3);
      {
         vector<Int_t> &R__stl =  camera;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  tube;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  it0;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  it1;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  knex_qual;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  tube_qual;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << ngtube;
      R__b << seed;
      R__b << type;
      R__b << status;
      R__b << siteid;
      R__b << used_bankid;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void fdplane_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class fdplane_class.
      TClass *R__cl = ::fdplane_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "part", &part);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event_num", &event_num);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "julian", &julian);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jsecond", &jsecond);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jsecfrac", &jsecfrac);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "second", &second);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "secfrac", &secfrac);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntube", &ntube);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "uniqID", &uniqID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmode", &fmode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npe", (void*)&npe);
      R__insp.InspectMember("vector<Double_t>", (void*)&npe, "npe.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "adc", (void*)&adc);
      R__insp.InspectMember("vector<Double_t>", (void*)&adc, "adc.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ped", (void*)&ped);
      R__insp.InspectMember("vector<Double_t>", (void*)&ped, "ped.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", (void*)&time);
      R__insp.InspectMember("vector<Double_t>", (void*)&time, "time.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time_rms", (void*)&time_rms);
      R__insp.InspectMember("vector<Double_t>", (void*)&time_rms, "time_rms.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma", (void*)&sigma);
      R__insp.InspectMember("vector<Double_t>", (void*)&sigma, "sigma.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdp_n[3]", sdp_n);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdp_en[3]", sdp_en);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdp_n_cov[3][3]", sdp_n_cov);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdp_the", &sdp_the);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdp_phi", &sdp_phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdp_chi2", &sdp_chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alt", (void*)&alt);
      R__insp.InspectMember("vector<Double_t>", (void*)&alt, "alt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "azm", (void*)&azm);
      R__insp.InspectMember("vector<Double_t>", (void*)&azm, "azm.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "plane_alt", (void*)&plane_alt);
      R__insp.InspectMember("vector<Double_t>", (void*)&plane_alt, "plane_alt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "plane_azm", (void*)&plane_azm);
      R__insp.InspectMember("vector<Double_t>", (void*)&plane_azm, "plane_azm.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "linefit_slope", &linefit_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "linefit_eslope", &linefit_eslope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "linefit_int", &linefit_int);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "linefit_eint", &linefit_eint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "linefit_chi2", &linefit_chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "linefit_cov[2][2]", linefit_cov);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "linefit_res", (void*)&linefit_res);
      R__insp.InspectMember("vector<Double_t>", (void*)&linefit_res, "linefit_res.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "linefit_tchi2", (void*)&linefit_tchi2);
      R__insp.InspectMember("vector<Double_t>", (void*)&linefit_tchi2, "linefit_tchi2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptanfit_rp", &ptanfit_rp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptanfit_erp", &ptanfit_erp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptanfit_t0", &ptanfit_t0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptanfit_et0", &ptanfit_et0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptanfit_chi2", &ptanfit_chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptanfit_cov[2][2]", ptanfit_cov);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptanfit_res", (void*)&ptanfit_res);
      R__insp.InspectMember("vector<Double_t>", (void*)&ptanfit_res, "ptanfit_res.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptanfit_tchi2", (void*)&ptanfit_tchi2);
      R__insp.InspectMember("vector<Double_t>", (void*)&ptanfit_tchi2, "ptanfit_tchi2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rp", &rp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "erp", &erp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "psi", &psi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "epsi", &epsi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t0", &t0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "et0", &et0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tanfit_chi2", &tanfit_chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tanfit_cov[3][3]", tanfit_cov);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tanfit_res", (void*)&tanfit_res);
      R__insp.InspectMember("vector<Double_t>", (void*)&tanfit_res, "tanfit_res.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tanfit_tchi2", (void*)&tanfit_tchi2);
      R__insp.InspectMember("vector<Double_t>", (void*)&tanfit_tchi2, "tanfit_tchi2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "azm_extent", &azm_extent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time_extent", &time_extent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shower_zen", &shower_zen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shower_azm", &shower_azm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shower_axis[3]", shower_axis);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpuv[3]", rpuv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "core[3]", core);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "camera", (void*)&camera);
      R__insp.InspectMember("vector<Int_t>", (void*)&camera, "camera.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tube", (void*)&tube);
      R__insp.InspectMember("vector<Int_t>", (void*)&tube, "tube.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "it0", (void*)&it0);
      R__insp.InspectMember("vector<Int_t>", (void*)&it0, "it0.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "it1", (void*)&it1);
      R__insp.InspectMember("vector<Int_t>", (void*)&it1, "it1.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "knex_qual", (void*)&knex_qual);
      R__insp.InspectMember("vector<Int_t>", (void*)&knex_qual, "knex_qual.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tube_qual", (void*)&tube_qual);
      R__insp.InspectMember("vector<Int_t>", (void*)&tube_qual, "tube_qual.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ngtube", &ngtube);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "seed", &seed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "type", &type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "siteid", &siteid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "used_bankid", &used_bankid);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_fdplane_class(void *p) {
      return  p ? new(p) ::fdplane_class : new ::fdplane_class;
   }
   static void *newArray_fdplane_class(Long_t nElements, void *p) {
      return p ? new(p) ::fdplane_class[nElements] : new ::fdplane_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_fdplane_class(void *p) {
      delete ((::fdplane_class*)p);
   }
   static void deleteArray_fdplane_class(void *p) {
      delete [] ((::fdplane_class*)p);
   }
   static void destruct_fdplane_class(void *p) {
      typedef ::fdplane_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_fdplane_class(TBuffer &buf, void *obj) {
      ((::fdplane_class*)obj)->::fdplane_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::fdplane_class

//______________________________________________________________________________
void brplane_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class brplane_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      fdplane_class::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, brplane_class::IsA());
   } else {
      R__c = R__b.WriteVersion(brplane_class::IsA(), kTRUE);
      fdplane_class::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void brplane_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class brplane_class.
      TClass *R__cl = ::brplane_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      fdplane_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_brplane_class(void *p) {
      return  p ? new(p) ::brplane_class : new ::brplane_class;
   }
   static void *newArray_brplane_class(Long_t nElements, void *p) {
      return p ? new(p) ::brplane_class[nElements] : new ::brplane_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_brplane_class(void *p) {
      delete ((::brplane_class*)p);
   }
   static void deleteArray_brplane_class(void *p) {
      delete [] ((::brplane_class*)p);
   }
   static void destruct_brplane_class(void *p) {
      typedef ::brplane_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_brplane_class(TBuffer &buf, void *obj) {
      ((::brplane_class*)obj)->::brplane_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::brplane_class

//______________________________________________________________________________
void lrplane_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class lrplane_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      fdplane_class::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, lrplane_class::IsA());
   } else {
      R__c = R__b.WriteVersion(lrplane_class::IsA(), kTRUE);
      fdplane_class::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void lrplane_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class lrplane_class.
      TClass *R__cl = ::lrplane_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      fdplane_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_lrplane_class(void *p) {
      return  p ? new(p) ::lrplane_class : new ::lrplane_class;
   }
   static void *newArray_lrplane_class(Long_t nElements, void *p) {
      return p ? new(p) ::lrplane_class[nElements] : new ::lrplane_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_lrplane_class(void *p) {
      delete ((::lrplane_class*)p);
   }
   static void deleteArray_lrplane_class(void *p) {
      delete [] ((::lrplane_class*)p);
   }
   static void destruct_lrplane_class(void *p) {
      typedef ::lrplane_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_lrplane_class(TBuffer &buf, void *obj) {
      ((::lrplane_class*)obj)->::lrplane_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::lrplane_class

//______________________________________________________________________________
void fdprofile_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class fdprofile_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> siteid;
      R__b >> ntslice;
      R__b.ReadStaticArray((int*)ngtslice);
      R__b.ReadStaticArray((int*)status);
      {
         vector<Int_t> &R__stl =  timebin;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.ReadStaticArray((double*)rp);
      R__b.ReadStaticArray((double*)psi);
      R__b.ReadStaticArray((double*)t0);
      R__b.ReadStaticArray((double*)Xmax);
      R__b.ReadStaticArray((double*)eXmax);
      R__b.ReadStaticArray((double*)Nmax);
      R__b.ReadStaticArray((double*)eNmax);
      R__b.ReadStaticArray((double*)Energy);
      R__b.ReadStaticArray((double*)eEnergy);
      R__b.ReadStaticArray((double*)chi2);
      {
         vector<Double_t> &R__stl =  npe;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  enpe;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  x;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("x streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  dtheta;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("dtheta streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  darea;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("darea streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  acpt;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("acpt streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  eacpt;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("eacpt streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  flux;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("flux streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  eflux;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("eflux streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  nfl;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("nfl streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ncvdir;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ncvdir streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ncvmie;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ncvmie streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ncvray;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ncvray streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  simflux;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("simflux streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tres;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tres streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tchi2;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tchi2 streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ne;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ne streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ene;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ene streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b >> mc;
      R__b >> used_bankid;
      R__b.CheckByteCount(R__s, R__c, fdprofile_class::IsA());
   } else {
      R__c = R__b.WriteVersion(fdprofile_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << siteid;
      R__b << ntslice;
      R__b.WriteArray(ngtslice, 3);
      R__b.WriteArray(status, 3);
      {
         vector<Int_t> &R__stl =  timebin;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.WriteArray(rp, 3);
      R__b.WriteArray(psi, 3);
      R__b.WriteArray(t0, 3);
      R__b.WriteArray(Xmax, 3);
      R__b.WriteArray(eXmax, 3);
      R__b.WriteArray(Nmax, 3);
      R__b.WriteArray(eNmax, 3);
      R__b.WriteArray(Energy, 3);
      R__b.WriteArray(eEnergy, 3);
      R__b.WriteArray(chi2, 3);
      {
         vector<Double_t> &R__stl =  npe;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  enpe;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  x;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("x streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  dtheta;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("dtheta streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  darea;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("darea streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  acpt;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("acpt streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  eacpt;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("eacpt streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  flux;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("flux streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  eflux;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("eflux streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  nfl;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("nfl streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ncvdir;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ncvdir streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ncvmie;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ncvmie streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ncvray;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ncvray streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  simflux;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("simflux streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tres;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tres streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tchi2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tchi2 streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ne;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ne streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ene;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ene streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      R__b << mc;
      R__b << used_bankid;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void fdprofile_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class fdprofile_class.
      TClass *R__cl = ::fdprofile_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "siteid", &siteid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntslice", &ntslice);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ngtslice[3]", ngtslice);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status[3]", status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timebin", (void*)&timebin);
      R__insp.InspectMember("vector<Int_t>", (void*)&timebin, "timebin.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rp[3]", rp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "psi[3]", psi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t0[3]", t0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Xmax[3]", Xmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXmax[3]", eXmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Nmax[3]", Nmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNmax[3]", eNmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Energy[3]", Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eEnergy[3]", eEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2[3]", chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npe", (void*)&npe);
      R__insp.InspectMember("vector<Double_t>", (void*)&npe, "npe.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "enpe", (void*)&enpe);
      R__insp.InspectMember("vector<Double_t>", (void*)&enpe, "enpe.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", (void*)&x);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&x, "x.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dtheta", (void*)&dtheta);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&dtheta, "dtheta.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "darea", (void*)&darea);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&darea, "darea.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "acpt", (void*)&acpt);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&acpt, "acpt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eacpt", (void*)&eacpt);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&eacpt, "eacpt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flux", (void*)&flux);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&flux, "flux.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eflux", (void*)&eflux);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&eflux, "eflux.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nfl", (void*)&nfl);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&nfl, "nfl.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ncvdir", (void*)&ncvdir);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&ncvdir, "ncvdir.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ncvmie", (void*)&ncvmie);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&ncvmie, "ncvmie.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ncvray", (void*)&ncvray);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&ncvray, "ncvray.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "simflux", (void*)&simflux);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&simflux, "simflux.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tres", (void*)&tres);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&tres, "tres.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tchi2", (void*)&tchi2);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&tchi2, "tchi2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ne", (void*)&ne);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&ne, "ne.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ene", (void*)&ene);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&ene, "ene.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mc", &mc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "used_bankid", &used_bankid);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_fdprofile_class(void *p) {
      return  p ? new(p) ::fdprofile_class : new ::fdprofile_class;
   }
   static void *newArray_fdprofile_class(Long_t nElements, void *p) {
      return p ? new(p) ::fdprofile_class[nElements] : new ::fdprofile_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_fdprofile_class(void *p) {
      delete ((::fdprofile_class*)p);
   }
   static void deleteArray_fdprofile_class(void *p) {
      delete [] ((::fdprofile_class*)p);
   }
   static void destruct_fdprofile_class(void *p) {
      typedef ::fdprofile_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_fdprofile_class(TBuffer &buf, void *obj) {
      ((::fdprofile_class*)obj)->::fdprofile_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::fdprofile_class

//______________________________________________________________________________
void brprofile_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class brprofile_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      fdprofile_class::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, brprofile_class::IsA());
   } else {
      R__c = R__b.WriteVersion(brprofile_class::IsA(), kTRUE);
      fdprofile_class::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void brprofile_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class brprofile_class.
      TClass *R__cl = ::brprofile_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      fdprofile_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_brprofile_class(void *p) {
      return  p ? new(p) ::brprofile_class : new ::brprofile_class;
   }
   static void *newArray_brprofile_class(Long_t nElements, void *p) {
      return p ? new(p) ::brprofile_class[nElements] : new ::brprofile_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_brprofile_class(void *p) {
      delete ((::brprofile_class*)p);
   }
   static void deleteArray_brprofile_class(void *p) {
      delete [] ((::brprofile_class*)p);
   }
   static void destruct_brprofile_class(void *p) {
      typedef ::brprofile_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_brprofile_class(TBuffer &buf, void *obj) {
      ((::brprofile_class*)obj)->::brprofile_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::brprofile_class

//______________________________________________________________________________
void lrprofile_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class lrprofile_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      fdprofile_class::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, lrprofile_class::IsA());
   } else {
      R__c = R__b.WriteVersion(lrprofile_class::IsA(), kTRUE);
      fdprofile_class::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void lrprofile_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class lrprofile_class.
      TClass *R__cl = ::lrprofile_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      fdprofile_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_lrprofile_class(void *p) {
      return  p ? new(p) ::lrprofile_class : new ::lrprofile_class;
   }
   static void *newArray_lrprofile_class(Long_t nElements, void *p) {
      return p ? new(p) ::lrprofile_class[nElements] : new ::lrprofile_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_lrprofile_class(void *p) {
      delete ((::lrprofile_class*)p);
   }
   static void deleteArray_lrprofile_class(void *p) {
      delete [] ((::lrprofile_class*)p);
   }
   static void destruct_lrprofile_class(void *p) {
      typedef ::lrprofile_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_lrprofile_class(TBuffer &buf, void *obj) {
      ((::lrprofile_class*)obj)->::lrprofile_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::lrprofile_class

//______________________________________________________________________________
void fdtubeprofile_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class fdtubeprofile_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> ntube;
      R__b.ReadStaticArray((int*)ngtube);
      R__b.ReadStaticArray((double*)rp);
      R__b.ReadStaticArray((double*)psi);
      R__b.ReadStaticArray((double*)t0);
      R__b.ReadStaticArray((double*)Xmax);
      R__b.ReadStaticArray((double*)eXmax);
      R__b.ReadStaticArray((double*)Nmax);
      R__b.ReadStaticArray((double*)eNmax);
      R__b.ReadStaticArray((double*)Energy);
      R__b.ReadStaticArray((double*)eEnergy);
      R__b.ReadStaticArray((double*)chi2);
      R__b.ReadStaticArray((double*)X0);
      R__b.ReadStaticArray((double*)eX0);
      R__b.ReadStaticArray((double*)Lambda);
      R__b.ReadStaticArray((double*)eLambda);
      {
         vector<vector<Double_t> > &R__stl =  x;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("x streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  npe;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("npe streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  enpe;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("enpe streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  eacptfrac;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("eacptfrac streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  acpt;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("acpt streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  eacpt;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("eacpt streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  flux;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("flux streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  eflux;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("eflux streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  simnpe;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("simnpe streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  nfl;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("nfl streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ncvdir;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ncvdir streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ncvmie;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ncvmie streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ncvray;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ncvray streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  simflux;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("simflux streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ne;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ne streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ene;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ene streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tres;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tres streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tchi2;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tchi2 streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  camera;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  tube;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  tube_qual;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("tube_qual streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.ReadStaticArray((int*)status);
      R__b >> siteid;
      R__b >> mc;
      {
         vector<vector<Double_t> > &R__stl =  simtime;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("simtime streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  simtrms;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("simtrms streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  simtres;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("simtres streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  timechi2;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("timechi2 streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b >> used_bankid;
      R__b.CheckByteCount(R__s, R__c, fdtubeprofile_class::IsA());
   } else {
      R__c = R__b.WriteVersion(fdtubeprofile_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << ntube;
      R__b.WriteArray(ngtube, 3);
      R__b.WriteArray(rp, 3);
      R__b.WriteArray(psi, 3);
      R__b.WriteArray(t0, 3);
      R__b.WriteArray(Xmax, 3);
      R__b.WriteArray(eXmax, 3);
      R__b.WriteArray(Nmax, 3);
      R__b.WriteArray(eNmax, 3);
      R__b.WriteArray(Energy, 3);
      R__b.WriteArray(eEnergy, 3);
      R__b.WriteArray(chi2, 3);
      R__b.WriteArray(X0, 3);
      R__b.WriteArray(eX0, 3);
      R__b.WriteArray(Lambda, 3);
      R__b.WriteArray(eLambda, 3);
      {
         vector<vector<Double_t> > &R__stl =  x;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("x streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  npe;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("npe streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  enpe;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("enpe streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  eacptfrac;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("eacptfrac streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  acpt;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("acpt streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  eacpt;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("eacpt streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  flux;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("flux streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  eflux;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("eflux streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  simnpe;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("simnpe streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  nfl;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("nfl streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ncvdir;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ncvdir streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ncvmie;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ncvmie streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ncvray;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ncvray streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  simflux;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("simflux streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ne;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ne streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ene;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ene streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tres;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tres streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  tchi2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("tchi2 streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  camera;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  tube;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  tube_qual;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("tube_qual streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      R__b.WriteArray(status, 3);
      R__b << siteid;
      R__b << mc;
      {
         vector<vector<Double_t> > &R__stl =  simtime;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("simtime streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  simtrms;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("simtrms streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  simtres;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("simtres streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  timechi2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("timechi2 streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      R__b << used_bankid;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void fdtubeprofile_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class fdtubeprofile_class.
      TClass *R__cl = ::fdtubeprofile_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntube", &ntube);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ngtube[3]", ngtube);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rp[3]", rp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "psi[3]", psi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t0[3]", t0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Xmax[3]", Xmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXmax[3]", eXmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Nmax[3]", Nmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNmax[3]", eNmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Energy[3]", Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eEnergy[3]", eEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2[3]", chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "X0[3]", X0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eX0[3]", eX0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Lambda[3]", Lambda);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eLambda[3]", eLambda);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", (void*)&x);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&x, "x.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npe", (void*)&npe);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&npe, "npe.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "enpe", (void*)&enpe);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&enpe, "enpe.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eacptfrac", (void*)&eacptfrac);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&eacptfrac, "eacptfrac.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "acpt", (void*)&acpt);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&acpt, "acpt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eacpt", (void*)&eacpt);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&eacpt, "eacpt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flux", (void*)&flux);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&flux, "flux.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eflux", (void*)&eflux);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&eflux, "eflux.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "simnpe", (void*)&simnpe);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&simnpe, "simnpe.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nfl", (void*)&nfl);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&nfl, "nfl.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ncvdir", (void*)&ncvdir);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&ncvdir, "ncvdir.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ncvmie", (void*)&ncvmie);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&ncvmie, "ncvmie.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ncvray", (void*)&ncvray);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&ncvray, "ncvray.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "simflux", (void*)&simflux);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&simflux, "simflux.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ne", (void*)&ne);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&ne, "ne.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ene", (void*)&ene);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&ene, "ene.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tres", (void*)&tres);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&tres, "tres.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tchi2", (void*)&tchi2);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&tchi2, "tchi2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "camera", (void*)&camera);
      R__insp.InspectMember("vector<Int_t>", (void*)&camera, "camera.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tube", (void*)&tube);
      R__insp.InspectMember("vector<Int_t>", (void*)&tube, "tube.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tube_qual", (void*)&tube_qual);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&tube_qual, "tube_qual.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status[3]", status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "siteid", &siteid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mc", &mc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "simtime", (void*)&simtime);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&simtime, "simtime.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "simtrms", (void*)&simtrms);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&simtrms, "simtrms.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "simtres", (void*)&simtres);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&simtres, "simtres.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timechi2", (void*)&timechi2);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&timechi2, "timechi2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "used_bankid", &used_bankid);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_fdtubeprofile_class(void *p) {
      return  p ? new(p) ::fdtubeprofile_class : new ::fdtubeprofile_class;
   }
   static void *newArray_fdtubeprofile_class(Long_t nElements, void *p) {
      return p ? new(p) ::fdtubeprofile_class[nElements] : new ::fdtubeprofile_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_fdtubeprofile_class(void *p) {
      delete ((::fdtubeprofile_class*)p);
   }
   static void deleteArray_fdtubeprofile_class(void *p) {
      delete [] ((::fdtubeprofile_class*)p);
   }
   static void destruct_fdtubeprofile_class(void *p) {
      typedef ::fdtubeprofile_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_fdtubeprofile_class(TBuffer &buf, void *obj) {
      ((::fdtubeprofile_class*)obj)->::fdtubeprofile_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::fdtubeprofile_class

//______________________________________________________________________________
void brtubeprofile_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class brtubeprofile_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      fdtubeprofile_class::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, brtubeprofile_class::IsA());
   } else {
      R__c = R__b.WriteVersion(brtubeprofile_class::IsA(), kTRUE);
      fdtubeprofile_class::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void brtubeprofile_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class brtubeprofile_class.
      TClass *R__cl = ::brtubeprofile_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      fdtubeprofile_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_brtubeprofile_class(void *p) {
      return  p ? new(p) ::brtubeprofile_class : new ::brtubeprofile_class;
   }
   static void *newArray_brtubeprofile_class(Long_t nElements, void *p) {
      return p ? new(p) ::brtubeprofile_class[nElements] : new ::brtubeprofile_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_brtubeprofile_class(void *p) {
      delete ((::brtubeprofile_class*)p);
   }
   static void deleteArray_brtubeprofile_class(void *p) {
      delete [] ((::brtubeprofile_class*)p);
   }
   static void destruct_brtubeprofile_class(void *p) {
      typedef ::brtubeprofile_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_brtubeprofile_class(TBuffer &buf, void *obj) {
      ((::brtubeprofile_class*)obj)->::brtubeprofile_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::brtubeprofile_class

//______________________________________________________________________________
void lrtubeprofile_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class lrtubeprofile_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      fdtubeprofile_class::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, lrtubeprofile_class::IsA());
   } else {
      R__c = R__b.WriteVersion(lrtubeprofile_class::IsA(), kTRUE);
      fdtubeprofile_class::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void lrtubeprofile_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class lrtubeprofile_class.
      TClass *R__cl = ::lrtubeprofile_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      fdtubeprofile_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_lrtubeprofile_class(void *p) {
      return  p ? new(p) ::lrtubeprofile_class : new ::lrtubeprofile_class;
   }
   static void *newArray_lrtubeprofile_class(Long_t nElements, void *p) {
      return p ? new(p) ::lrtubeprofile_class[nElements] : new ::lrtubeprofile_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_lrtubeprofile_class(void *p) {
      delete ((::lrtubeprofile_class*)p);
   }
   static void deleteArray_lrtubeprofile_class(void *p) {
      delete [] ((::lrtubeprofile_class*)p);
   }
   static void destruct_lrtubeprofile_class(void *p) {
      typedef ::lrtubeprofile_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_lrtubeprofile_class(TBuffer &buf, void *obj) {
      ((::lrtubeprofile_class*)obj)->::lrtubeprofile_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::lrtubeprofile_class

//______________________________________________________________________________
void hbar_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class hbar_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> jday;
      R__b >> jsec;
      R__b >> msec;
      R__b >> source;
      R__b >> nmir;
      R__b >> ntube;
      {
         vector<Double_t> &R__stl =  hnpe_jday;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mir;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  mir_reflect;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  tubemir;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  tube;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  qdcb;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  npe;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  sigma_npe;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Byte_t> &R__stl =  first_order_gain_flag;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned char R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  second_order_gain;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  second_order_gain_sigma;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Byte_t> &R__stl =  second_order_gain_flag;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned char R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  qe_337;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  sigma_qe_337;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  uv_exp;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, hbar_class::IsA());
   } else {
      R__c = R__b.WriteVersion(hbar_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << jday;
      R__b << jsec;
      R__b << msec;
      R__b << source;
      R__b << nmir;
      R__b << ntube;
      {
         vector<Double_t> &R__stl =  hnpe_jday;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mir;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  mir_reflect;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  tubemir;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  tube;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  qdcb;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  npe;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  sigma_npe;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Byte_t> &R__stl =  first_order_gain_flag;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Byte_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  second_order_gain;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  second_order_gain_sigma;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Byte_t> &R__stl =  second_order_gain_flag;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Byte_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  qe_337;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  sigma_qe_337;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  uv_exp;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void hbar_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class hbar_class.
      TClass *R__cl = ::hbar_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jday", &jday);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jsec", &jsec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "msec", &msec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "source", &source);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nmir", &nmir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntube", &ntube);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hnpe_jday", (void*)&hnpe_jday);
      R__insp.InspectMember("vector<Double_t>", (void*)&hnpe_jday, "hnpe_jday.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mir", (void*)&mir);
      R__insp.InspectMember("vector<Int_t>", (void*)&mir, "mir.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mir_reflect", (void*)&mir_reflect);
      R__insp.InspectMember("vector<Double_t>", (void*)&mir_reflect, "mir_reflect.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tubemir", (void*)&tubemir);
      R__insp.InspectMember("vector<Int_t>", (void*)&tubemir, "tubemir.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tube", (void*)&tube);
      R__insp.InspectMember("vector<Int_t>", (void*)&tube, "tube.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qdcb", (void*)&qdcb);
      R__insp.InspectMember("vector<Int_t>", (void*)&qdcb, "qdcb.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npe", (void*)&npe);
      R__insp.InspectMember("vector<Double_t>", (void*)&npe, "npe.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma_npe", (void*)&sigma_npe);
      R__insp.InspectMember("vector<Double_t>", (void*)&sigma_npe, "sigma_npe.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "first_order_gain_flag", (void*)&first_order_gain_flag);
      R__insp.InspectMember("vector<Byte_t>", (void*)&first_order_gain_flag, "first_order_gain_flag.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "second_order_gain", (void*)&second_order_gain);
      R__insp.InspectMember("vector<Double_t>", (void*)&second_order_gain, "second_order_gain.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "second_order_gain_sigma", (void*)&second_order_gain_sigma);
      R__insp.InspectMember("vector<Double_t>", (void*)&second_order_gain_sigma, "second_order_gain_sigma.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "second_order_gain_flag", (void*)&second_order_gain_flag);
      R__insp.InspectMember("vector<Byte_t>", (void*)&second_order_gain_flag, "second_order_gain_flag.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qe_337", (void*)&qe_337);
      R__insp.InspectMember("vector<Double_t>", (void*)&qe_337, "qe_337.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma_qe_337", (void*)&sigma_qe_337);
      R__insp.InspectMember("vector<Double_t>", (void*)&sigma_qe_337, "sigma_qe_337.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "uv_exp", (void*)&uv_exp);
      R__insp.InspectMember("vector<Double_t>", (void*)&uv_exp, "uv_exp.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_hbar_class(void *p) {
      return  p ? new(p) ::hbar_class : new ::hbar_class;
   }
   static void *newArray_hbar_class(Long_t nElements, void *p) {
      return p ? new(p) ::hbar_class[nElements] : new ::hbar_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_hbar_class(void *p) {
      delete ((::hbar_class*)p);
   }
   static void deleteArray_hbar_class(void *p) {
      delete [] ((::hbar_class*)p);
   }
   static void destruct_hbar_class(void *p) {
      typedef ::hbar_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_hbar_class(TBuffer &buf, void *obj) {
      ((::hbar_class*)obj)->::hbar_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::hbar_class

//______________________________________________________________________________
void hraw1_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class hraw1_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> jday;
      R__b >> jsec;
      R__b >> msec;
      R__b >> status;
      R__b >> nmir;
      R__b >> ntube;
      {
         vector<Int_t> &R__stl =  mir;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mir_rev;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mirevtno;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mirntube;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  miraccuracy_ns;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mirtime_ns;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  tubemir;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  tube;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  qdca;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  qdcb;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  tdc;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  tha;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  thb;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  prxf;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  thcal1;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, hraw1_class::IsA());
   } else {
      R__c = R__b.WriteVersion(hraw1_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << jday;
      R__b << jsec;
      R__b << msec;
      R__b << status;
      R__b << nmir;
      R__b << ntube;
      {
         vector<Int_t> &R__stl =  mir;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mir_rev;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mirevtno;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mirntube;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  miraccuracy_ns;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mirtime_ns;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  tubemir;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  tube;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  qdca;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  qdcb;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  tdc;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  tha;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  thb;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  prxf;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  thcal1;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void hraw1_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class hraw1_class.
      TClass *R__cl = ::hraw1_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jday", &jday);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jsec", &jsec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "msec", &msec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nmir", &nmir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntube", &ntube);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mir", (void*)&mir);
      R__insp.InspectMember("vector<Int_t>", (void*)&mir, "mir.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mir_rev", (void*)&mir_rev);
      R__insp.InspectMember("vector<Int_t>", (void*)&mir_rev, "mir_rev.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mirevtno", (void*)&mirevtno);
      R__insp.InspectMember("vector<Int_t>", (void*)&mirevtno, "mirevtno.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mirntube", (void*)&mirntube);
      R__insp.InspectMember("vector<Int_t>", (void*)&mirntube, "mirntube.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "miraccuracy_ns", (void*)&miraccuracy_ns);
      R__insp.InspectMember("vector<Int_t>", (void*)&miraccuracy_ns, "miraccuracy_ns.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mirtime_ns", (void*)&mirtime_ns);
      R__insp.InspectMember("vector<Int_t>", (void*)&mirtime_ns, "mirtime_ns.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tubemir", (void*)&tubemir);
      R__insp.InspectMember("vector<Int_t>", (void*)&tubemir, "tubemir.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tube", (void*)&tube);
      R__insp.InspectMember("vector<Int_t>", (void*)&tube, "tube.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qdca", (void*)&qdca);
      R__insp.InspectMember("vector<Int_t>", (void*)&qdca, "qdca.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qdcb", (void*)&qdcb);
      R__insp.InspectMember("vector<Int_t>", (void*)&qdcb, "qdcb.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdc", (void*)&tdc);
      R__insp.InspectMember("vector<Int_t>", (void*)&tdc, "tdc.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tha", (void*)&tha);
      R__insp.InspectMember("vector<Int_t>", (void*)&tha, "tha.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thb", (void*)&thb);
      R__insp.InspectMember("vector<Int_t>", (void*)&thb, "thb.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "prxf", (void*)&prxf);
      R__insp.InspectMember("vector<Float_t>", (void*)&prxf, "prxf.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thcal1", (void*)&thcal1);
      R__insp.InspectMember("vector<Float_t>", (void*)&thcal1, "thcal1.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_hraw1_class(void *p) {
      return  p ? new(p) ::hraw1_class : new ::hraw1_class;
   }
   static void *newArray_hraw1_class(Long_t nElements, void *p) {
      return p ? new(p) ::hraw1_class[nElements] : new ::hraw1_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_hraw1_class(void *p) {
      delete ((::hraw1_class*)p);
   }
   static void deleteArray_hraw1_class(void *p) {
      delete [] ((::hraw1_class*)p);
   }
   static void destruct_hraw1_class(void *p) {
      typedef ::hraw1_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_hraw1_class(TBuffer &buf, void *obj) {
      ((::hraw1_class*)obj)->::hraw1_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::hraw1_class

//______________________________________________________________________________
void mc04_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class mc04_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> energy;
      R__b >> csmax;
      R__b >> x0;
      R__b >> x1;
      R__b >> xmax;
      R__b >> lambda;
      R__b >> xfin;
      R__b.ReadStaticArray((double*)rini);
      R__b.ReadStaticArray((double*)rfin);
      R__b.ReadStaticArray((double*)uthat);
      R__b >> theta;
      R__b.ReadStaticArray((double*)Rpvec);
      R__b.ReadStaticArray((double*)Rcore);
      R__b >> Rp;
      {
         vector<vector<Double_t> > &R__stl =  rsite;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("rsite streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  rpvec;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("rpvec streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  rcore;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("rcore streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  shwn;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("shwn streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  rp;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  psi;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> aero_vod;
      R__b >> aero_hal;
      R__b >> aero_vsh;
      R__b >> aero_mlh;
      R__b.ReadStaticArray((double*)la_site);
      R__b >> la_wavlen;
      R__b >> fl_totpho;
      R__b >> fl_twidth;
      R__b >> iprim;
      R__b >> eventNr;
      R__b >> setNr;
      R__b >> iseed1;
      R__b >> iseed2;
      R__b >> detid;
      R__b >> maxeye;
      {
         vector<Int_t> &R__stl =  if_eye;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> neye;
      R__b >> nmir;
      R__b >> ntube;
      {
         vector<Int_t> &R__stl =  eyeid;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  eye_nmir;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  eye_ntube;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mirid;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mir_eye;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  thresh;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  tubeid;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  tube_mir;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  tube_eye;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  pe;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  triggered;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  t_tmean;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  t_trms;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  t_tmin;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  t_tmax;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, mc04_class::IsA());
   } else {
      R__c = R__b.WriteVersion(mc04_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << energy;
      R__b << csmax;
      R__b << x0;
      R__b << x1;
      R__b << xmax;
      R__b << lambda;
      R__b << xfin;
      R__b.WriteArray(rini, 3);
      R__b.WriteArray(rfin, 3);
      R__b.WriteArray(uthat, 3);
      R__b << theta;
      R__b.WriteArray(Rpvec, 3);
      R__b.WriteArray(Rcore, 3);
      R__b << Rp;
      {
         vector<vector<Double_t> > &R__stl =  rsite;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("rsite streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  rpvec;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("rpvec streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  rcore;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("rcore streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  shwn;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("shwn streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  rp;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  psi;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << aero_vod;
      R__b << aero_hal;
      R__b << aero_vsh;
      R__b << aero_mlh;
      R__b.WriteArray(la_site, 3);
      R__b << la_wavlen;
      R__b << fl_totpho;
      R__b << fl_twidth;
      R__b << iprim;
      R__b << eventNr;
      R__b << setNr;
      R__b << iseed1;
      R__b << iseed2;
      R__b << detid;
      R__b << maxeye;
      {
         vector<Int_t> &R__stl =  if_eye;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << neye;
      R__b << nmir;
      R__b << ntube;
      {
         vector<Int_t> &R__stl =  eyeid;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  eye_nmir;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  eye_ntube;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mirid;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mir_eye;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  thresh;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  tubeid;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  tube_mir;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  tube_eye;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  pe;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  triggered;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  t_tmean;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  t_trms;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  t_tmin;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  t_tmax;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void mc04_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class mc04_class.
      TClass *R__cl = ::mc04_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "csmax", &csmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x0", &x0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x1", &x1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xmax", &xmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lambda", &lambda);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xfin", &xfin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rini[3]", rini);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rfin[3]", rfin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "uthat[3]", uthat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Rpvec[3]", Rpvec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Rcore[3]", Rcore);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Rp", &Rp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rsite", (void*)&rsite);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&rsite, "rsite.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpvec", (void*)&rpvec);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&rpvec, "rpvec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rcore", (void*)&rcore);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&rcore, "rcore.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shwn", (void*)&shwn);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&shwn, "shwn.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rp", (void*)&rp);
      R__insp.InspectMember("vector<Double_t>", (void*)&rp, "rp.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "psi", (void*)&psi);
      R__insp.InspectMember("vector<Double_t>", (void*)&psi, "psi.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aero_vod", &aero_vod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aero_hal", &aero_hal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aero_vsh", &aero_vsh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aero_mlh", &aero_mlh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "la_site[3]", la_site);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "la_wavlen", &la_wavlen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fl_totpho", &fl_totpho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fl_twidth", &fl_twidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iprim", &iprim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventNr", &eventNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "setNr", &setNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iseed1", &iseed1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iseed2", &iseed2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detid", &detid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxeye", &maxeye);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "if_eye", (void*)&if_eye);
      R__insp.InspectMember("vector<Int_t>", (void*)&if_eye, "if_eye.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "neye", &neye);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nmir", &nmir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntube", &ntube);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eyeid", (void*)&eyeid);
      R__insp.InspectMember("vector<Int_t>", (void*)&eyeid, "eyeid.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eye_nmir", (void*)&eye_nmir);
      R__insp.InspectMember("vector<Int_t>", (void*)&eye_nmir, "eye_nmir.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eye_ntube", (void*)&eye_ntube);
      R__insp.InspectMember("vector<Int_t>", (void*)&eye_ntube, "eye_ntube.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mirid", (void*)&mirid);
      R__insp.InspectMember("vector<Int_t>", (void*)&mirid, "mirid.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mir_eye", (void*)&mir_eye);
      R__insp.InspectMember("vector<Int_t>", (void*)&mir_eye, "mir_eye.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thresh", (void*)&thresh);
      R__insp.InspectMember("vector<Int_t>", (void*)&thresh, "thresh.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tubeid", (void*)&tubeid);
      R__insp.InspectMember("vector<Int_t>", (void*)&tubeid, "tubeid.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tube_mir", (void*)&tube_mir);
      R__insp.InspectMember("vector<Int_t>", (void*)&tube_mir, "tube_mir.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tube_eye", (void*)&tube_eye);
      R__insp.InspectMember("vector<Int_t>", (void*)&tube_eye, "tube_eye.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pe", (void*)&pe);
      R__insp.InspectMember("vector<Int_t>", (void*)&pe, "pe.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "triggered", (void*)&triggered);
      R__insp.InspectMember("vector<Int_t>", (void*)&triggered, "triggered.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_tmean", (void*)&t_tmean);
      R__insp.InspectMember("vector<Float_t>", (void*)&t_tmean, "t_tmean.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_trms", (void*)&t_trms);
      R__insp.InspectMember("vector<Float_t>", (void*)&t_trms, "t_trms.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_tmin", (void*)&t_tmin);
      R__insp.InspectMember("vector<Float_t>", (void*)&t_tmin, "t_tmin.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_tmax", (void*)&t_tmax);
      R__insp.InspectMember("vector<Float_t>", (void*)&t_tmax, "t_tmax.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_mc04_class(void *p) {
      return  p ? new(p) ::mc04_class : new ::mc04_class;
   }
   static void *newArray_mc04_class(Long_t nElements, void *p) {
      return p ? new(p) ::mc04_class[nElements] : new ::mc04_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_mc04_class(void *p) {
      delete ((::mc04_class*)p);
   }
   static void deleteArray_mc04_class(void *p) {
      delete [] ((::mc04_class*)p);
   }
   static void destruct_mc04_class(void *p) {
      typedef ::mc04_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_mc04_class(TBuffer &buf, void *obj) {
      ((::mc04_class*)obj)->::mc04_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::mc04_class

//______________________________________________________________________________
void mcraw_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class mcraw_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> jday;
      R__b >> jsec;
      R__b >> msec;
      R__b >> neye;
      R__b >> nmir;
      R__b >> ntube;
      {
         vector<Int_t> &R__stl =  eyeid;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mirid;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mir_eye;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mir_rev;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mirevtno;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mir_ntube;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mirtime_ns;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  tube_eye;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  tube_mir;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  tubeid;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  qdca;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  qdcb;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  tdc;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  tha;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  thb;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  prxf;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  thcal1;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, mcraw_class::IsA());
   } else {
      R__c = R__b.WriteVersion(mcraw_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << jday;
      R__b << jsec;
      R__b << msec;
      R__b << neye;
      R__b << nmir;
      R__b << ntube;
      {
         vector<Int_t> &R__stl =  eyeid;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mirid;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mir_eye;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mir_rev;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mirevtno;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mir_ntube;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mirtime_ns;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  tube_eye;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  tube_mir;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  tubeid;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  qdca;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  qdcb;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  tdc;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  tha;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  thb;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  prxf;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  thcal1;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void mcraw_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class mcraw_class.
      TClass *R__cl = ::mcraw_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jday", &jday);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jsec", &jsec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "msec", &msec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "neye", &neye);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nmir", &nmir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntube", &ntube);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eyeid", (void*)&eyeid);
      R__insp.InspectMember("vector<Int_t>", (void*)&eyeid, "eyeid.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mirid", (void*)&mirid);
      R__insp.InspectMember("vector<Int_t>", (void*)&mirid, "mirid.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mir_eye", (void*)&mir_eye);
      R__insp.InspectMember("vector<Int_t>", (void*)&mir_eye, "mir_eye.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mir_rev", (void*)&mir_rev);
      R__insp.InspectMember("vector<Int_t>", (void*)&mir_rev, "mir_rev.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mirevtno", (void*)&mirevtno);
      R__insp.InspectMember("vector<Int_t>", (void*)&mirevtno, "mirevtno.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mir_ntube", (void*)&mir_ntube);
      R__insp.InspectMember("vector<Int_t>", (void*)&mir_ntube, "mir_ntube.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mirtime_ns", (void*)&mirtime_ns);
      R__insp.InspectMember("vector<Int_t>", (void*)&mirtime_ns, "mirtime_ns.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tube_eye", (void*)&tube_eye);
      R__insp.InspectMember("vector<Int_t>", (void*)&tube_eye, "tube_eye.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tube_mir", (void*)&tube_mir);
      R__insp.InspectMember("vector<Int_t>", (void*)&tube_mir, "tube_mir.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tubeid", (void*)&tubeid);
      R__insp.InspectMember("vector<Int_t>", (void*)&tubeid, "tubeid.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qdca", (void*)&qdca);
      R__insp.InspectMember("vector<Int_t>", (void*)&qdca, "qdca.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qdcb", (void*)&qdcb);
      R__insp.InspectMember("vector<Int_t>", (void*)&qdcb, "qdcb.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdc", (void*)&tdc);
      R__insp.InspectMember("vector<Int_t>", (void*)&tdc, "tdc.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tha", (void*)&tha);
      R__insp.InspectMember("vector<Int_t>", (void*)&tha, "tha.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thb", (void*)&thb);
      R__insp.InspectMember("vector<Int_t>", (void*)&thb, "thb.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "prxf", (void*)&prxf);
      R__insp.InspectMember("vector<Float_t>", (void*)&prxf, "prxf.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thcal1", (void*)&thcal1);
      R__insp.InspectMember("vector<Float_t>", (void*)&thcal1, "thcal1.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_mcraw_class(void *p) {
      return  p ? new(p) ::mcraw_class : new ::mcraw_class;
   }
   static void *newArray_mcraw_class(Long_t nElements, void *p) {
      return p ? new(p) ::mcraw_class[nElements] : new ::mcraw_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_mcraw_class(void *p) {
      delete ((::mcraw_class*)p);
   }
   static void deleteArray_mcraw_class(void *p) {
      delete [] ((::mcraw_class*)p);
   }
   static void destruct_mcraw_class(void *p) {
      typedef ::mcraw_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_mcraw_class(TBuffer &buf, void *obj) {
      ((::mcraw_class*)obj)->::mcraw_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::mcraw_class

//______________________________________________________________________________
void stps2_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class stps2_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> maxeye;
      {
         vector<Float_t> &R__stl =  plog;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  rvec;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  rwalk;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  ang;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  aveTime;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  sigmaTime;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  avePhot;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  sigmaPhot;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  lifetime;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  totalLifetime;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  inTimeTubes;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  if_eye;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Char_t> &R__stl =  upward;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            char R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, stps2_class::IsA());
   } else {
      R__c = R__b.WriteVersion(stps2_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << maxeye;
      {
         vector<Float_t> &R__stl =  plog;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  rvec;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  rwalk;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  ang;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  aveTime;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  sigmaTime;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  avePhot;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  sigmaPhot;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  lifetime;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  totalLifetime;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  inTimeTubes;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  if_eye;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Char_t> &R__stl =  upward;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Char_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void stps2_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class stps2_class.
      TClass *R__cl = ::stps2_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxeye", &maxeye);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "plog", (void*)&plog);
      R__insp.InspectMember("vector<Float_t>", (void*)&plog, "plog.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rvec", (void*)&rvec);
      R__insp.InspectMember("vector<Float_t>", (void*)&rvec, "rvec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rwalk", (void*)&rwalk);
      R__insp.InspectMember("vector<Float_t>", (void*)&rwalk, "rwalk.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ang", (void*)&ang);
      R__insp.InspectMember("vector<Float_t>", (void*)&ang, "ang.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aveTime", (void*)&aveTime);
      R__insp.InspectMember("vector<Float_t>", (void*)&aveTime, "aveTime.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaTime", (void*)&sigmaTime);
      R__insp.InspectMember("vector<Float_t>", (void*)&sigmaTime, "sigmaTime.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "avePhot", (void*)&avePhot);
      R__insp.InspectMember("vector<Float_t>", (void*)&avePhot, "avePhot.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaPhot", (void*)&sigmaPhot);
      R__insp.InspectMember("vector<Float_t>", (void*)&sigmaPhot, "sigmaPhot.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lifetime", (void*)&lifetime);
      R__insp.InspectMember("vector<Float_t>", (void*)&lifetime, "lifetime.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "totalLifetime", (void*)&totalLifetime);
      R__insp.InspectMember("vector<Float_t>", (void*)&totalLifetime, "totalLifetime.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "inTimeTubes", (void*)&inTimeTubes);
      R__insp.InspectMember("vector<Int_t>", (void*)&inTimeTubes, "inTimeTubes.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "if_eye", (void*)&if_eye);
      R__insp.InspectMember("vector<Int_t>", (void*)&if_eye, "if_eye.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "upward", (void*)&upward);
      R__insp.InspectMember("vector<Char_t>", (void*)&upward, "upward.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_stps2_class(void *p) {
      return  p ? new(p) ::stps2_class : new ::stps2_class;
   }
   static void *newArray_stps2_class(Long_t nElements, void *p) {
      return p ? new(p) ::stps2_class[nElements] : new ::stps2_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_stps2_class(void *p) {
      delete ((::stps2_class*)p);
   }
   static void deleteArray_stps2_class(void *p) {
      delete [] ((::stps2_class*)p);
   }
   static void destruct_stps2_class(void *p) {
      typedef ::stps2_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_stps2_class(TBuffer &buf, void *obj) {
      ((::stps2_class*)obj)->::stps2_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::stps2_class

//______________________________________________________________________________
void stpln_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class stpln_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> jday;
      R__b >> jsec;
      R__b >> msec;
      R__b >> neye;
      R__b >> nmir;
      R__b >> ntube;
      R__b >> maxeye;
      {
         vector<Int_t> &R__stl =  if_eye;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  eyeid;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  eye_nmir;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  eye_ngmir;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  eye_ntube;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  eye_ngtube;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Float_t> > &R__stl =  n_ampwt;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<float,allocator<float> >));
         if (R__tcl1==0) {
            Error("n_ampwt streamer","Missing the TClass object for vector<float,allocator<float> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<float,allocator<float> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Float_t> > &R__stl =  errn_ampwt;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<float,allocator<float> >));
         if (R__tcl1==0) {
            Error("errn_ampwt streamer","Missing the TClass object for vector<float,allocator<float> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<float,allocator<float> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  rmsdevpln;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  rmsdevtim;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  tracklength;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  crossingtime;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  ph_per_gtube;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mirid;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mir_eye;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mir_type;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mir_ngtube;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mirtime_ns;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  ig;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  tube_eye;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  saturated;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mir_tube_id;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, stpln_class::IsA());
   } else {
      R__c = R__b.WriteVersion(stpln_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << jday;
      R__b << jsec;
      R__b << msec;
      R__b << neye;
      R__b << nmir;
      R__b << ntube;
      R__b << maxeye;
      {
         vector<Int_t> &R__stl =  if_eye;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  eyeid;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  eye_nmir;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  eye_ngmir;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  eye_ntube;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  eye_ngtube;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<vector<Float_t> > &R__stl =  n_ampwt;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<float,allocator<float> >));
         if (R__tcl1==0) {
            Error("n_ampwt streamer","Missing the TClass object for vector<float,allocator<float> >!");
            return;
         }
            vector<vector<Float_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<float,allocator<float> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Float_t> > &R__stl =  errn_ampwt;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<float,allocator<float> >));
         if (R__tcl1==0) {
            Error("errn_ampwt streamer","Missing the TClass object for vector<float,allocator<float> >!");
            return;
         }
            vector<vector<Float_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<float,allocator<float> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  rmsdevpln;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  rmsdevtim;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  tracklength;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  crossingtime;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  ph_per_gtube;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mirid;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mir_eye;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mir_type;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mir_ngtube;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mirtime_ns;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  ig;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  tube_eye;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  saturated;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mir_tube_id;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void stpln_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class stpln_class.
      TClass *R__cl = ::stpln_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jday", &jday);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jsec", &jsec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "msec", &msec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "neye", &neye);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nmir", &nmir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntube", &ntube);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxeye", &maxeye);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "if_eye", (void*)&if_eye);
      R__insp.InspectMember("vector<Int_t>", (void*)&if_eye, "if_eye.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eyeid", (void*)&eyeid);
      R__insp.InspectMember("vector<Int_t>", (void*)&eyeid, "eyeid.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eye_nmir", (void*)&eye_nmir);
      R__insp.InspectMember("vector<Int_t>", (void*)&eye_nmir, "eye_nmir.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eye_ngmir", (void*)&eye_ngmir);
      R__insp.InspectMember("vector<Int_t>", (void*)&eye_ngmir, "eye_ngmir.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eye_ntube", (void*)&eye_ntube);
      R__insp.InspectMember("vector<Int_t>", (void*)&eye_ntube, "eye_ntube.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eye_ngtube", (void*)&eye_ngtube);
      R__insp.InspectMember("vector<Int_t>", (void*)&eye_ngtube, "eye_ngtube.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n_ampwt", (void*)&n_ampwt);
      R__insp.InspectMember("vector<vector<Float_t> >", (void*)&n_ampwt, "n_ampwt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errn_ampwt", (void*)&errn_ampwt);
      R__insp.InspectMember("vector<vector<Float_t> >", (void*)&errn_ampwt, "errn_ampwt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rmsdevpln", (void*)&rmsdevpln);
      R__insp.InspectMember("vector<Float_t>", (void*)&rmsdevpln, "rmsdevpln.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rmsdevtim", (void*)&rmsdevtim);
      R__insp.InspectMember("vector<Float_t>", (void*)&rmsdevtim, "rmsdevtim.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tracklength", (void*)&tracklength);
      R__insp.InspectMember("vector<Float_t>", (void*)&tracklength, "tracklength.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crossingtime", (void*)&crossingtime);
      R__insp.InspectMember("vector<Float_t>", (void*)&crossingtime, "crossingtime.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ph_per_gtube", (void*)&ph_per_gtube);
      R__insp.InspectMember("vector<Float_t>", (void*)&ph_per_gtube, "ph_per_gtube.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mirid", (void*)&mirid);
      R__insp.InspectMember("vector<Int_t>", (void*)&mirid, "mirid.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mir_eye", (void*)&mir_eye);
      R__insp.InspectMember("vector<Int_t>", (void*)&mir_eye, "mir_eye.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mir_type", (void*)&mir_type);
      R__insp.InspectMember("vector<Int_t>", (void*)&mir_type, "mir_type.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mir_ngtube", (void*)&mir_ngtube);
      R__insp.InspectMember("vector<Int_t>", (void*)&mir_ngtube, "mir_ngtube.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mirtime_ns", (void*)&mirtime_ns);
      R__insp.InspectMember("vector<Int_t>", (void*)&mirtime_ns, "mirtime_ns.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ig", (void*)&ig);
      R__insp.InspectMember("vector<Int_t>", (void*)&ig, "ig.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tube_eye", (void*)&tube_eye);
      R__insp.InspectMember("vector<Int_t>", (void*)&tube_eye, "tube_eye.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "saturated", (void*)&saturated);
      R__insp.InspectMember("vector<Int_t>", (void*)&saturated, "saturated.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mir_tube_id", (void*)&mir_tube_id);
      R__insp.InspectMember("vector<Int_t>", (void*)&mir_tube_id, "mir_tube_id.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_stpln_class(void *p) {
      return  p ? new(p) ::stpln_class : new ::stpln_class;
   }
   static void *newArray_stpln_class(Long_t nElements, void *p) {
      return p ? new(p) ::stpln_class[nElements] : new ::stpln_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_stpln_class(void *p) {
      delete ((::stpln_class*)p);
   }
   static void deleteArray_stpln_class(void *p) {
      delete [] ((::stpln_class*)p);
   }
   static void destruct_stpln_class(void *p) {
      typedef ::stpln_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_stpln_class(TBuffer &buf, void *obj) {
      ((::stpln_class*)obj)->::stpln_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::stpln_class

//______________________________________________________________________________
void hctim_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class hctim_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      {
         vector<Double_t> &R__stl =  mchi2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  rchi2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  lchi2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  mrp;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  rrp;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  lrp;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  mpsi;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  rpsi;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  lpsi;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  mthe;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  rthe;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  lthe;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  mphi;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  rphi;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  lphi;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  failmode;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  timinfo;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  jday;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  jsec;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  msec;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  ntube;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  nmir;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  mtkv;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("mtkv streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  rtkv;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("rtkv streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ltkv;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ltkv streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  mrpv;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("mrpv streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  rrpv;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("rrpv streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  lrpv;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("lrpv streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  mrpuv;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("mrpuv streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  rrpuv;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("rrpuv streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  lrpuv;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("lrpuv streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  mshwn;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("mshwn streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  rshwn;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("rshwn streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  lshwn;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("lshwn streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  mcore;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("mcore streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  rcore;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("rcore streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  lcore;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("lcore streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  tubemir;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("tubemir streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  tube;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("tube streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  ig;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("ig streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  time;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("time streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  timefit;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("timefit streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  thetb;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("thetb streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  sgmt;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("sgmt streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  asx;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("asx streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  asy;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("asy streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  asz;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("asz streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  mir;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("mir streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  mirntube;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("mirntube streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, hctim_class::IsA());
   } else {
      R__c = R__b.WriteVersion(hctim_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      {
         vector<Double_t> &R__stl =  mchi2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  rchi2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  lchi2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  mrp;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  rrp;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  lrp;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  mpsi;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  rpsi;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  lpsi;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  mthe;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  rthe;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  lthe;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  mphi;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  rphi;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  lphi;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  failmode;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  timinfo;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  jday;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  jsec;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  msec;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  ntube;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  nmir;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  mtkv;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("mtkv streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  rtkv;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("rtkv streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  ltkv;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("ltkv streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  mrpv;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("mrpv streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  rrpv;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("rrpv streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  lrpv;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("lrpv streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  mrpuv;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("mrpuv streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  rrpuv;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("rrpuv streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  lrpuv;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("lrpuv streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  mshwn;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("mshwn streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  rshwn;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("rshwn streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  lshwn;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("lshwn streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  mcore;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("mcore streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  rcore;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("rcore streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  lcore;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("lcore streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  tubemir;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("tubemir streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  tube;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("tube streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  ig;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("ig streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  time;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("time streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  timefit;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("timefit streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  thetb;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("thetb streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  sgmt;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("sgmt streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  asx;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("asx streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  asy;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("asy streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  asz;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("asz streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  mir;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("mir streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  mirntube;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("mirntube streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void hctim_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class hctim_class.
      TClass *R__cl = ::hctim_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mchi2", (void*)&mchi2);
      R__insp.InspectMember("vector<Double_t>", (void*)&mchi2, "mchi2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rchi2", (void*)&rchi2);
      R__insp.InspectMember("vector<Double_t>", (void*)&rchi2, "rchi2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lchi2", (void*)&lchi2);
      R__insp.InspectMember("vector<Double_t>", (void*)&lchi2, "lchi2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mrp", (void*)&mrp);
      R__insp.InspectMember("vector<Double_t>", (void*)&mrp, "mrp.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rrp", (void*)&rrp);
      R__insp.InspectMember("vector<Double_t>", (void*)&rrp, "rrp.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lrp", (void*)&lrp);
      R__insp.InspectMember("vector<Double_t>", (void*)&lrp, "lrp.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mpsi", (void*)&mpsi);
      R__insp.InspectMember("vector<Double_t>", (void*)&mpsi, "mpsi.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpsi", (void*)&rpsi);
      R__insp.InspectMember("vector<Double_t>", (void*)&rpsi, "rpsi.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lpsi", (void*)&lpsi);
      R__insp.InspectMember("vector<Double_t>", (void*)&lpsi, "lpsi.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mthe", (void*)&mthe);
      R__insp.InspectMember("vector<Double_t>", (void*)&mthe, "mthe.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rthe", (void*)&rthe);
      R__insp.InspectMember("vector<Double_t>", (void*)&rthe, "rthe.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lthe", (void*)&lthe);
      R__insp.InspectMember("vector<Double_t>", (void*)&lthe, "lthe.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mphi", (void*)&mphi);
      R__insp.InspectMember("vector<Double_t>", (void*)&mphi, "mphi.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rphi", (void*)&rphi);
      R__insp.InspectMember("vector<Double_t>", (void*)&rphi, "rphi.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lphi", (void*)&lphi);
      R__insp.InspectMember("vector<Double_t>", (void*)&lphi, "lphi.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "failmode", (void*)&failmode);
      R__insp.InspectMember("vector<Int_t>", (void*)&failmode, "failmode.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timinfo", (void*)&timinfo);
      R__insp.InspectMember("vector<Int_t>", (void*)&timinfo, "timinfo.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jday", (void*)&jday);
      R__insp.InspectMember("vector<Int_t>", (void*)&jday, "jday.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jsec", (void*)&jsec);
      R__insp.InspectMember("vector<Int_t>", (void*)&jsec, "jsec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "msec", (void*)&msec);
      R__insp.InspectMember("vector<Int_t>", (void*)&msec, "msec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntube", (void*)&ntube);
      R__insp.InspectMember("vector<Int_t>", (void*)&ntube, "ntube.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nmir", (void*)&nmir);
      R__insp.InspectMember("vector<Int_t>", (void*)&nmir, "nmir.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mtkv", (void*)&mtkv);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&mtkv, "mtkv.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rtkv", (void*)&rtkv);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&rtkv, "rtkv.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ltkv", (void*)&ltkv);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&ltkv, "ltkv.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mrpv", (void*)&mrpv);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&mrpv, "mrpv.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rrpv", (void*)&rrpv);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&rrpv, "rrpv.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lrpv", (void*)&lrpv);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&lrpv, "lrpv.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mrpuv", (void*)&mrpuv);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&mrpuv, "mrpuv.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rrpuv", (void*)&rrpuv);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&rrpuv, "rrpuv.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lrpuv", (void*)&lrpuv);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&lrpuv, "lrpuv.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mshwn", (void*)&mshwn);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&mshwn, "mshwn.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rshwn", (void*)&rshwn);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&rshwn, "rshwn.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lshwn", (void*)&lshwn);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&lshwn, "lshwn.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mcore", (void*)&mcore);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&mcore, "mcore.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rcore", (void*)&rcore);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&rcore, "rcore.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lcore", (void*)&lcore);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&lcore, "lcore.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tubemir", (void*)&tubemir);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&tubemir, "tubemir.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tube", (void*)&tube);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&tube, "tube.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ig", (void*)&ig);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&ig, "ig.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", (void*)&time);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&time, "time.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timefit", (void*)&timefit);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&timefit, "timefit.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thetb", (void*)&thetb);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&thetb, "thetb.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sgmt", (void*)&sgmt);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&sgmt, "sgmt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "asx", (void*)&asx);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&asx, "asx.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "asy", (void*)&asy);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&asy, "asy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "asz", (void*)&asz);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&asz, "asz.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mir", (void*)&mir);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&mir, "mir.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mirntube", (void*)&mirntube);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&mirntube, "mirntube.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_hctim_class(void *p) {
      return  p ? new(p) ::hctim_class : new ::hctim_class;
   }
   static void *newArray_hctim_class(Long_t nElements, void *p) {
      return p ? new(p) ::hctim_class[nElements] : new ::hctim_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_hctim_class(void *p) {
      delete ((::hctim_class*)p);
   }
   static void deleteArray_hctim_class(void *p) {
      delete [] ((::hctim_class*)p);
   }
   static void destruct_hctim_class(void *p) {
      typedef ::hctim_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_hctim_class(TBuffer &buf, void *obj) {
      ((::hctim_class*)obj)->::hctim_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::hctim_class

//______________________________________________________________________________
void hcbin_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class hcbin_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      {
         vector<vector<Double_t> > &R__stl =  bvx;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("bvx streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  bvy;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("bvy streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  bvz;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("bvz streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  bsz;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("bsz streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  sig;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("sig streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  sigerr;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("sigerr streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  cfc;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("cfc streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  ig;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("ig streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  nbin;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  failmode;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  bininfo;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  jday;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  jsec;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  msec;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, hcbin_class::IsA());
   } else {
      R__c = R__b.WriteVersion(hcbin_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      {
         vector<vector<Double_t> > &R__stl =  bvx;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("bvx streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  bvy;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("bvy streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  bvz;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("bvz streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  bsz;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("bsz streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  sig;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("sig streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  sigerr;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("sigerr streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  cfc;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("cfc streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  ig;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("ig streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  nbin;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  failmode;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  bininfo;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  jday;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  jsec;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  msec;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void hcbin_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class hcbin_class.
      TClass *R__cl = ::hcbin_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bvx", (void*)&bvx);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&bvx, "bvx.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bvy", (void*)&bvy);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&bvy, "bvy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bvz", (void*)&bvz);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&bvz, "bvz.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bsz", (void*)&bsz);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&bsz, "bsz.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sig", (void*)&sig);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&sig, "sig.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigerr", (void*)&sigerr);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&sigerr, "sigerr.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cfc", (void*)&cfc);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&cfc, "cfc.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ig", (void*)&ig);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&ig, "ig.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nbin", (void*)&nbin);
      R__insp.InspectMember("vector<Int_t>", (void*)&nbin, "nbin.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "failmode", (void*)&failmode);
      R__insp.InspectMember("vector<Int_t>", (void*)&failmode, "failmode.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bininfo", (void*)&bininfo);
      R__insp.InspectMember("vector<Int_t>", (void*)&bininfo, "bininfo.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jday", (void*)&jday);
      R__insp.InspectMember("vector<Int_t>", (void*)&jday, "jday.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jsec", (void*)&jsec);
      R__insp.InspectMember("vector<Int_t>", (void*)&jsec, "jsec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "msec", (void*)&msec);
      R__insp.InspectMember("vector<Int_t>", (void*)&msec, "msec.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_hcbin_class(void *p) {
      return  p ? new(p) ::hcbin_class : new ::hcbin_class;
   }
   static void *newArray_hcbin_class(Long_t nElements, void *p) {
      return p ? new(p) ::hcbin_class[nElements] : new ::hcbin_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_hcbin_class(void *p) {
      delete ((::hcbin_class*)p);
   }
   static void deleteArray_hcbin_class(void *p) {
      delete [] ((::hcbin_class*)p);
   }
   static void destruct_hcbin_class(void *p) {
      typedef ::hcbin_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_hcbin_class(TBuffer &buf, void *obj) {
      ((::hcbin_class*)obj)->::hcbin_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::hcbin_class

//______________________________________________________________________________
void prfc_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class prfc_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      {
         vector<Double_t> &R__stl =  chi2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  szmx;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  dszmx;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  rszmx;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  lszmx;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  tszmx;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  xm;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  dxm;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  rxm;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  lxm;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  txm;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  x0;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  dx0;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  rx0;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  lx0;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  tx0;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  lambda;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  dlambda;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  rlambda;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  llambda;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  tlambda;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  eng;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  deng;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  reng;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  leng;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  teng;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  dep;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("dep streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  gm;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("gm streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  scin;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("scin streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  rayl;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("rayl streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  aero;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("aero streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  crnk;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("crnk streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  sigmc;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("sigmc streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  sig;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("sig streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  mxel;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("mxel streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  nel;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mor;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  ig;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("ig streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  pflinfo;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  bininfo;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  mtxinfo;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  failmode;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  nbin;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  traj_source;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  errstat;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  ndf;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, prfc_class::IsA());
   } else {
      R__c = R__b.WriteVersion(prfc_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      {
         vector<Double_t> &R__stl =  chi2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  szmx;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  dszmx;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  rszmx;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  lszmx;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  tszmx;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  xm;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  dxm;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  rxm;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  lxm;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  txm;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  x0;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  dx0;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  rx0;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  lx0;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  tx0;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  lambda;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  dlambda;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  rlambda;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  llambda;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  tlambda;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  eng;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  deng;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  reng;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  leng;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  teng;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  dep;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("dep streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  gm;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("gm streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  scin;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("scin streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  rayl;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("rayl streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  aero;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("aero streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  crnk;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("crnk streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  sigmc;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("sigmc streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  sig;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("sig streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<Double_t> > &R__stl =  mxel;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("mxel streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<Double_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  nel;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mor;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<vector<Int_t> > &R__stl =  ig;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("ig streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<Int_t> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  pflinfo;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  bininfo;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  mtxinfo;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  failmode;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  nbin;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  traj_source;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  errstat;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  ndf;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void prfc_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class prfc_class.
      TClass *R__cl = ::prfc_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", (void*)&chi2);
      R__insp.InspectMember("vector<Double_t>", (void*)&chi2, "chi2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "szmx", (void*)&szmx);
      R__insp.InspectMember("vector<Double_t>", (void*)&szmx, "szmx.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dszmx", (void*)&dszmx);
      R__insp.InspectMember("vector<Double_t>", (void*)&dszmx, "dszmx.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rszmx", (void*)&rszmx);
      R__insp.InspectMember("vector<Double_t>", (void*)&rszmx, "rszmx.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lszmx", (void*)&lszmx);
      R__insp.InspectMember("vector<Double_t>", (void*)&lszmx, "lszmx.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tszmx", (void*)&tszmx);
      R__insp.InspectMember("vector<Double_t>", (void*)&tszmx, "tszmx.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xm", (void*)&xm);
      R__insp.InspectMember("vector<Double_t>", (void*)&xm, "xm.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxm", (void*)&dxm);
      R__insp.InspectMember("vector<Double_t>", (void*)&dxm, "dxm.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rxm", (void*)&rxm);
      R__insp.InspectMember("vector<Double_t>", (void*)&rxm, "rxm.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lxm", (void*)&lxm);
      R__insp.InspectMember("vector<Double_t>", (void*)&lxm, "lxm.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "txm", (void*)&txm);
      R__insp.InspectMember("vector<Double_t>", (void*)&txm, "txm.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x0", (void*)&x0);
      R__insp.InspectMember("vector<Double_t>", (void*)&x0, "x0.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dx0", (void*)&dx0);
      R__insp.InspectMember("vector<Double_t>", (void*)&dx0, "dx0.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rx0", (void*)&rx0);
      R__insp.InspectMember("vector<Double_t>", (void*)&rx0, "rx0.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lx0", (void*)&lx0);
      R__insp.InspectMember("vector<Double_t>", (void*)&lx0, "lx0.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tx0", (void*)&tx0);
      R__insp.InspectMember("vector<Double_t>", (void*)&tx0, "tx0.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lambda", (void*)&lambda);
      R__insp.InspectMember("vector<Double_t>", (void*)&lambda, "lambda.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dlambda", (void*)&dlambda);
      R__insp.InspectMember("vector<Double_t>", (void*)&dlambda, "dlambda.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rlambda", (void*)&rlambda);
      R__insp.InspectMember("vector<Double_t>", (void*)&rlambda, "rlambda.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "llambda", (void*)&llambda);
      R__insp.InspectMember("vector<Double_t>", (void*)&llambda, "llambda.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tlambda", (void*)&tlambda);
      R__insp.InspectMember("vector<Double_t>", (void*)&tlambda, "tlambda.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eng", (void*)&eng);
      R__insp.InspectMember("vector<Double_t>", (void*)&eng, "eng.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deng", (void*)&deng);
      R__insp.InspectMember("vector<Double_t>", (void*)&deng, "deng.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reng", (void*)&reng);
      R__insp.InspectMember("vector<Double_t>", (void*)&reng, "reng.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leng", (void*)&leng);
      R__insp.InspectMember("vector<Double_t>", (void*)&leng, "leng.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "teng", (void*)&teng);
      R__insp.InspectMember("vector<Double_t>", (void*)&teng, "teng.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dep", (void*)&dep);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&dep, "dep.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gm", (void*)&gm);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&gm, "gm.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scin", (void*)&scin);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&scin, "scin.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rayl", (void*)&rayl);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&rayl, "rayl.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aero", (void*)&aero);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&aero, "aero.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crnk", (void*)&crnk);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&crnk, "crnk.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmc", (void*)&sigmc);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&sigmc, "sigmc.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sig", (void*)&sig);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&sig, "sig.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mxel", (void*)&mxel);
      R__insp.InspectMember("vector<vector<Double_t> >", (void*)&mxel, "mxel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nel", (void*)&nel);
      R__insp.InspectMember("vector<Int_t>", (void*)&nel, "nel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mor", (void*)&mor);
      R__insp.InspectMember("vector<Int_t>", (void*)&mor, "mor.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ig", (void*)&ig);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&ig, "ig.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pflinfo", (void*)&pflinfo);
      R__insp.InspectMember("vector<Int_t>", (void*)&pflinfo, "pflinfo.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bininfo", (void*)&bininfo);
      R__insp.InspectMember("vector<Int_t>", (void*)&bininfo, "bininfo.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mtxinfo", (void*)&mtxinfo);
      R__insp.InspectMember("vector<Int_t>", (void*)&mtxinfo, "mtxinfo.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "failmode", (void*)&failmode);
      R__insp.InspectMember("vector<Int_t>", (void*)&failmode, "failmode.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nbin", (void*)&nbin);
      R__insp.InspectMember("vector<Int_t>", (void*)&nbin, "nbin.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "traj_source", (void*)&traj_source);
      R__insp.InspectMember("vector<Int_t>", (void*)&traj_source, "traj_source.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errstat", (void*)&errstat);
      R__insp.InspectMember("vector<Int_t>", (void*)&errstat, "errstat.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndf", (void*)&ndf);
      R__insp.InspectMember("vector<Int_t>", (void*)&ndf, "ndf.", false);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_prfc_class(void *p) {
      return  p ? new(p) ::prfc_class : new ::prfc_class;
   }
   static void *newArray_prfc_class(Long_t nElements, void *p) {
      return p ? new(p) ::prfc_class[nElements] : new ::prfc_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_prfc_class(void *p) {
      delete ((::prfc_class*)p);
   }
   static void deleteArray_prfc_class(void *p) {
      delete [] ((::prfc_class*)p);
   }
   static void destruct_prfc_class(void *p) {
      typedef ::prfc_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_prfc_class(TBuffer &buf, void *obj) {
      ((::prfc_class*)obj)->::prfc_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::prfc_class

//______________________________________________________________________________
void fdatmos_param_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class fdatmos_param_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      dstbank_class::Streamer(R__b);
      R__b >> uniqID;
      R__b >> dateFrom;
      R__b >> dateTo;
      R__b >> nItem;
      {
         vector<Float_t> &R__stl =  height;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  pressure;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  pressureError;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  temperature;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  temperatureError;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  dewPoint;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  dewPointError;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> used_bankid;
      R__b.CheckByteCount(R__s, R__c, fdatmos_param_class::IsA());
   } else {
      R__c = R__b.WriteVersion(fdatmos_param_class::IsA(), kTRUE);
      dstbank_class::Streamer(R__b);
      R__b << uniqID;
      R__b << dateFrom;
      R__b << dateTo;
      R__b << nItem;
      {
         vector<Float_t> &R__stl =  height;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  pressure;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  pressureError;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  temperature;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  temperatureError;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  dewPoint;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  dewPointError;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << used_bankid;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void fdatmos_param_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class fdatmos_param_class.
      TClass *R__cl = ::fdatmos_param_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "uniqID", &uniqID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dateFrom", &dateFrom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dateTo", &dateTo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nItem", &nItem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "height", (void*)&height);
      R__insp.InspectMember("vector<Float_t>", (void*)&height, "height.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pressure", (void*)&pressure);
      R__insp.InspectMember("vector<Float_t>", (void*)&pressure, "pressure.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pressureError", (void*)&pressureError);
      R__insp.InspectMember("vector<Float_t>", (void*)&pressureError, "pressureError.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "temperature", (void*)&temperature);
      R__insp.InspectMember("vector<Float_t>", (void*)&temperature, "temperature.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "temperatureError", (void*)&temperatureError);
      R__insp.InspectMember("vector<Float_t>", (void*)&temperatureError, "temperatureError.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dewPoint", (void*)&dewPoint);
      R__insp.InspectMember("vector<Float_t>", (void*)&dewPoint, "dewPoint.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dewPointError", (void*)&dewPointError);
      R__insp.InspectMember("vector<Float_t>", (void*)&dewPointError, "dewPointError.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "used_bankid", &used_bankid);
      dstbank_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_fdatmos_param_class(void *p) {
      return  p ? new(p) ::fdatmos_param_class : new ::fdatmos_param_class;
   }
   static void *newArray_fdatmos_param_class(Long_t nElements, void *p) {
      return p ? new(p) ::fdatmos_param_class[nElements] : new ::fdatmos_param_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_fdatmos_param_class(void *p) {
      delete ((::fdatmos_param_class*)p);
   }
   static void deleteArray_fdatmos_param_class(void *p) {
      delete [] ((::fdatmos_param_class*)p);
   }
   static void destruct_fdatmos_param_class(void *p) {
      typedef ::fdatmos_param_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_fdatmos_param_class(TBuffer &buf, void *obj) {
      ((::fdatmos_param_class*)obj)->::fdatmos_param_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::fdatmos_param_class

//______________________________________________________________________________
void gdas_class::Streamer(TBuffer &R__b)
{
   // Stream an object of class gdas_class.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      fdatmos_param_class::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, gdas_class::IsA());
   } else {
      R__c = R__b.WriteVersion(gdas_class::IsA(), kTRUE);
      fdatmos_param_class::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void gdas_class::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class gdas_class.
      TClass *R__cl = ::gdas_class::IsA();
      if (R__cl || R__insp.IsA()) { }
      fdatmos_param_class::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_gdas_class(void *p) {
      return  p ? new(p) ::gdas_class : new ::gdas_class;
   }
   static void *newArray_gdas_class(Long_t nElements, void *p) {
      return p ? new(p) ::gdas_class[nElements] : new ::gdas_class[nElements];
   }
   // Wrapper around operator delete
   static void delete_gdas_class(void *p) {
      delete ((::gdas_class*)p);
   }
   static void deleteArray_gdas_class(void *p) {
      delete [] ((::gdas_class*)p);
   }
   static void destruct_gdas_class(void *p) {
      typedef ::gdas_class current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_gdas_class(TBuffer &buf, void *obj) {
      ((::gdas_class*)obj)->::gdas_class::Streamer(buf);
   }
} // end of namespace ROOT for class ::gdas_class

namespace ROOT {
   void vectorlESDCalibHostData_classgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESDCalibHostData_classgR_Dictionary();
   static void *new_vectorlESDCalibHostData_classgR(void *p = 0);
   static void *newArray_vectorlESDCalibHostData_classgR(Long_t size, void *p);
   static void delete_vectorlESDCalibHostData_classgR(void *p);
   static void deleteArray_vectorlESDCalibHostData_classgR(void *p);
   static void destruct_vectorlESDCalibHostData_classgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<SDCalibHostData_class>*)
   {
      vector<SDCalibHostData_class> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SDCalibHostData_class>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SDCalibHostData_class>", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<SDCalibHostData_class>), DefineBehavior(ptr, ptr),
                  0, &vectorlESDCalibHostData_classgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<SDCalibHostData_class>) );
      instance.SetNew(&new_vectorlESDCalibHostData_classgR);
      instance.SetNewArray(&newArray_vectorlESDCalibHostData_classgR);
      instance.SetDelete(&delete_vectorlESDCalibHostData_classgR);
      instance.SetDeleteArray(&deleteArray_vectorlESDCalibHostData_classgR);
      instance.SetDestructor(&destruct_vectorlESDCalibHostData_classgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<SDCalibHostData_class> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SDCalibHostData_class>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESDCalibHostData_classgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<SDCalibHostData_class>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESDCalibHostData_classgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SDCalibHostData_class> : new vector<SDCalibHostData_class>;
   }
   static void *newArray_vectorlESDCalibHostData_classgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SDCalibHostData_class>[nElements] : new vector<SDCalibHostData_class>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESDCalibHostData_classgR(void *p) {
      delete ((vector<SDCalibHostData_class>*)p);
   }
   static void deleteArray_vectorlESDCalibHostData_classgR(void *p) {
      delete [] ((vector<SDCalibHostData_class>*)p);
   }
   static void destruct_vectorlESDCalibHostData_classgR(void *p) {
      typedef vector<SDCalibHostData_class> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<SDCalibHostData_class>

namespace ROOT {
   void vectorlESDCalibSubData_classgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESDCalibSubData_classgR_Dictionary();
   static void *new_vectorlESDCalibSubData_classgR(void *p = 0);
   static void *newArray_vectorlESDCalibSubData_classgR(Long_t size, void *p);
   static void delete_vectorlESDCalibSubData_classgR(void *p);
   static void deleteArray_vectorlESDCalibSubData_classgR(void *p);
   static void destruct_vectorlESDCalibSubData_classgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<SDCalibSubData_class>*)
   {
      vector<SDCalibSubData_class> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SDCalibSubData_class>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SDCalibSubData_class>", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<SDCalibSubData_class>), DefineBehavior(ptr, ptr),
                  0, &vectorlESDCalibSubData_classgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<SDCalibSubData_class>) );
      instance.SetNew(&new_vectorlESDCalibSubData_classgR);
      instance.SetNewArray(&newArray_vectorlESDCalibSubData_classgR);
      instance.SetDelete(&delete_vectorlESDCalibSubData_classgR);
      instance.SetDeleteArray(&deleteArray_vectorlESDCalibSubData_classgR);
      instance.SetDestructor(&destruct_vectorlESDCalibSubData_classgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<SDCalibSubData_class> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SDCalibSubData_class>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESDCalibSubData_classgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<SDCalibSubData_class>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESDCalibSubData_classgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SDCalibSubData_class> : new vector<SDCalibSubData_class>;
   }
   static void *newArray_vectorlESDCalibSubData_classgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SDCalibSubData_class>[nElements] : new vector<SDCalibSubData_class>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESDCalibSubData_classgR(void *p) {
      delete ((vector<SDCalibSubData_class>*)p);
   }
   static void deleteArray_vectorlESDCalibSubData_classgR(void *p) {
      delete [] ((vector<SDCalibSubData_class>*)p);
   }
   static void destruct_vectorlESDCalibSubData_classgR(void *p) {
      typedef vector<SDCalibSubData_class> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<SDCalibSubData_class>

namespace ROOT {
   void vectorlESDCalibWeatherData_classgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESDCalibWeatherData_classgR_Dictionary();
   static void *new_vectorlESDCalibWeatherData_classgR(void *p = 0);
   static void *newArray_vectorlESDCalibWeatherData_classgR(Long_t size, void *p);
   static void delete_vectorlESDCalibWeatherData_classgR(void *p);
   static void deleteArray_vectorlESDCalibWeatherData_classgR(void *p);
   static void destruct_vectorlESDCalibWeatherData_classgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<SDCalibWeatherData_class>*)
   {
      vector<SDCalibWeatherData_class> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SDCalibWeatherData_class>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SDCalibWeatherData_class>", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<SDCalibWeatherData_class>), DefineBehavior(ptr, ptr),
                  0, &vectorlESDCalibWeatherData_classgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<SDCalibWeatherData_class>) );
      instance.SetNew(&new_vectorlESDCalibWeatherData_classgR);
      instance.SetNewArray(&newArray_vectorlESDCalibWeatherData_classgR);
      instance.SetDelete(&delete_vectorlESDCalibWeatherData_classgR);
      instance.SetDeleteArray(&deleteArray_vectorlESDCalibWeatherData_classgR);
      instance.SetDestructor(&destruct_vectorlESDCalibWeatherData_classgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<SDCalibWeatherData_class> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SDCalibWeatherData_class>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESDCalibWeatherData_classgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<SDCalibWeatherData_class>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESDCalibWeatherData_classgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SDCalibWeatherData_class> : new vector<SDCalibWeatherData_class>;
   }
   static void *newArray_vectorlESDCalibWeatherData_classgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SDCalibWeatherData_class>[nElements] : new vector<SDCalibWeatherData_class>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESDCalibWeatherData_classgR(void *p) {
      delete ((vector<SDCalibWeatherData_class>*)p);
   }
   static void deleteArray_vectorlESDCalibWeatherData_classgR(void *p) {
      delete [] ((vector<SDCalibWeatherData_class>*)p);
   }
   static void destruct_vectorlESDCalibWeatherData_classgR(void *p) {
      typedef vector<SDCalibWeatherData_class> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<SDCalibWeatherData_class>

namespace ROOT {
   void vectorlESDCalibevData_classgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESDCalibevData_classgR_Dictionary();
   static void *new_vectorlESDCalibevData_classgR(void *p = 0);
   static void *newArray_vectorlESDCalibevData_classgR(Long_t size, void *p);
   static void delete_vectorlESDCalibevData_classgR(void *p);
   static void deleteArray_vectorlESDCalibevData_classgR(void *p);
   static void destruct_vectorlESDCalibevData_classgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<SDCalibevData_class>*)
   {
      vector<SDCalibevData_class> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SDCalibevData_class>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SDCalibevData_class>", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<SDCalibevData_class>), DefineBehavior(ptr, ptr),
                  0, &vectorlESDCalibevData_classgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<SDCalibevData_class>) );
      instance.SetNew(&new_vectorlESDCalibevData_classgR);
      instance.SetNewArray(&newArray_vectorlESDCalibevData_classgR);
      instance.SetDelete(&delete_vectorlESDCalibevData_classgR);
      instance.SetDeleteArray(&deleteArray_vectorlESDCalibevData_classgR);
      instance.SetDestructor(&destruct_vectorlESDCalibevData_classgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<SDCalibevData_class> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SDCalibevData_class>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESDCalibevData_classgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<SDCalibevData_class>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESDCalibevData_classgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SDCalibevData_class> : new vector<SDCalibevData_class>;
   }
   static void *newArray_vectorlESDCalibevData_classgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SDCalibevData_class>[nElements] : new vector<SDCalibevData_class>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESDCalibevData_classgR(void *p) {
      delete ((vector<SDCalibevData_class>*)p);
   }
   static void deleteArray_vectorlESDCalibevData_classgR(void *p) {
      delete [] ((vector<SDCalibevData_class>*)p);
   }
   static void destruct_vectorlESDCalibevData_classgR(void *p) {
      typedef vector<SDCalibevData_class> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<SDCalibevData_class>

namespace ROOT {
   void vectorlESDCalibevWeatherData_classgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESDCalibevWeatherData_classgR_Dictionary();
   static void *new_vectorlESDCalibevWeatherData_classgR(void *p = 0);
   static void *newArray_vectorlESDCalibevWeatherData_classgR(Long_t size, void *p);
   static void delete_vectorlESDCalibevWeatherData_classgR(void *p);
   static void deleteArray_vectorlESDCalibevWeatherData_classgR(void *p);
   static void destruct_vectorlESDCalibevWeatherData_classgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<SDCalibevWeatherData_class>*)
   {
      vector<SDCalibevWeatherData_class> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SDCalibevWeatherData_class>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SDCalibevWeatherData_class>", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<SDCalibevWeatherData_class>), DefineBehavior(ptr, ptr),
                  0, &vectorlESDCalibevWeatherData_classgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<SDCalibevWeatherData_class>) );
      instance.SetNew(&new_vectorlESDCalibevWeatherData_classgR);
      instance.SetNewArray(&newArray_vectorlESDCalibevWeatherData_classgR);
      instance.SetDelete(&delete_vectorlESDCalibevWeatherData_classgR);
      instance.SetDeleteArray(&deleteArray_vectorlESDCalibevWeatherData_classgR);
      instance.SetDestructor(&destruct_vectorlESDCalibevWeatherData_classgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<SDCalibevWeatherData_class> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SDCalibevWeatherData_class>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESDCalibevWeatherData_classgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<SDCalibevWeatherData_class>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESDCalibevWeatherData_classgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SDCalibevWeatherData_class> : new vector<SDCalibevWeatherData_class>;
   }
   static void *newArray_vectorlESDCalibevWeatherData_classgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SDCalibevWeatherData_class>[nElements] : new vector<SDCalibevWeatherData_class>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESDCalibevWeatherData_classgR(void *p) {
      delete ((vector<SDCalibevWeatherData_class>*)p);
   }
   static void deleteArray_vectorlESDCalibevWeatherData_classgR(void *p) {
      delete [] ((vector<SDCalibevWeatherData_class>*)p);
   }
   static void destruct_vectorlESDCalibevWeatherData_classgR(void *p) {
      typedef vector<SDCalibevWeatherData_class> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<SDCalibevWeatherData_class>

namespace ROOT {
   void vectorlESDEventSubData_classgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESDEventSubData_classgR_Dictionary();
   static void *new_vectorlESDEventSubData_classgR(void *p = 0);
   static void *newArray_vectorlESDEventSubData_classgR(Long_t size, void *p);
   static void delete_vectorlESDEventSubData_classgR(void *p);
   static void deleteArray_vectorlESDEventSubData_classgR(void *p);
   static void destruct_vectorlESDEventSubData_classgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<SDEventSubData_class>*)
   {
      vector<SDEventSubData_class> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SDEventSubData_class>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SDEventSubData_class>", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<SDEventSubData_class>), DefineBehavior(ptr, ptr),
                  0, &vectorlESDEventSubData_classgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<SDEventSubData_class>) );
      instance.SetNew(&new_vectorlESDEventSubData_classgR);
      instance.SetNewArray(&newArray_vectorlESDEventSubData_classgR);
      instance.SetDelete(&delete_vectorlESDEventSubData_classgR);
      instance.SetDeleteArray(&deleteArray_vectorlESDEventSubData_classgR);
      instance.SetDestructor(&destruct_vectorlESDEventSubData_classgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<SDEventSubData_class> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SDEventSubData_class>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESDEventSubData_classgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<SDEventSubData_class>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESDEventSubData_classgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SDEventSubData_class> : new vector<SDEventSubData_class>;
   }
   static void *newArray_vectorlESDEventSubData_classgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SDEventSubData_class>[nElements] : new vector<SDEventSubData_class>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESDEventSubData_classgR(void *p) {
      delete ((vector<SDEventSubData_class>*)p);
   }
   static void deleteArray_vectorlESDEventSubData_classgR(void *p) {
      delete [] ((vector<SDEventSubData_class>*)p);
   }
   static void destruct_vectorlESDEventSubData_classgR(void *p) {
      typedef vector<SDEventSubData_class> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<SDEventSubData_class>

namespace ROOT {
   void vectorlEchargR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEchargR_Dictionary();
   static void *new_vectorlEchargR(void *p = 0);
   static void *newArray_vectorlEchargR(Long_t size, void *p);
   static void delete_vectorlEchargR(void *p);
   static void deleteArray_vectorlEchargR(void *p);
   static void destruct_vectorlEchargR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<char>*)
   {
      vector<char> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<char>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<char>", -2, "vector.dll", 0,
                  typeid(vector<char>), DefineBehavior(ptr, ptr),
                  0, &vectorlEchargR_Dictionary, isa_proxy, 0,
                  sizeof(vector<char>) );
      instance.SetNew(&new_vectorlEchargR);
      instance.SetNewArray(&newArray_vectorlEchargR);
      instance.SetDelete(&delete_vectorlEchargR);
      instance.SetDeleteArray(&deleteArray_vectorlEchargR);
      instance.SetDestructor(&destruct_vectorlEchargR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<char> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<char>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEchargR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<char>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEchargR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<char> : new vector<char>;
   }
   static void *newArray_vectorlEchargR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<char>[nElements] : new vector<char>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEchargR(void *p) {
      delete ((vector<char>*)p);
   }
   static void deleteArray_vectorlEchargR(void *p) {
      delete [] ((vector<char>*)p);
   }
   static void destruct_vectorlEchargR(void *p) {
      typedef vector<char> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<char>

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

namespace ROOT {
   void vectorlEshortgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEshortgR_Dictionary();
   static void *new_vectorlEshortgR(void *p = 0);
   static void *newArray_vectorlEshortgR(Long_t size, void *p);
   static void delete_vectorlEshortgR(void *p);
   static void deleteArray_vectorlEshortgR(void *p);
   static void destruct_vectorlEshortgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<short>*)
   {
      vector<short> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<short>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<short>", -2, "vector.dll", 0,
                  typeid(vector<short>), DefineBehavior(ptr, ptr),
                  0, &vectorlEshortgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<short>) );
      instance.SetNew(&new_vectorlEshortgR);
      instance.SetNewArray(&newArray_vectorlEshortgR);
      instance.SetDelete(&delete_vectorlEshortgR);
      instance.SetDeleteArray(&deleteArray_vectorlEshortgR);
      instance.SetDestructor(&destruct_vectorlEshortgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<short> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<short>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEshortgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<short>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEshortgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<short> : new vector<short>;
   }
   static void *newArray_vectorlEshortgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<short>[nElements] : new vector<short>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEshortgR(void *p) {
      delete ((vector<short>*)p);
   }
   static void deleteArray_vectorlEshortgR(void *p) {
      delete [] ((vector<short>*)p);
   }
   static void destruct_vectorlEshortgR(void *p) {
      typedef vector<short> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<short>

namespace ROOT {
   void vectorlEunsignedsPchargR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEunsignedsPchargR_Dictionary();
   static void *new_vectorlEunsignedsPchargR(void *p = 0);
   static void *newArray_vectorlEunsignedsPchargR(Long_t size, void *p);
   static void delete_vectorlEunsignedsPchargR(void *p);
   static void deleteArray_vectorlEunsignedsPchargR(void *p);
   static void destruct_vectorlEunsignedsPchargR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<unsigned char>*)
   {
      vector<unsigned char> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<unsigned char>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<unsigned char>", -2, "vector.dll", 0,
                  typeid(vector<unsigned char>), DefineBehavior(ptr, ptr),
                  0, &vectorlEunsignedsPchargR_Dictionary, isa_proxy, 0,
                  sizeof(vector<unsigned char>) );
      instance.SetNew(&new_vectorlEunsignedsPchargR);
      instance.SetNewArray(&newArray_vectorlEunsignedsPchargR);
      instance.SetDelete(&delete_vectorlEunsignedsPchargR);
      instance.SetDeleteArray(&deleteArray_vectorlEunsignedsPchargR);
      instance.SetDestructor(&destruct_vectorlEunsignedsPchargR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<unsigned char> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<unsigned char>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEunsignedsPchargR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<unsigned char>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEunsignedsPchargR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned char> : new vector<unsigned char>;
   }
   static void *newArray_vectorlEunsignedsPchargR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned char>[nElements] : new vector<unsigned char>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEunsignedsPchargR(void *p) {
      delete ((vector<unsigned char>*)p);
   }
   static void deleteArray_vectorlEunsignedsPchargR(void *p) {
      delete [] ((vector<unsigned char>*)p);
   }
   static void destruct_vectorlEunsignedsPchargR(void *p) {
      typedef vector<unsigned char> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<unsigned char>

namespace ROOT {
   void vectorlEunsignedsPshortgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEunsignedsPshortgR_Dictionary();
   static void *new_vectorlEunsignedsPshortgR(void *p = 0);
   static void *newArray_vectorlEunsignedsPshortgR(Long_t size, void *p);
   static void delete_vectorlEunsignedsPshortgR(void *p);
   static void deleteArray_vectorlEunsignedsPshortgR(void *p);
   static void destruct_vectorlEunsignedsPshortgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<unsigned short>*)
   {
      vector<unsigned short> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<unsigned short>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<unsigned short>", -2, "vector.dll", 0,
                  typeid(vector<unsigned short>), DefineBehavior(ptr, ptr),
                  0, &vectorlEunsignedsPshortgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<unsigned short>) );
      instance.SetNew(&new_vectorlEunsignedsPshortgR);
      instance.SetNewArray(&newArray_vectorlEunsignedsPshortgR);
      instance.SetDelete(&delete_vectorlEunsignedsPshortgR);
      instance.SetDeleteArray(&deleteArray_vectorlEunsignedsPshortgR);
      instance.SetDestructor(&destruct_vectorlEunsignedsPshortgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<unsigned short> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<unsigned short>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEunsignedsPshortgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<unsigned short>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEunsignedsPshortgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned short> : new vector<unsigned short>;
   }
   static void *newArray_vectorlEunsignedsPshortgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned short>[nElements] : new vector<unsigned short>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEunsignedsPshortgR(void *p) {
      delete ((vector<unsigned short>*)p);
   }
   static void deleteArray_vectorlEunsignedsPshortgR(void *p) {
      delete [] ((vector<unsigned short>*)p);
   }
   static void destruct_vectorlEunsignedsPshortgR(void *p) {
      typedef vector<unsigned short> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<unsigned short>

namespace ROOT {
   void vectorlEvectorlEchargRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEchargRsPgR_Dictionary();
   static void *new_vectorlEvectorlEchargRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEchargRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEchargRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEchargRsPgR(void *p);
   static void destruct_vectorlEvectorlEchargRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<char> >*)
   {
      vector<vector<char> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<char> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<char> >", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<char> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEchargRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<char> >) );
      instance.SetNew(&new_vectorlEvectorlEchargRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEchargRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEchargRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEchargRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEchargRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<char> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<char> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEchargRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<char> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEchargRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<char> > : new vector<vector<char> >;
   }
   static void *newArray_vectorlEvectorlEchargRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<char> >[nElements] : new vector<vector<char> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEchargRsPgR(void *p) {
      delete ((vector<vector<char> >*)p);
   }
   static void deleteArray_vectorlEvectorlEchargRsPgR(void *p) {
      delete [] ((vector<vector<char> >*)p);
   }
   static void destruct_vectorlEvectorlEchargRsPgR(void *p) {
      typedef vector<vector<char> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<char> >

namespace ROOT {
   void vectorlEvectorlEdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEdoublegRsPgR_Dictionary();
   static void *new_vectorlEvectorlEdoublegRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEdoublegRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEdoublegRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEdoublegRsPgR(void *p);
   static void destruct_vectorlEvectorlEdoublegRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<double> >*)
   {
      vector<vector<double> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<double> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<double> >", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<double> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEdoublegRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<double> >) );
      instance.SetNew(&new_vectorlEvectorlEdoublegRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEdoublegRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEdoublegRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEdoublegRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEdoublegRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<double> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<double> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEdoublegRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<double> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEdoublegRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<double> > : new vector<vector<double> >;
   }
   static void *newArray_vectorlEvectorlEdoublegRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<double> >[nElements] : new vector<vector<double> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEdoublegRsPgR(void *p) {
      delete ((vector<vector<double> >*)p);
   }
   static void deleteArray_vectorlEvectorlEdoublegRsPgR(void *p) {
      delete [] ((vector<vector<double> >*)p);
   }
   static void destruct_vectorlEvectorlEdoublegRsPgR(void *p) {
      typedef vector<vector<double> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<double> >

namespace ROOT {
   void vectorlEvectorlEfloatgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEfloatgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEfloatgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEfloatgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEfloatgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEfloatgRsPgR(void *p);
   static void destruct_vectorlEvectorlEfloatgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<float> >*)
   {
      vector<vector<float> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<float> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<float> >", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<float> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEfloatgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<float> >) );
      instance.SetNew(&new_vectorlEvectorlEfloatgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEfloatgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEfloatgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEfloatgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEfloatgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<float> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<float> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEfloatgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<float> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEfloatgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<float> > : new vector<vector<float> >;
   }
   static void *newArray_vectorlEvectorlEfloatgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<float> >[nElements] : new vector<vector<float> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEfloatgRsPgR(void *p) {
      delete ((vector<vector<float> >*)p);
   }
   static void deleteArray_vectorlEvectorlEfloatgRsPgR(void *p) {
      delete [] ((vector<vector<float> >*)p);
   }
   static void destruct_vectorlEvectorlEfloatgRsPgR(void *p) {
      typedef vector<vector<float> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<float> >

namespace ROOT {
   void vectorlEvectorlEintgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEintgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEintgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEintgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEintgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEintgRsPgR(void *p);
   static void destruct_vectorlEvectorlEintgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<int> >*)
   {
      vector<vector<int> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<int> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<int> >", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<int> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEintgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<int> >) );
      instance.SetNew(&new_vectorlEvectorlEintgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEintgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEintgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEintgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEintgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<int> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<int> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEintgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<int> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEintgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<int> > : new vector<vector<int> >;
   }
   static void *newArray_vectorlEvectorlEintgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<int> >[nElements] : new vector<vector<int> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEintgRsPgR(void *p) {
      delete ((vector<vector<int> >*)p);
   }
   static void deleteArray_vectorlEvectorlEintgRsPgR(void *p) {
      delete [] ((vector<vector<int> >*)p);
   }
   static void destruct_vectorlEvectorlEintgRsPgR(void *p) {
      typedef vector<vector<int> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<int> >

namespace ROOT {
   void vectorlEvectorlEshortgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEshortgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEshortgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEshortgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEshortgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEshortgRsPgR(void *p);
   static void destruct_vectorlEvectorlEshortgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<short> >*)
   {
      vector<vector<short> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<short> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<short> >", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<short> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEshortgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<short> >) );
      instance.SetNew(&new_vectorlEvectorlEshortgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEshortgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEshortgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEshortgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEshortgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<short> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<short> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEshortgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<short> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEshortgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<short> > : new vector<vector<short> >;
   }
   static void *newArray_vectorlEvectorlEshortgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<short> >[nElements] : new vector<vector<short> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEshortgRsPgR(void *p) {
      delete ((vector<vector<short> >*)p);
   }
   static void deleteArray_vectorlEvectorlEshortgRsPgR(void *p) {
      delete [] ((vector<vector<short> >*)p);
   }
   static void destruct_vectorlEvectorlEshortgRsPgR(void *p) {
      typedef vector<vector<short> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<short> >

namespace ROOT {
   void vectorlEvectorlEunsignedsPchargRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEunsignedsPchargRsPgR_Dictionary();
   static void *new_vectorlEvectorlEunsignedsPchargRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEunsignedsPchargRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEunsignedsPchargRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEunsignedsPchargRsPgR(void *p);
   static void destruct_vectorlEvectorlEunsignedsPchargRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<unsigned char> >*)
   {
      vector<vector<unsigned char> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<unsigned char> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<unsigned char> >", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<unsigned char> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEunsignedsPchargRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<unsigned char> >) );
      instance.SetNew(&new_vectorlEvectorlEunsignedsPchargRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEunsignedsPchargRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEunsignedsPchargRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEunsignedsPchargRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEunsignedsPchargRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<unsigned char> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<unsigned char> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEunsignedsPchargRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<unsigned char> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEunsignedsPchargRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<unsigned char> > : new vector<vector<unsigned char> >;
   }
   static void *newArray_vectorlEvectorlEunsignedsPchargRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<unsigned char> >[nElements] : new vector<vector<unsigned char> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEunsignedsPchargRsPgR(void *p) {
      delete ((vector<vector<unsigned char> >*)p);
   }
   static void deleteArray_vectorlEvectorlEunsignedsPchargRsPgR(void *p) {
      delete [] ((vector<vector<unsigned char> >*)p);
   }
   static void destruct_vectorlEvectorlEunsignedsPchargRsPgR(void *p) {
      typedef vector<vector<unsigned char> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<unsigned char> >

namespace ROOT {
   void vectorlEvectorlEunsignedsPshortgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEunsignedsPshortgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEunsignedsPshortgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEunsignedsPshortgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEunsignedsPshortgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEunsignedsPshortgRsPgR(void *p);
   static void destruct_vectorlEvectorlEunsignedsPshortgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<unsigned short> >*)
   {
      vector<vector<unsigned short> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<unsigned short> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<unsigned short> >", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<unsigned short> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEunsignedsPshortgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<unsigned short> >) );
      instance.SetNew(&new_vectorlEvectorlEunsignedsPshortgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEunsignedsPshortgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEunsignedsPshortgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEunsignedsPshortgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEunsignedsPshortgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<unsigned short> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<unsigned short> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEunsignedsPshortgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<unsigned short> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEunsignedsPshortgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<unsigned short> > : new vector<vector<unsigned short> >;
   }
   static void *newArray_vectorlEvectorlEunsignedsPshortgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<unsigned short> >[nElements] : new vector<vector<unsigned short> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEunsignedsPshortgRsPgR(void *p) {
      delete ((vector<vector<unsigned short> >*)p);
   }
   static void deleteArray_vectorlEvectorlEunsignedsPshortgRsPgR(void *p) {
      delete [] ((vector<vector<unsigned short> >*)p);
   }
   static void destruct_vectorlEvectorlEunsignedsPshortgRsPgR(void *p) {
      typedef vector<vector<unsigned short> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<unsigned short> >

namespace ROOT {
   void vectorlEvectorlEvectorlEchargRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEvectorlEchargRsPgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEvectorlEchargRsPgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEvectorlEchargRsPgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEvectorlEchargRsPgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEvectorlEchargRsPgRsPgR(void *p);
   static void destruct_vectorlEvectorlEvectorlEchargRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<vector<char> > >*)
   {
      vector<vector<vector<char> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<vector<char> > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<vector<char> > >", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<vector<char> > >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEvectorlEchargRsPgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<vector<char> > >) );
      instance.SetNew(&new_vectorlEvectorlEvectorlEchargRsPgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEvectorlEchargRsPgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEvectorlEchargRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEvectorlEchargRsPgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEvectorlEchargRsPgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<vector<char> > > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<vector<char> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEvectorlEchargRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<vector<char> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEvectorlEchargRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<char> > > : new vector<vector<vector<char> > >;
   }
   static void *newArray_vectorlEvectorlEvectorlEchargRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<char> > >[nElements] : new vector<vector<vector<char> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEvectorlEchargRsPgRsPgR(void *p) {
      delete ((vector<vector<vector<char> > >*)p);
   }
   static void deleteArray_vectorlEvectorlEvectorlEchargRsPgRsPgR(void *p) {
      delete [] ((vector<vector<vector<char> > >*)p);
   }
   static void destruct_vectorlEvectorlEvectorlEchargRsPgRsPgR(void *p) {
      typedef vector<vector<vector<char> > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<vector<char> > >

namespace ROOT {
   void vectorlEvectorlEvectorlEdoublegRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEvectorlEdoublegRsPgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p);
   static void destruct_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<vector<double> > >*)
   {
      vector<vector<vector<double> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<vector<double> > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<vector<double> > >", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<vector<double> > >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEvectorlEdoublegRsPgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<vector<double> > >) );
      instance.SetNew(&new_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<vector<double> > > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<vector<double> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEvectorlEdoublegRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<vector<double> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<double> > > : new vector<vector<vector<double> > >;
   }
   static void *newArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<double> > >[nElements] : new vector<vector<vector<double> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p) {
      delete ((vector<vector<vector<double> > >*)p);
   }
   static void deleteArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p) {
      delete [] ((vector<vector<vector<double> > >*)p);
   }
   static void destruct_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p) {
      typedef vector<vector<vector<double> > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<vector<double> > >

namespace ROOT {
   void vectorlEvectorlEvectorlEfloatgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEvectorlEfloatgRsPgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEvectorlEfloatgRsPgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEvectorlEfloatgRsPgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEvectorlEfloatgRsPgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEvectorlEfloatgRsPgRsPgR(void *p);
   static void destruct_vectorlEvectorlEvectorlEfloatgRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<vector<float> > >*)
   {
      vector<vector<vector<float> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<vector<float> > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<vector<float> > >", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<vector<float> > >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEvectorlEfloatgRsPgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<vector<float> > >) );
      instance.SetNew(&new_vectorlEvectorlEvectorlEfloatgRsPgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEvectorlEfloatgRsPgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEvectorlEfloatgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEvectorlEfloatgRsPgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEvectorlEfloatgRsPgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<vector<float> > > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<vector<float> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEvectorlEfloatgRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<vector<float> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEvectorlEfloatgRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<float> > > : new vector<vector<vector<float> > >;
   }
   static void *newArray_vectorlEvectorlEvectorlEfloatgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<float> > >[nElements] : new vector<vector<vector<float> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEvectorlEfloatgRsPgRsPgR(void *p) {
      delete ((vector<vector<vector<float> > >*)p);
   }
   static void deleteArray_vectorlEvectorlEvectorlEfloatgRsPgRsPgR(void *p) {
      delete [] ((vector<vector<vector<float> > >*)p);
   }
   static void destruct_vectorlEvectorlEvectorlEfloatgRsPgRsPgR(void *p) {
      typedef vector<vector<vector<float> > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<vector<float> > >

namespace ROOT {
   void vectorlEvectorlEvectorlEintgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEvectorlEintgRsPgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEvectorlEintgRsPgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEvectorlEintgRsPgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEvectorlEintgRsPgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEvectorlEintgRsPgRsPgR(void *p);
   static void destruct_vectorlEvectorlEvectorlEintgRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<vector<int> > >*)
   {
      vector<vector<vector<int> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<vector<int> > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<vector<int> > >", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<vector<int> > >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEvectorlEintgRsPgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<vector<int> > >) );
      instance.SetNew(&new_vectorlEvectorlEvectorlEintgRsPgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEvectorlEintgRsPgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEvectorlEintgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEvectorlEintgRsPgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEvectorlEintgRsPgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<vector<int> > > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<vector<int> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEvectorlEintgRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<vector<int> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEvectorlEintgRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<int> > > : new vector<vector<vector<int> > >;
   }
   static void *newArray_vectorlEvectorlEvectorlEintgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<int> > >[nElements] : new vector<vector<vector<int> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEvectorlEintgRsPgRsPgR(void *p) {
      delete ((vector<vector<vector<int> > >*)p);
   }
   static void deleteArray_vectorlEvectorlEvectorlEintgRsPgRsPgR(void *p) {
      delete [] ((vector<vector<vector<int> > >*)p);
   }
   static void destruct_vectorlEvectorlEvectorlEintgRsPgRsPgR(void *p) {
      typedef vector<vector<vector<int> > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<vector<int> > >

namespace ROOT {
   void vectorlEvectorlEvectorlEshortgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEvectorlEshortgRsPgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEvectorlEshortgRsPgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEvectorlEshortgRsPgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEvectorlEshortgRsPgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEvectorlEshortgRsPgRsPgR(void *p);
   static void destruct_vectorlEvectorlEvectorlEshortgRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<vector<short> > >*)
   {
      vector<vector<vector<short> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<vector<short> > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<vector<short> > >", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<vector<short> > >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEvectorlEshortgRsPgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<vector<short> > >) );
      instance.SetNew(&new_vectorlEvectorlEvectorlEshortgRsPgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEvectorlEshortgRsPgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEvectorlEshortgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEvectorlEshortgRsPgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEvectorlEshortgRsPgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<vector<short> > > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<vector<short> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEvectorlEshortgRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<vector<short> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEvectorlEshortgRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<short> > > : new vector<vector<vector<short> > >;
   }
   static void *newArray_vectorlEvectorlEvectorlEshortgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<short> > >[nElements] : new vector<vector<vector<short> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEvectorlEshortgRsPgRsPgR(void *p) {
      delete ((vector<vector<vector<short> > >*)p);
   }
   static void deleteArray_vectorlEvectorlEvectorlEshortgRsPgRsPgR(void *p) {
      delete [] ((vector<vector<vector<short> > >*)p);
   }
   static void destruct_vectorlEvectorlEvectorlEshortgRsPgRsPgR(void *p) {
      typedef vector<vector<vector<short> > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<vector<short> > >

namespace ROOT {
   void vectorlEvectorlEvectorlEunsignedsPchargRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEvectorlEunsignedsPchargRsPgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEvectorlEunsignedsPchargRsPgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEvectorlEunsignedsPchargRsPgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEvectorlEunsignedsPchargRsPgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEvectorlEunsignedsPchargRsPgRsPgR(void *p);
   static void destruct_vectorlEvectorlEvectorlEunsignedsPchargRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<vector<unsigned char> > >*)
   {
      vector<vector<vector<unsigned char> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<vector<unsigned char> > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<vector<unsigned char> > >", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<vector<unsigned char> > >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEvectorlEunsignedsPchargRsPgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<vector<unsigned char> > >) );
      instance.SetNew(&new_vectorlEvectorlEvectorlEunsignedsPchargRsPgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEvectorlEunsignedsPchargRsPgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEvectorlEunsignedsPchargRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEvectorlEunsignedsPchargRsPgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEvectorlEunsignedsPchargRsPgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<vector<unsigned char> > > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<vector<unsigned char> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEvectorlEunsignedsPchargRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<vector<unsigned char> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEvectorlEunsignedsPchargRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<unsigned char> > > : new vector<vector<vector<unsigned char> > >;
   }
   static void *newArray_vectorlEvectorlEvectorlEunsignedsPchargRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<unsigned char> > >[nElements] : new vector<vector<vector<unsigned char> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEvectorlEunsignedsPchargRsPgRsPgR(void *p) {
      delete ((vector<vector<vector<unsigned char> > >*)p);
   }
   static void deleteArray_vectorlEvectorlEvectorlEunsignedsPchargRsPgRsPgR(void *p) {
      delete [] ((vector<vector<vector<unsigned char> > >*)p);
   }
   static void destruct_vectorlEvectorlEvectorlEunsignedsPchargRsPgRsPgR(void *p) {
      typedef vector<vector<vector<unsigned char> > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<vector<unsigned char> > >

namespace ROOT {
   void vectorlEvectorlEvectorlEunsignedsPshortgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEvectorlEunsignedsPshortgRsPgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEvectorlEunsignedsPshortgRsPgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEvectorlEunsignedsPshortgRsPgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEvectorlEunsignedsPshortgRsPgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEvectorlEunsignedsPshortgRsPgRsPgR(void *p);
   static void destruct_vectorlEvectorlEvectorlEunsignedsPshortgRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<vector<unsigned short> > >*)
   {
      vector<vector<vector<unsigned short> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<vector<unsigned short> > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<vector<unsigned short> > >", -2, "/opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<vector<unsigned short> > >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEvectorlEunsignedsPshortgRsPgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<vector<unsigned short> > >) );
      instance.SetNew(&new_vectorlEvectorlEvectorlEunsignedsPshortgRsPgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEvectorlEunsignedsPshortgRsPgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEvectorlEunsignedsPshortgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEvectorlEunsignedsPshortgRsPgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEvectorlEunsignedsPshortgRsPgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<vector<unsigned short> > > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<vector<unsigned short> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEvectorlEunsignedsPshortgRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<vector<unsigned short> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEvectorlEunsignedsPshortgRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<unsigned short> > > : new vector<vector<vector<unsigned short> > >;
   }
   static void *newArray_vectorlEvectorlEvectorlEunsignedsPshortgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<unsigned short> > >[nElements] : new vector<vector<vector<unsigned short> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEvectorlEunsignedsPshortgRsPgRsPgR(void *p) {
      delete ((vector<vector<vector<unsigned short> > >*)p);
   }
   static void deleteArray_vectorlEvectorlEvectorlEunsignedsPshortgRsPgRsPgR(void *p) {
      delete [] ((vector<vector<vector<unsigned short> > >*)p);
   }
   static void destruct_vectorlEvectorlEvectorlEunsignedsPshortgRsPgRsPgR(void *p) {
      typedef vector<vector<vector<unsigned short> > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<vector<unsigned short> > >

/********************************************************
* /net/minus/home/grisha/ta/sdanalysis/sdfdrt/sdfdrtDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablesdfdrtDict();

extern "C" void G__set_cpp_environmentsdfdrtDict() {
  G__cpp_reset_tagtablesdfdrtDict();
}
#include <new>
extern "C" int G__cpp_dllrevsdfdrtDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* dstbank_class */
static int G__sdfdrtDict_343_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dstbank_class*) G__getstructoffset())->loadFromDST();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_343_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dstbank_class*) G__getstructoffset())->loadToDST();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_343_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dstbank_class*) G__getstructoffset())->clearOutDST();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_343_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dstbank_class*) G__getstructoffset())->get_bank_id());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_343_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dstbank_class*) G__getstructoffset())->get_bank_version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_343_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const dstbank_class*) G__getstructoffset())->get_bank_name();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_343_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((dstbank_class*) G__getstructoffset())->DumpBank((FILE*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((dstbank_class*) G__getstructoffset())->DumpBank((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((dstbank_class*) G__getstructoffset())->DumpBank();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_343_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dstbank_class::GetDSTDIR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_343_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dstbank_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_343_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dstbank_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_343_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) dstbank_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_343_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dstbank_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_343_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dstbank_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_343_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dstbank_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_343_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dstbank_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_343_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dstbank_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_343_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dstbank_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_343_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   dstbank_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new dstbank_class(*(dstbank_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef dstbank_class G__Tdstbank_class;
static int G__sdfdrtDict_343_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (dstbank_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((dstbank_class*) (soff+(sizeof(dstbank_class)*i)))->~G__Tdstbank_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (dstbank_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((dstbank_class*) (soff))->~G__Tdstbank_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_343_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dstbank_class* dest = (dstbank_class*) G__getstructoffset();
   *dest = *(dstbank_class*) libp->para[0].ref;
   const dstbank_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* talex00_class */
static int G__sdfdrtDict_344_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   talex00_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new talex00_class[n];
     } else {
       p = new((void*) gvp) talex00_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new talex00_class;
     } else {
       p = new((void*) gvp) talex00_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_talex00_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_344_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) talex00_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_344_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) talex00_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_344_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) talex00_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_344_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      talex00_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_344_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((talex00_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_344_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) talex00_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_344_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) talex00_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_344_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) talex00_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_344_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) talex00_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_344_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   talex00_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new talex00_class(*(talex00_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_talex00_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef talex00_class G__Ttalex00_class;
static int G__sdfdrtDict_344_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (talex00_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((talex00_class*) (soff+(sizeof(talex00_class)*i)))->~G__Ttalex00_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (talex00_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((talex00_class*) (soff))->~G__Ttalex00_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_344_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   talex00_class* dest = (talex00_class*) G__getstructoffset();
   *dest = *(talex00_class*) libp->para[0].ref;
   const talex00_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<int,allocator<int> > */
static int G__sdfdrtDict_346_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >::reference obj = ((vector<int,allocator<int> >*) G__getstructoffset())->at((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::const_reference obj = ((const vector<int,allocator<int> >*) G__getstructoffset())->at((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::iterator* pobj;
         vector<int,allocator<int> >::iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->begin();
         pobj = new vector<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::iterator* pobj;
         vector<int,allocator<int> >::iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->end();
         pobj = new vector<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::reverse_iterator* pobj;
         vector<int,allocator<int> >::reverse_iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->rbegin();
         pobj = new vector<int,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::reverse_iterator* pobj;
         vector<int,allocator<int> >::reverse_iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->rend();
         pobj = new vector<int,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<int,allocator<int> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<int,allocator<int> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->resize((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->resize((vector<int,allocator<int> >::size_type) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<int,allocator<int> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<int,allocator<int> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >::reference obj = ((vector<int,allocator<int> >*) G__getstructoffset())->operator[]((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::const_reference obj = ((const vector<int,allocator<int> >*) G__getstructoffset())->operator[]((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<int,allocator<int> >[n];
     } else {
       p = new((void*) gvp) vector<int,allocator<int> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<int,allocator<int> >;
     } else {
       p = new((void*) gvp) vector<int,allocator<int> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<int,allocator<int> >((vector<int,allocator<int> >::size_type) G__int(libp->para[0]), *(int*) G__Intref(&libp->para[1]));
     } else {
       p = new((void*) gvp) vector<int,allocator<int> >((vector<int,allocator<int> >::size_type) G__int(libp->para[0]), *(int*) G__Intref(&libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<int,allocator<int> >((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<int,allocator<int> >((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<int,allocator<int> >(*(vector<int,allocator<int> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<int,allocator<int> >(*(vector<int,allocator<int> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<int,allocator<int> >(*((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[0])), *((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<int,allocator<int> >(*((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[0])), *((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >& obj = ((vector<int,allocator<int> >*) G__getstructoffset())->operator=(*(vector<int,allocator<int> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->reserve((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((vector<int,allocator<int> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((vector<int,allocator<int> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->push_back(*(int*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->swap(*(vector<int,allocator<int> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::iterator* pobj;
         vector<int,allocator<int> >::iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->insert(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])), *(int*) G__Intref(&libp->para[1]));
         pobj = new vector<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->insert(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[1]))
, *((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->insert(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])), (vector<int,allocator<int> >::size_type) G__int(libp->para[1])
, *(int*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->erase(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->erase(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((vector<int,allocator<int> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_346_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<int,allocator<int> > G__TvectorlEintcOallocatorlEintgRsPgR;
static int G__sdfdrtDict_346_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<int,allocator<int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<int,allocator<int> >*) (soff+(sizeof(vector<int,allocator<int> >)*i)))->~G__TvectorlEintcOallocatorlEintgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<int,allocator<int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<int,allocator<int> >*) (soff))->~G__TvectorlEintcOallocatorlEintgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > */
static int G__sdfdrtDict_350_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reference obj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->at((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_reference obj = ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->at((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator* pobj;
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator xobj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator* pobj;
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator xobj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator* pobj;
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator xobj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator* pobj;
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator xobj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->resize((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->resize((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]), *((vector<int,allocator<int> >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reference obj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->operator[]((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_reference obj = ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->operator[]((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >;
     } else {
       p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]), *(vector<int,allocator<int> >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]), *(vector<int,allocator<int> >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >(*(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >(*(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >& obj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->operator=(*(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->reserve((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >& obj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >& obj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->push_back(*(vector<int,allocator<int> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->swap(*(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator* pobj;
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator xobj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->insert(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[0])), *(vector<int,allocator<int> >*) libp->para[1].ref);
         pobj = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->insert(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->insert(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[0])), (vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[1])
, *(vector<int,allocator<int> >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->erase(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->erase(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_350_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > G__TvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR;
static int G__sdfdrtDict_350_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) (soff+(sizeof(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >)*i)))->~G__TvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) (soff))->~G__TvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > > */
static int G__sdfdrtDict_354_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::reference obj = ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->at((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::const_reference obj = ((const vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->at((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator* pobj;
         vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator xobj = ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator* pobj;
         vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator xobj = ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::reverse_iterator* pobj;
         vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::reverse_iterator xobj = ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::reverse_iterator* pobj;
         vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::reverse_iterator xobj = ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->resize((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->resize((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type) G__int(libp->para[0]), *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::reference obj = ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->operator[]((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::const_reference obj = ((const vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->operator[]((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >;
     } else {
       p = new((void*) gvp) vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type) G__int(libp->para[0]), *(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type) G__int(libp->para[0]), *(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >(*(vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >(*(vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >(*((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >(*((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >& obj = ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->operator=(*(vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->reserve((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >& obj = ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >& obj = ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->push_back(*(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->swap(*(vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator* pobj;
         vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator xobj = ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->insert(*((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator*) G__int(libp->para[0])), *(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[1].ref);
         pobj = new vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->insert(*((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator*) G__int(libp->para[0])), *((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->insert(*((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator*) G__int(libp->para[0])), (vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type) G__int(libp->para[1])
, *(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->erase(*((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->erase(*((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator*) G__int(libp->para[0])), *((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_354_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > > G__TvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR;
static int G__sdfdrtDict_354_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) (soff+(sizeof(vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >)*i)))->~G__TvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*) (soff))->~G__TvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > */
static int G__sdfdrtDict_358_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reference obj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->at((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_reference obj = ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->at((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator* pobj;
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator xobj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator* pobj;
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator xobj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator* pobj;
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator xobj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator* pobj;
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator xobj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->resize((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->resize((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]), *((vector<double,allocator<double> >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reference obj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->operator[]((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_reference obj = ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->operator[]((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >;
     } else {
       p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]), *(vector<double,allocator<double> >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]), *(vector<double,allocator<double> >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >(*(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >(*(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >& obj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->operator=(*(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->reserve((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<double,allocator<double> >& obj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<double,allocator<double> >& obj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->push_back(*(vector<double,allocator<double> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->swap(*(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator* pobj;
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator xobj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->insert(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[0])), *(vector<double,allocator<double> >*) libp->para[1].ref);
         pobj = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->insert(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->insert(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[0])), (vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[1])
, *(vector<double,allocator<double> >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->erase(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->erase(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_358_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > G__TvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR;
static int G__sdfdrtDict_358_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) (soff+(sizeof(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >)*i)))->~G__TvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) (soff))->~G__TvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > > */
static int G__sdfdrtDict_362_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::reference obj = ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->at((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::const_reference obj = ((const vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->at((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator* pobj;
         vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator xobj = ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator* pobj;
         vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator xobj = ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::reverse_iterator* pobj;
         vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::reverse_iterator xobj = ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::reverse_iterator* pobj;
         vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::reverse_iterator xobj = ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->resize((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->resize((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type) G__int(libp->para[0]), *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::reference obj = ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->operator[]((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::const_reference obj = ((const vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->operator[]((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >;
     } else {
       p = new((void*) gvp) vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type) G__int(libp->para[0]), *(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type) G__int(libp->para[0]), *(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >(*(vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >(*(vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >(*((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >(*((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >& obj = ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->operator=(*(vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->reserve((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >& obj = ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >& obj = ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->push_back(*(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->swap(*(vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator* pobj;
         vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator xobj = ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->insert(*((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator*) G__int(libp->para[0])), *(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[1].ref);
         pobj = new vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->insert(*((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator*) G__int(libp->para[0])), *((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->insert(*((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator*) G__int(libp->para[0])), (vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type) G__int(libp->para[1])
, *(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->erase(*((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->erase(*((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator*) G__int(libp->para[0])), *((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_362_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > > G__TvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR;
static int G__sdfdrtDict_362_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) (soff+(sizeof(vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >)*i)))->~G__TvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*) (soff))->~G__TvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* rusdraw_class */
static int G__sdfdrtDict_365_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rusdraw_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rusdraw_class[n];
     } else {
       p = new((void*) gvp) rusdraw_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rusdraw_class;
     } else {
       p = new((void*) gvp) rusdraw_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_rusdraw_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_365_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) rusdraw_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_365_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rusdraw_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_365_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) rusdraw_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_365_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rusdraw_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_365_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rusdraw_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_365_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rusdraw_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_365_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) rusdraw_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_365_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rusdraw_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_365_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) rusdraw_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_365_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   rusdraw_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new rusdraw_class(*(rusdraw_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_rusdraw_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef rusdraw_class G__Trusdraw_class;
static int G__sdfdrtDict_365_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (rusdraw_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((rusdraw_class*) (soff+(sizeof(rusdraw_class)*i)))->~G__Trusdraw_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (rusdraw_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((rusdraw_class*) (soff))->~G__Trusdraw_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_365_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rusdraw_class* dest = (rusdraw_class*) G__getstructoffset();
   *dest = *(rusdraw_class*) libp->para[0].ref;
   const rusdraw_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* rusdmc_class */
static int G__sdfdrtDict_366_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rusdmc_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rusdmc_class[n];
     } else {
       p = new((void*) gvp) rusdmc_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rusdmc_class;
     } else {
       p = new((void*) gvp) rusdmc_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_366_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) rusdmc_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_366_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rusdmc_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_366_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) rusdmc_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_366_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rusdmc_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_366_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rusdmc_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_366_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rusdmc_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_366_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) rusdmc_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_366_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rusdmc_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_366_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) rusdmc_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_366_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   rusdmc_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new rusdmc_class(*(rusdmc_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef rusdmc_class G__Trusdmc_class;
static int G__sdfdrtDict_366_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (rusdmc_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((rusdmc_class*) (soff+(sizeof(rusdmc_class)*i)))->~G__Trusdmc_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (rusdmc_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((rusdmc_class*) (soff))->~G__Trusdmc_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_366_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rusdmc_class* dest = (rusdmc_class*) G__getstructoffset();
   *dest = *(rusdmc_class*) libp->para[0].ref;
   const rusdmc_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* rusdmc1_class */
static int G__sdfdrtDict_367_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rusdmc1_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rusdmc1_class[n];
     } else {
       p = new((void*) gvp) rusdmc1_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rusdmc1_class;
     } else {
       p = new((void*) gvp) rusdmc1_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc1_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_367_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) rusdmc1_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_367_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rusdmc1_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_367_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) rusdmc1_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_367_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rusdmc1_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_367_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rusdmc1_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_367_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rusdmc1_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_367_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) rusdmc1_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_367_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rusdmc1_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_367_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) rusdmc1_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_367_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   rusdmc1_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new rusdmc1_class(*(rusdmc1_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc1_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef rusdmc1_class G__Trusdmc1_class;
static int G__sdfdrtDict_367_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (rusdmc1_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((rusdmc1_class*) (soff+(sizeof(rusdmc1_class)*i)))->~G__Trusdmc1_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (rusdmc1_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((rusdmc1_class*) (soff))->~G__Trusdmc1_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_367_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rusdmc1_class* dest = (rusdmc1_class*) G__getstructoffset();
   *dest = *(rusdmc1_class*) libp->para[0].ref;
   const rusdmc1_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* showlib_class */
static int G__sdfdrtDict_368_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   showlib_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new showlib_class[n];
     } else {
       p = new((void*) gvp) showlib_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new showlib_class;
     } else {
       p = new((void*) gvp) showlib_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_showlib_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_368_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) showlib_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_368_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) showlib_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_368_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) showlib_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_368_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      showlib_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_368_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((showlib_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_368_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) showlib_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_368_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) showlib_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_368_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) showlib_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_368_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) showlib_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_368_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   showlib_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new showlib_class(*(showlib_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_showlib_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef showlib_class G__Tshowlib_class;
static int G__sdfdrtDict_368_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (showlib_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((showlib_class*) (soff+(sizeof(showlib_class)*i)))->~G__Tshowlib_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (showlib_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((showlib_class*) (soff))->~G__Tshowlib_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_368_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   showlib_class* dest = (showlib_class*) G__getstructoffset();
   *dest = *(showlib_class*) libp->para[0].ref;
   const showlib_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* bsdinfo_class */
static int G__sdfdrtDict_369_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   bsdinfo_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new bsdinfo_class[n];
     } else {
       p = new((void*) gvp) bsdinfo_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new bsdinfo_class;
     } else {
       p = new((void*) gvp) bsdinfo_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_bsdinfo_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_369_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) bsdinfo_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_369_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) bsdinfo_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_369_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) bsdinfo_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_369_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      bsdinfo_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_369_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((bsdinfo_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_369_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) bsdinfo_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_369_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) bsdinfo_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_369_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) bsdinfo_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_369_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) bsdinfo_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_369_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   bsdinfo_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new bsdinfo_class(*(bsdinfo_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_bsdinfo_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef bsdinfo_class G__Tbsdinfo_class;
static int G__sdfdrtDict_369_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (bsdinfo_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((bsdinfo_class*) (soff+(sizeof(bsdinfo_class)*i)))->~G__Tbsdinfo_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (bsdinfo_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((bsdinfo_class*) (soff))->~G__Tbsdinfo_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_369_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   bsdinfo_class* dest = (bsdinfo_class*) G__getstructoffset();
   *dest = *(bsdinfo_class*) libp->para[0].ref;
   const bsdinfo_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* sdtrgbk_class */
static int G__sdfdrtDict_370_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   sdtrgbk_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new sdtrgbk_class[n];
     } else {
       p = new((void*) gvp) sdtrgbk_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new sdtrgbk_class;
     } else {
       p = new((void*) gvp) sdtrgbk_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_sdtrgbk_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_370_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) sdtrgbk_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_370_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sdtrgbk_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_370_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) sdtrgbk_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_370_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      sdtrgbk_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_370_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((sdtrgbk_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_370_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sdtrgbk_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_370_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) sdtrgbk_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_370_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sdtrgbk_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_370_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) sdtrgbk_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_370_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   sdtrgbk_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new sdtrgbk_class(*(sdtrgbk_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_sdtrgbk_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef sdtrgbk_class G__Tsdtrgbk_class;
static int G__sdfdrtDict_370_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (sdtrgbk_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((sdtrgbk_class*) (soff+(sizeof(sdtrgbk_class)*i)))->~G__Tsdtrgbk_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (sdtrgbk_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((sdtrgbk_class*) (soff))->~G__Tsdtrgbk_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_370_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   sdtrgbk_class* dest = (sdtrgbk_class*) G__getstructoffset();
   *dest = *(sdtrgbk_class*) libp->para[0].ref;
   const sdtrgbk_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > */
static int G__sdfdrtDict_372_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::reference obj = ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->at((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::const_reference obj = ((const vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->at((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator* pobj;
         vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator xobj = ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator* pobj;
         vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator xobj = ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::reverse_iterator* pobj;
         vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::reverse_iterator xobj = ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::reverse_iterator* pobj;
         vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::reverse_iterator xobj = ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->resize((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->resize((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type) G__int(libp->para[0]), *((vector<short,allocator<short> >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::reference obj = ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->operator[]((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::const_reference obj = ((const vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->operator[]((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >;
     } else {
       p = new((void*) gvp) vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type) G__int(libp->para[0]), *(vector<short,allocator<short> >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type) G__int(libp->para[0]), *(vector<short,allocator<short> >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >(*(vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >(*(vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >(*((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >(*((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >& obj = ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->operator=(*(vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->reserve((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<short,allocator<short> >& obj = ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<short,allocator<short> >& obj = ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->push_back(*(vector<short,allocator<short> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->swap(*(vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator* pobj;
         vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator xobj = ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->insert(*((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator*) G__int(libp->para[0])), *(vector<short,allocator<short> >*) libp->para[1].ref);
         pobj = new vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->insert(*((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->insert(*((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator*) G__int(libp->para[0])), (vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type) G__int(libp->para[1])
, *(vector<short,allocator<short> >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->erase(*((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->erase(*((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_372_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > G__TvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR;
static int G__sdfdrtDict_372_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) (soff+(sizeof(vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >)*i)))->~G__TvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) (soff))->~G__TvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > > */
static int G__sdfdrtDict_376_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::reference obj = ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->at((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::const_reference obj = ((const vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->at((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator* pobj;
         vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator xobj = ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator* pobj;
         vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator xobj = ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::reverse_iterator* pobj;
         vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::reverse_iterator xobj = ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::reverse_iterator* pobj;
         vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::reverse_iterator xobj = ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->resize((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->resize((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type) G__int(libp->para[0]), *((vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::reference obj = ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->operator[]((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::const_reference obj = ((const vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->operator[]((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >;
     } else {
       p = new((void*) gvp) vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type) G__int(libp->para[0]), *(vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type) G__int(libp->para[0]), *(vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >(*(vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >(*(vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >(*((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >(*((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >& obj = ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->operator=(*(vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->reserve((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >& obj = ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >& obj = ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->push_back(*(vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->swap(*(vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator* pobj;
         vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator xobj = ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->insert(*((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator*) G__int(libp->para[0])), *(vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) libp->para[1].ref);
         pobj = new vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->insert(*((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator*) G__int(libp->para[0])), *((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->insert(*((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator*) G__int(libp->para[0])), (vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type) G__int(libp->para[1])
, *(vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->erase(*((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->erase(*((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator*) G__int(libp->para[0])), *((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_376_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > > G__TvectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR;
static int G__sdfdrtDict_376_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) (soff+(sizeof(vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >)*i)))->~G__TvectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*) (soff))->~G__TvectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SDEventSubData_class */
static int G__sdfdrtDict_379_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SDEventSubData_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SDEventSubData_class[n];
     } else {
       p = new((void*) gvp) SDEventSubData_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SDEventSubData_class;
     } else {
       p = new((void*) gvp) SDEventSubData_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_379_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDEventSubData_class*) G__getstructoffset())->loadFromDST((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_379_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDEventSubData_class*) G__getstructoffset())->loadToDST((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_379_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SDEventSubData_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_379_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDEventSubData_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_379_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SDEventSubData_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_379_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SDEventSubData_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_379_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDEventSubData_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_379_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDEventSubData_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_379_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SDEventSubData_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_379_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDEventSubData_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_379_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SDEventSubData_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_379_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SDEventSubData_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SDEventSubData_class(*(SDEventSubData_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SDEventSubData_class G__TSDEventSubData_class;
static int G__sdfdrtDict_379_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SDEventSubData_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SDEventSubData_class*) (soff+(sizeof(SDEventSubData_class)*i)))->~G__TSDEventSubData_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SDEventSubData_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SDEventSubData_class*) (soff))->~G__TSDEventSubData_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_379_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SDEventSubData_class* dest = (SDEventSubData_class*) G__getstructoffset();
   *dest = *(SDEventSubData_class*) libp->para[0].ref;
   const SDEventSubData_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* tasdevent_class */
static int G__sdfdrtDict_380_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((tasdevent_class*) G__getstructoffset())->pos2xxyy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_380_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((tasdevent_class*) G__getstructoffset())->pos2xxyy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_380_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tasdevent_class*) G__getstructoffset())->trigp2xxyyt((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_380_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tasdevent_class*) G__getstructoffset())->itrigp2xxyyt((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_380_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tasdevent_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tasdevent_class[n];
     } else {
       p = new((void*) gvp) tasdevent_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tasdevent_class;
     } else {
       p = new((void*) gvp) tasdevent_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_tasdevent_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_380_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) tasdevent_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_380_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tasdevent_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_380_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) tasdevent_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_380_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      tasdevent_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_380_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tasdevent_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_380_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tasdevent_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_380_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tasdevent_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_380_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tasdevent_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_380_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tasdevent_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_380_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   tasdevent_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new tasdevent_class(*(tasdevent_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_tasdevent_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef tasdevent_class G__Ttasdevent_class;
static int G__sdfdrtDict_380_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (tasdevent_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((tasdevent_class*) (soff+(sizeof(tasdevent_class)*i)))->~G__Ttasdevent_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (tasdevent_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((tasdevent_class*) (soff))->~G__Ttasdevent_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_380_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tasdevent_class* dest = (tasdevent_class*) G__getstructoffset();
   *dest = *(tasdevent_class*) libp->para[0].ref;
   const tasdevent_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<SDEventSubData_class,allocator<SDEventSubData_class> > */
static int G__sdfdrtDict_382_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDEventSubData_class,allocator<SDEventSubData_class> >::reference obj = ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->at((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDEventSubData_class,allocator<SDEventSubData_class> >::const_reference obj = ((const vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->at((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator* pobj;
         vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator xobj = ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->begin();
         pobj = new vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator* pobj;
         vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator xobj = ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->end();
         pobj = new vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDEventSubData_class,allocator<SDEventSubData_class> >::reverse_iterator* pobj;
         vector<SDEventSubData_class,allocator<SDEventSubData_class> >::reverse_iterator xobj = ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->rbegin();
         pobj = new vector<SDEventSubData_class,allocator<SDEventSubData_class> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDEventSubData_class,allocator<SDEventSubData_class> >::reverse_iterator* pobj;
         vector<SDEventSubData_class,allocator<SDEventSubData_class> >::reverse_iterator xobj = ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->rend();
         pobj = new vector<SDEventSubData_class,allocator<SDEventSubData_class> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->resize((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->resize((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type) G__int(libp->para[0]), *((SDEventSubData_class*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDEventSubData_class,allocator<SDEventSubData_class> >::reference obj = ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->operator[]((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDEventSubData_class,allocator<SDEventSubData_class> >::const_reference obj = ((const vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->operator[]((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDEventSubData_class,allocator<SDEventSubData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDEventSubData_class,allocator<SDEventSubData_class> >[n];
     } else {
       p = new((void*) gvp) vector<SDEventSubData_class,allocator<SDEventSubData_class> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDEventSubData_class,allocator<SDEventSubData_class> >;
     } else {
       p = new((void*) gvp) vector<SDEventSubData_class,allocator<SDEventSubData_class> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDEventSubData_class,allocator<SDEventSubData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDEventSubData_class,allocator<SDEventSubData_class> >((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type) G__int(libp->para[0]), *(SDEventSubData_class*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<SDEventSubData_class,allocator<SDEventSubData_class> >((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type) G__int(libp->para[0]), *(SDEventSubData_class*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDEventSubData_class,allocator<SDEventSubData_class> >((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<SDEventSubData_class,allocator<SDEventSubData_class> >((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDEventSubData_class,allocator<SDEventSubData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SDEventSubData_class,allocator<SDEventSubData_class> >(*(vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<SDEventSubData_class,allocator<SDEventSubData_class> >(*(vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDEventSubData_class,allocator<SDEventSubData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SDEventSubData_class,allocator<SDEventSubData_class> >(*((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::const_iterator*) G__int(libp->para[0])), *((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<SDEventSubData_class,allocator<SDEventSubData_class> >(*((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::const_iterator*) G__int(libp->para[0])), *((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDEventSubData_class,allocator<SDEventSubData_class> >& obj = ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->operator=(*(vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->reserve((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SDEventSubData_class& obj = ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SDEventSubData_class& obj = ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->push_back(*(SDEventSubData_class*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->swap(*(vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator* pobj;
         vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator xobj = ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->insert(*((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator*) G__int(libp->para[0])), *(SDEventSubData_class*) libp->para[1].ref);
         pobj = new vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->insert(*((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator*) G__int(libp->para[0])), *((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::const_iterator*) G__int(libp->para[1]))
, *((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->insert(*((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator*) G__int(libp->para[0])), (vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type) G__int(libp->para[1])
, *(SDEventSubData_class*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->erase(*((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->erase(*((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator*) G__int(libp->para[0])), *((vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_382_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<SDEventSubData_class,allocator<SDEventSubData_class> > G__TvectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR;
static int G__sdfdrtDict_382_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) (soff+(sizeof(vector<SDEventSubData_class,allocator<SDEventSubData_class> >)*i)))->~G__TvectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<SDEventSubData_class,allocator<SDEventSubData_class> >*) (soff))->~G__TvectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SDCalibHostData_class */
static int G__sdfdrtDict_385_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SDCalibHostData_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SDCalibHostData_class[n];
     } else {
       p = new((void*) gvp) SDCalibHostData_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SDCalibHostData_class;
     } else {
       p = new((void*) gvp) SDCalibHostData_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_385_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDCalibHostData_class*) G__getstructoffset())->loadFromDST((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_385_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDCalibHostData_class*) G__getstructoffset())->loadToDST((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_385_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SDCalibHostData_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_385_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDCalibHostData_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_385_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SDCalibHostData_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_385_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SDCalibHostData_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_385_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDCalibHostData_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_385_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDCalibHostData_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_385_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SDCalibHostData_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_385_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDCalibHostData_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_385_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SDCalibHostData_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_385_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SDCalibHostData_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SDCalibHostData_class(*(SDCalibHostData_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SDCalibHostData_class G__TSDCalibHostData_class;
static int G__sdfdrtDict_385_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SDCalibHostData_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SDCalibHostData_class*) (soff+(sizeof(SDCalibHostData_class)*i)))->~G__TSDCalibHostData_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SDCalibHostData_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SDCalibHostData_class*) (soff))->~G__TSDCalibHostData_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_385_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SDCalibHostData_class* dest = (SDCalibHostData_class*) G__getstructoffset();
   *dest = *(SDCalibHostData_class*) libp->para[0].ref;
   const SDCalibHostData_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SDCalibSubData_class */
static int G__sdfdrtDict_386_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SDCalibSubData_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SDCalibSubData_class[n];
     } else {
       p = new((void*) gvp) SDCalibSubData_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SDCalibSubData_class;
     } else {
       p = new((void*) gvp) SDCalibSubData_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_386_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDCalibSubData_class*) G__getstructoffset())->loadFromDST((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_386_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDCalibSubData_class*) G__getstructoffset())->loadToDST((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_386_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SDCalibSubData_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_386_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDCalibSubData_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_386_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SDCalibSubData_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_386_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SDCalibSubData_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_386_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDCalibSubData_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_386_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDCalibSubData_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_386_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SDCalibSubData_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_386_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDCalibSubData_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_386_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SDCalibSubData_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_386_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SDCalibSubData_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SDCalibSubData_class(*(SDCalibSubData_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SDCalibSubData_class G__TSDCalibSubData_class;
static int G__sdfdrtDict_386_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SDCalibSubData_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SDCalibSubData_class*) (soff+(sizeof(SDCalibSubData_class)*i)))->~G__TSDCalibSubData_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SDCalibSubData_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SDCalibSubData_class*) (soff))->~G__TSDCalibSubData_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_386_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SDCalibSubData_class* dest = (SDCalibSubData_class*) G__getstructoffset();
   *dest = *(SDCalibSubData_class*) libp->para[0].ref;
   const SDCalibSubData_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > */
static int G__sdfdrtDict_388_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reference obj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->at((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_reference obj = ((const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->at((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator* pobj;
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator xobj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator* pobj;
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator xobj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator* pobj;
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator xobj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator* pobj;
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator xobj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->resize((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->resize((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]), *((vector<float,allocator<float> >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reference obj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->operator[]((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_reference obj = ((const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->operator[]((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >;
     } else {
       p = new((void*) gvp) vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]), *(vector<float,allocator<float> >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]), *(vector<float,allocator<float> >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >(*(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >(*(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >& obj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->operator=(*(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->reserve((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<float,allocator<float> >& obj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<float,allocator<float> >& obj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->push_back(*(vector<float,allocator<float> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->swap(*(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator* pobj;
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator xobj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->insert(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator*) G__int(libp->para[0])), *(vector<float,allocator<float> >*) libp->para[1].ref);
         pobj = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->insert(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->insert(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator*) G__int(libp->para[0])), (vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[1])
, *(vector<float,allocator<float> >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->erase(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->erase(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_388_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > G__TvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR;
static int G__sdfdrtDict_388_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) (soff+(sizeof(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >)*i)))->~G__TvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) (soff))->~G__TvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SDCalibWeatherData_class */
static int G__sdfdrtDict_391_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SDCalibWeatherData_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SDCalibWeatherData_class[n];
     } else {
       p = new((void*) gvp) SDCalibWeatherData_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SDCalibWeatherData_class;
     } else {
       p = new((void*) gvp) SDCalibWeatherData_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibWeatherData_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_391_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDCalibWeatherData_class*) G__getstructoffset())->loadFromDST((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_391_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDCalibWeatherData_class*) G__getstructoffset())->loadToDST((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_391_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SDCalibWeatherData_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_391_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDCalibWeatherData_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_391_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SDCalibWeatherData_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_391_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SDCalibWeatherData_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_391_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SDCalibWeatherData_class*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_391_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDCalibWeatherData_class*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_391_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDCalibWeatherData_class*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_391_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDCalibWeatherData_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_391_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDCalibWeatherData_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_391_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SDCalibWeatherData_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_391_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDCalibWeatherData_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_391_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SDCalibWeatherData_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_391_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SDCalibWeatherData_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SDCalibWeatherData_class(*(SDCalibWeatherData_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibWeatherData_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SDCalibWeatherData_class G__TSDCalibWeatherData_class;
static int G__sdfdrtDict_391_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SDCalibWeatherData_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SDCalibWeatherData_class*) (soff+(sizeof(SDCalibWeatherData_class)*i)))->~G__TSDCalibWeatherData_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SDCalibWeatherData_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SDCalibWeatherData_class*) (soff))->~G__TSDCalibWeatherData_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_391_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SDCalibWeatherData_class* dest = (SDCalibWeatherData_class*) G__getstructoffset();
   *dest = *(SDCalibWeatherData_class*) libp->para[0].ref;
   const SDCalibWeatherData_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* tasdcalib_class */
static int G__sdfdrtDict_392_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tasdcalib_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tasdcalib_class[n];
     } else {
       p = new((void*) gvp) tasdcalib_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tasdcalib_class;
     } else {
       p = new((void*) gvp) tasdcalib_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalib_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_392_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) tasdcalib_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_392_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tasdcalib_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_392_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) tasdcalib_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_392_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      tasdcalib_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_392_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tasdcalib_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_392_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tasdcalib_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_392_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tasdcalib_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_392_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tasdcalib_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_392_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tasdcalib_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_392_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   tasdcalib_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new tasdcalib_class(*(tasdcalib_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalib_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef tasdcalib_class G__Ttasdcalib_class;
static int G__sdfdrtDict_392_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (tasdcalib_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((tasdcalib_class*) (soff+(sizeof(tasdcalib_class)*i)))->~G__Ttasdcalib_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (tasdcalib_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((tasdcalib_class*) (soff))->~G__Ttasdcalib_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_392_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tasdcalib_class* dest = (tasdcalib_class*) G__getstructoffset();
   *dest = *(tasdcalib_class*) libp->para[0].ref;
   const tasdcalib_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<SDCalibHostData_class,allocator<SDCalibHostData_class> > */
static int G__sdfdrtDict_394_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::reference obj = ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->at((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::const_reference obj = ((const vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->at((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator* pobj;
         vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator xobj = ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->begin();
         pobj = new vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator* pobj;
         vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator xobj = ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->end();
         pobj = new vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::reverse_iterator* pobj;
         vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::reverse_iterator xobj = ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->rbegin();
         pobj = new vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::reverse_iterator* pobj;
         vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::reverse_iterator xobj = ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->rend();
         pobj = new vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->resize((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->resize((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type) G__int(libp->para[0]), *((SDCalibHostData_class*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::reference obj = ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->operator[]((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::const_reference obj = ((const vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->operator[]((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >[n];
     } else {
       p = new((void*) gvp) vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >;
     } else {
       p = new((void*) gvp) vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type) G__int(libp->para[0]), *(SDCalibHostData_class*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type) G__int(libp->para[0]), *(SDCalibHostData_class*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >(*(vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >(*(vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >(*((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::const_iterator*) G__int(libp->para[0])), *((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >(*((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::const_iterator*) G__int(libp->para[0])), *((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >& obj = ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->operator=(*(vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->reserve((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SDCalibHostData_class& obj = ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SDCalibHostData_class& obj = ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->push_back(*(SDCalibHostData_class*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->swap(*(vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator* pobj;
         vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator xobj = ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->insert(*((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator*) G__int(libp->para[0])), *(SDCalibHostData_class*) libp->para[1].ref);
         pobj = new vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->insert(*((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator*) G__int(libp->para[0])), *((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::const_iterator*) G__int(libp->para[1]))
, *((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->insert(*((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator*) G__int(libp->para[0])), (vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type) G__int(libp->para[1])
, *(SDCalibHostData_class*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->erase(*((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->erase(*((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator*) G__int(libp->para[0])), *((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_394_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<SDCalibHostData_class,allocator<SDCalibHostData_class> > G__TvectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR;
static int G__sdfdrtDict_394_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) (soff+(sizeof(vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >)*i)))->~G__TvectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*) (soff))->~G__TvectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<SDCalibSubData_class,allocator<SDCalibSubData_class> > */
static int G__sdfdrtDict_398_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::reference obj = ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->at((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::const_reference obj = ((const vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->at((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator* pobj;
         vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator xobj = ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->begin();
         pobj = new vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator* pobj;
         vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator xobj = ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->end();
         pobj = new vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::reverse_iterator* pobj;
         vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::reverse_iterator xobj = ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->rbegin();
         pobj = new vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::reverse_iterator* pobj;
         vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::reverse_iterator xobj = ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->rend();
         pobj = new vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->resize((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->resize((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type) G__int(libp->para[0]), *((SDCalibSubData_class*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::reference obj = ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->operator[]((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::const_reference obj = ((const vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->operator[]((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >[n];
     } else {
       p = new((void*) gvp) vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >;
     } else {
       p = new((void*) gvp) vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type) G__int(libp->para[0]), *(SDCalibSubData_class*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type) G__int(libp->para[0]), *(SDCalibSubData_class*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >(*(vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >(*(vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >(*((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::const_iterator*) G__int(libp->para[0])), *((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >(*((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::const_iterator*) G__int(libp->para[0])), *((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >& obj = ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->operator=(*(vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->reserve((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SDCalibSubData_class& obj = ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SDCalibSubData_class& obj = ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->push_back(*(SDCalibSubData_class*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->swap(*(vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator* pobj;
         vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator xobj = ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->insert(*((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator*) G__int(libp->para[0])), *(SDCalibSubData_class*) libp->para[1].ref);
         pobj = new vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->insert(*((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator*) G__int(libp->para[0])), *((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::const_iterator*) G__int(libp->para[1]))
, *((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->insert(*((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator*) G__int(libp->para[0])), (vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type) G__int(libp->para[1])
, *(SDCalibSubData_class*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->erase(*((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->erase(*((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator*) G__int(libp->para[0])), *((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_398_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<SDCalibSubData_class,allocator<SDCalibSubData_class> > G__TvectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR;
static int G__sdfdrtDict_398_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) (soff+(sizeof(vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >)*i)))->~G__TvectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*) (soff))->~G__TvectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> > */
static int G__sdfdrtDict_402_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::reference obj = ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->at((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::const_reference obj = ((const vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->at((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator* pobj;
         vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator xobj = ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->begin();
         pobj = new vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator* pobj;
         vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator xobj = ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->end();
         pobj = new vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::reverse_iterator* pobj;
         vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::reverse_iterator xobj = ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->rbegin();
         pobj = new vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::reverse_iterator* pobj;
         vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::reverse_iterator xobj = ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->rend();
         pobj = new vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->resize((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->resize((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type) G__int(libp->para[0]), *((SDCalibWeatherData_class*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::reference obj = ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->operator[]((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::const_reference obj = ((const vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->operator[]((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >[n];
     } else {
       p = new((void*) gvp) vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >;
     } else {
       p = new((void*) gvp) vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type) G__int(libp->para[0]), *(SDCalibWeatherData_class*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type) G__int(libp->para[0]), *(SDCalibWeatherData_class*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >(*(vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >(*(vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >(*((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::const_iterator*) G__int(libp->para[0])), *((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >(*((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::const_iterator*) G__int(libp->para[0])), *((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >& obj = ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->operator=(*(vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->reserve((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SDCalibWeatherData_class& obj = ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SDCalibWeatherData_class& obj = ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->push_back(*(SDCalibWeatherData_class*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->swap(*(vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator* pobj;
         vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator xobj = ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->insert(*((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator*) G__int(libp->para[0])), *(SDCalibWeatherData_class*) libp->para[1].ref);
         pobj = new vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->insert(*((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator*) G__int(libp->para[0])), *((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::const_iterator*) G__int(libp->para[1]))
, *((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->insert(*((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator*) G__int(libp->para[0])), (vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type) G__int(libp->para[1])
, *(SDCalibWeatherData_class*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->erase(*((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->erase(*((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator*) G__int(libp->para[0])), *((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_402_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> > G__TvectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR;
static int G__sdfdrtDict_402_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) (soff+(sizeof(vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >)*i)))->~G__TvectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*) (soff))->~G__TvectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SDCalibevData_class */
static int G__sdfdrtDict_405_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDCalibevData_class*) G__getstructoffset())->loadFromDST((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_405_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDCalibevData_class*) G__getstructoffset())->loadToDST((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_405_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SDCalibevData_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SDCalibevData_class[n];
     } else {
       p = new((void*) gvp) SDCalibevData_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SDCalibevData_class;
     } else {
       p = new((void*) gvp) SDCalibevData_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_405_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SDCalibevData_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_405_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDCalibevData_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_405_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SDCalibevData_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_405_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SDCalibevData_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_405_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDCalibevData_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_405_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDCalibevData_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_405_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SDCalibevData_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_405_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDCalibevData_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_405_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SDCalibevData_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_405_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SDCalibevData_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SDCalibevData_class(*(SDCalibevData_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SDCalibevData_class G__TSDCalibevData_class;
static int G__sdfdrtDict_405_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SDCalibevData_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SDCalibevData_class*) (soff+(sizeof(SDCalibevData_class)*i)))->~G__TSDCalibevData_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SDCalibevData_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SDCalibevData_class*) (soff))->~G__TSDCalibevData_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_405_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SDCalibevData_class* dest = (SDCalibevData_class*) G__getstructoffset();
   *dest = *(SDCalibevData_class*) libp->para[0].ref;
   const SDCalibevData_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SDCalibevWeatherData_class */
static int G__sdfdrtDict_406_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDCalibevWeatherData_class*) G__getstructoffset())->loadFromDST((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_406_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDCalibevWeatherData_class*) G__getstructoffset())->loadToDST((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_406_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SDCalibevWeatherData_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SDCalibevWeatherData_class[n];
     } else {
       p = new((void*) gvp) SDCalibevWeatherData_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SDCalibevWeatherData_class;
     } else {
       p = new((void*) gvp) SDCalibevWeatherData_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_406_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SDCalibevWeatherData_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_406_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDCalibevWeatherData_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_406_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SDCalibevWeatherData_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_406_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SDCalibevWeatherData_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_406_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDCalibevWeatherData_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_406_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDCalibevWeatherData_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_406_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SDCalibevWeatherData_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_406_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDCalibevWeatherData_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_406_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SDCalibevWeatherData_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_406_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SDCalibevWeatherData_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SDCalibevWeatherData_class(*(SDCalibevWeatherData_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SDCalibevWeatherData_class G__TSDCalibevWeatherData_class;
static int G__sdfdrtDict_406_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SDCalibevWeatherData_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SDCalibevWeatherData_class*) (soff+(sizeof(SDCalibevWeatherData_class)*i)))->~G__TSDCalibevWeatherData_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SDCalibevWeatherData_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SDCalibevWeatherData_class*) (soff))->~G__TSDCalibevWeatherData_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_406_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SDCalibevWeatherData_class* dest = (SDCalibevWeatherData_class*) G__getstructoffset();
   *dest = *(SDCalibevWeatherData_class*) libp->para[0].ref;
   const SDCalibevWeatherData_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SDCalibevSimInfo_class */
static int G__sdfdrtDict_407_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SDCalibevSimInfo_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SDCalibevSimInfo_class[n];
     } else {
       p = new((void*) gvp) SDCalibevSimInfo_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SDCalibevSimInfo_class;
     } else {
       p = new((void*) gvp) SDCalibevSimInfo_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevSimInfo_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_407_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SDCalibevSimInfo_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_407_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDCalibevSimInfo_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_407_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SDCalibevSimInfo_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_407_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SDCalibevSimInfo_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_407_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDCalibevSimInfo_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_407_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDCalibevSimInfo_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_407_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SDCalibevSimInfo_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_407_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDCalibevSimInfo_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_407_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SDCalibevSimInfo_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_407_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SDCalibevSimInfo_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SDCalibevSimInfo_class(*(SDCalibevSimInfo_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevSimInfo_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SDCalibevSimInfo_class G__TSDCalibevSimInfo_class;
static int G__sdfdrtDict_407_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SDCalibevSimInfo_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SDCalibevSimInfo_class*) (soff+(sizeof(SDCalibevSimInfo_class)*i)))->~G__TSDCalibevSimInfo_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SDCalibevSimInfo_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SDCalibevSimInfo_class*) (soff))->~G__TSDCalibevSimInfo_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_407_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SDCalibevSimInfo_class* dest = (SDCalibevSimInfo_class*) G__getstructoffset();
   *dest = *(SDCalibevSimInfo_class*) libp->para[0].ref;
   const SDCalibevSimInfo_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* tasdcalibev_class */
static int G__sdfdrtDict_408_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tasdcalibev_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tasdcalibev_class[n];
     } else {
       p = new((void*) gvp) tasdcalibev_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tasdcalibev_class;
     } else {
       p = new((void*) gvp) tasdcalibev_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalibev_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_408_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) tasdcalibev_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_408_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tasdcalibev_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_408_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) tasdcalibev_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_408_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      tasdcalibev_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_408_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tasdcalibev_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_408_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tasdcalibev_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_408_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tasdcalibev_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_408_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tasdcalibev_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_408_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tasdcalibev_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_408_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   tasdcalibev_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new tasdcalibev_class(*(tasdcalibev_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalibev_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef tasdcalibev_class G__Ttasdcalibev_class;
static int G__sdfdrtDict_408_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (tasdcalibev_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((tasdcalibev_class*) (soff+(sizeof(tasdcalibev_class)*i)))->~G__Ttasdcalibev_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (tasdcalibev_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((tasdcalibev_class*) (soff))->~G__Ttasdcalibev_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_408_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tasdcalibev_class* dest = (tasdcalibev_class*) G__getstructoffset();
   *dest = *(tasdcalibev_class*) libp->para[0].ref;
   const tasdcalibev_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<SDCalibevData_class,allocator<SDCalibevData_class> > */
static int G__sdfdrtDict_410_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDCalibevData_class,allocator<SDCalibevData_class> >::reference obj = ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->at((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibevData_class,allocator<SDCalibevData_class> >::const_reference obj = ((const vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->at((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator* pobj;
         vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator xobj = ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->begin();
         pobj = new vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator* pobj;
         vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator xobj = ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->end();
         pobj = new vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibevData_class,allocator<SDCalibevData_class> >::reverse_iterator* pobj;
         vector<SDCalibevData_class,allocator<SDCalibevData_class> >::reverse_iterator xobj = ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->rbegin();
         pobj = new vector<SDCalibevData_class,allocator<SDCalibevData_class> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibevData_class,allocator<SDCalibevData_class> >::reverse_iterator* pobj;
         vector<SDCalibevData_class,allocator<SDCalibevData_class> >::reverse_iterator xobj = ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->rend();
         pobj = new vector<SDCalibevData_class,allocator<SDCalibevData_class> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->resize((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->resize((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type) G__int(libp->para[0]), *((SDCalibevData_class*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDCalibevData_class,allocator<SDCalibevData_class> >::reference obj = ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->operator[]((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibevData_class,allocator<SDCalibevData_class> >::const_reference obj = ((const vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->operator[]((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDCalibevData_class,allocator<SDCalibevData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDCalibevData_class,allocator<SDCalibevData_class> >[n];
     } else {
       p = new((void*) gvp) vector<SDCalibevData_class,allocator<SDCalibevData_class> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDCalibevData_class,allocator<SDCalibevData_class> >;
     } else {
       p = new((void*) gvp) vector<SDCalibevData_class,allocator<SDCalibevData_class> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDCalibevData_class,allocator<SDCalibevData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDCalibevData_class,allocator<SDCalibevData_class> >((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type) G__int(libp->para[0]), *(SDCalibevData_class*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<SDCalibevData_class,allocator<SDCalibevData_class> >((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type) G__int(libp->para[0]), *(SDCalibevData_class*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDCalibevData_class,allocator<SDCalibevData_class> >((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<SDCalibevData_class,allocator<SDCalibevData_class> >((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDCalibevData_class,allocator<SDCalibevData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SDCalibevData_class,allocator<SDCalibevData_class> >(*(vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<SDCalibevData_class,allocator<SDCalibevData_class> >(*(vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDCalibevData_class,allocator<SDCalibevData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SDCalibevData_class,allocator<SDCalibevData_class> >(*((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::const_iterator*) G__int(libp->para[0])), *((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<SDCalibevData_class,allocator<SDCalibevData_class> >(*((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::const_iterator*) G__int(libp->para[0])), *((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDCalibevData_class,allocator<SDCalibevData_class> >& obj = ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->operator=(*(vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->reserve((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SDCalibevData_class& obj = ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SDCalibevData_class& obj = ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->push_back(*(SDCalibevData_class*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->swap(*(vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator* pobj;
         vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator xobj = ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->insert(*((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator*) G__int(libp->para[0])), *(SDCalibevData_class*) libp->para[1].ref);
         pobj = new vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->insert(*((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator*) G__int(libp->para[0])), *((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::const_iterator*) G__int(libp->para[1]))
, *((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->insert(*((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator*) G__int(libp->para[0])), (vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type) G__int(libp->para[1])
, *(SDCalibevData_class*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->erase(*((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->erase(*((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator*) G__int(libp->para[0])), *((vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_410_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<SDCalibevData_class,allocator<SDCalibevData_class> > G__TvectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR;
static int G__sdfdrtDict_410_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) (soff+(sizeof(vector<SDCalibevData_class,allocator<SDCalibevData_class> >)*i)))->~G__TvectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<SDCalibevData_class,allocator<SDCalibevData_class> >*) (soff))->~G__TvectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> > */
static int G__sdfdrtDict_414_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::reference obj = ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->at((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::const_reference obj = ((const vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->at((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator* pobj;
         vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator xobj = ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->begin();
         pobj = new vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator* pobj;
         vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator xobj = ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->end();
         pobj = new vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::reverse_iterator* pobj;
         vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::reverse_iterator xobj = ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->rbegin();
         pobj = new vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::reverse_iterator* pobj;
         vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::reverse_iterator xobj = ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->rend();
         pobj = new vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->resize((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->resize((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type) G__int(libp->para[0]), *((SDCalibevWeatherData_class*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::reference obj = ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->operator[]((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::const_reference obj = ((const vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->operator[]((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >[n];
     } else {
       p = new((void*) gvp) vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >;
     } else {
       p = new((void*) gvp) vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type) G__int(libp->para[0]), *(SDCalibevWeatherData_class*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type) G__int(libp->para[0]), *(SDCalibevWeatherData_class*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >(*(vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >(*(vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >(*((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::const_iterator*) G__int(libp->para[0])), *((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >(*((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::const_iterator*) G__int(libp->para[0])), *((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >& obj = ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->operator=(*(vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->reserve((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SDCalibevWeatherData_class& obj = ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SDCalibevWeatherData_class& obj = ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->push_back(*(SDCalibevWeatherData_class*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->swap(*(vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator* pobj;
         vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator xobj = ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->insert(*((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator*) G__int(libp->para[0])), *(SDCalibevWeatherData_class*) libp->para[1].ref);
         pobj = new vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->insert(*((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator*) G__int(libp->para[0])), *((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::const_iterator*) G__int(libp->para[1]))
, *((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->insert(*((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator*) G__int(libp->para[0])), (vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type) G__int(libp->para[1])
, *(SDCalibevWeatherData_class*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->erase(*((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->erase(*((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator*) G__int(libp->para[0])), *((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_414_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> > G__TvectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR;
static int G__sdfdrtDict_414_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) (soff+(sizeof(vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >)*i)))->~G__TvectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*) (soff))->~G__TvectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* rufptn_class */
static int G__sdfdrtDict_417_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rufptn_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rufptn_class[n];
     } else {
       p = new((void*) gvp) rufptn_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rufptn_class;
     } else {
       p = new((void*) gvp) rufptn_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_rufptn_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_417_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) rufptn_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_417_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rufptn_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_417_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) rufptn_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_417_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rufptn_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_417_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rufptn_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_417_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rufptn_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_417_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) rufptn_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_417_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rufptn_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_417_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) rufptn_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_417_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   rufptn_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new rufptn_class(*(rufptn_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_rufptn_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef rufptn_class G__Trufptn_class;
static int G__sdfdrtDict_417_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (rufptn_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((rufptn_class*) (soff+(sizeof(rufptn_class)*i)))->~G__Trufptn_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (rufptn_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((rufptn_class*) (soff))->~G__Trufptn_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_417_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rufptn_class* dest = (rufptn_class*) G__getstructoffset();
   *dest = *(rufptn_class*) libp->para[0].ref;
   const rufptn_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* rusdgeom_class */
static int G__sdfdrtDict_418_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rusdgeom_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rusdgeom_class[n];
     } else {
       p = new((void*) gvp) rusdgeom_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rusdgeom_class;
     } else {
       p = new((void*) gvp) rusdgeom_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_rusdgeom_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_418_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) rusdgeom_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_418_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rusdgeom_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_418_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) rusdgeom_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_418_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rusdgeom_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_418_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rusdgeom_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_418_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rusdgeom_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_418_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) rusdgeom_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_418_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rusdgeom_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_418_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) rusdgeom_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_418_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   rusdgeom_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new rusdgeom_class(*(rusdgeom_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_rusdgeom_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef rusdgeom_class G__Trusdgeom_class;
static int G__sdfdrtDict_418_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (rusdgeom_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((rusdgeom_class*) (soff+(sizeof(rusdgeom_class)*i)))->~G__Trusdgeom_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (rusdgeom_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((rusdgeom_class*) (soff))->~G__Trusdgeom_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_418_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rusdgeom_class* dest = (rusdgeom_class*) G__getstructoffset();
   *dest = *(rusdgeom_class*) libp->para[0].ref;
   const rusdgeom_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* rufldf_class */
static int G__sdfdrtDict_419_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rufldf_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rufldf_class[n];
     } else {
       p = new((void*) gvp) rufldf_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rufldf_class;
     } else {
       p = new((void*) gvp) rufldf_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_rufldf_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_419_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) rufldf_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_419_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rufldf_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_419_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) rufldf_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_419_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rufldf_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_419_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rufldf_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_419_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rufldf_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_419_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) rufldf_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_419_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rufldf_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_419_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) rufldf_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_419_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   rufldf_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new rufldf_class(*(rufldf_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_rufldf_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef rufldf_class G__Trufldf_class;
static int G__sdfdrtDict_419_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (rufldf_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((rufldf_class*) (soff+(sizeof(rufldf_class)*i)))->~G__Trufldf_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (rufldf_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((rufldf_class*) (soff))->~G__Trufldf_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_419_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rufldf_class* dest = (rufldf_class*) G__getstructoffset();
   *dest = *(rufldf_class*) libp->para[0].ref;
   const rufldf_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* etrack_class */
static int G__sdfdrtDict_420_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   etrack_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new etrack_class[n];
     } else {
       p = new((void*) gvp) etrack_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new etrack_class;
     } else {
       p = new((void*) gvp) etrack_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_etrack_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_420_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) etrack_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_420_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) etrack_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_420_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) etrack_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_420_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      etrack_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_420_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((etrack_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_420_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) etrack_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_420_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) etrack_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_420_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) etrack_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_420_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) etrack_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_420_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   etrack_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new etrack_class(*(etrack_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_etrack_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef etrack_class G__Tetrack_class;
static int G__sdfdrtDict_420_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (etrack_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((etrack_class*) (soff+(sizeof(etrack_class)*i)))->~G__Tetrack_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (etrack_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((etrack_class*) (soff))->~G__Tetrack_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_420_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   etrack_class* dest = (etrack_class*) G__getstructoffset();
   *dest = *(etrack_class*) libp->para[0].ref;
   const etrack_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* atmpar_class */
static int G__sdfdrtDict_421_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   atmpar_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new atmpar_class[n];
     } else {
       p = new((void*) gvp) atmpar_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new atmpar_class;
     } else {
       p = new((void*) gvp) atmpar_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_atmpar_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_421_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) atmpar_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_421_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) atmpar_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_421_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) atmpar_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_421_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      atmpar_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_421_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((atmpar_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_421_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) atmpar_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_421_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) atmpar_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_421_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) atmpar_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_421_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) atmpar_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_421_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   atmpar_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new atmpar_class(*(atmpar_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_atmpar_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef atmpar_class G__Tatmpar_class;
static int G__sdfdrtDict_421_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (atmpar_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((atmpar_class*) (soff+(sizeof(atmpar_class)*i)))->~G__Tatmpar_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (atmpar_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((atmpar_class*) (soff))->~G__Tatmpar_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_421_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   atmpar_class* dest = (atmpar_class*) G__getstructoffset();
   *dest = *(atmpar_class*) libp->para[0].ref;
   const atmpar_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* fdraw_class */
static int G__sdfdrtDict_422_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   fdraw_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new fdraw_class[n];
     } else {
       p = new((void*) gvp) fdraw_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new fdraw_class;
     } else {
       p = new((void*) gvp) fdraw_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_fdraw_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_422_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) fdraw_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_422_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) fdraw_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_422_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) fdraw_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_422_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fdraw_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_422_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((fdraw_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_422_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) fdraw_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_422_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) fdraw_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_422_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) fdraw_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_422_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) fdraw_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_422_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   fdraw_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new fdraw_class(*(fdraw_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_fdraw_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef fdraw_class G__Tfdraw_class;
static int G__sdfdrtDict_422_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (fdraw_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((fdraw_class*) (soff+(sizeof(fdraw_class)*i)))->~G__Tfdraw_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (fdraw_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((fdraw_class*) (soff))->~G__Tfdraw_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_422_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   fdraw_class* dest = (fdraw_class*) G__getstructoffset();
   *dest = *(fdraw_class*) libp->para[0].ref;
   const fdraw_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* brraw_class */
static int G__sdfdrtDict_431_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   brraw_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new brraw_class[n];
     } else {
       p = new((void*) gvp) brraw_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new brraw_class;
     } else {
       p = new((void*) gvp) brraw_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_brraw_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_431_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) brraw_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_431_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) brraw_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_431_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) brraw_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_431_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      brraw_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_431_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((brraw_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_431_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) brraw_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_431_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) brraw_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_431_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) brraw_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_431_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) brraw_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_431_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   brraw_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new brraw_class(*(brraw_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_brraw_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef brraw_class G__Tbrraw_class;
static int G__sdfdrtDict_431_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (brraw_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((brraw_class*) (soff+(sizeof(brraw_class)*i)))->~G__Tbrraw_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (brraw_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((brraw_class*) (soff))->~G__Tbrraw_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_431_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   brraw_class* dest = (brraw_class*) G__getstructoffset();
   *dest = *(brraw_class*) libp->para[0].ref;
   const brraw_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* lrraw_class */
static int G__sdfdrtDict_432_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   lrraw_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new lrraw_class[n];
     } else {
       p = new((void*) gvp) lrraw_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new lrraw_class;
     } else {
       p = new((void*) gvp) lrraw_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_lrraw_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_432_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) lrraw_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_432_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) lrraw_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_432_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) lrraw_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_432_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      lrraw_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_432_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((lrraw_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_432_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) lrraw_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_432_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) lrraw_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_432_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) lrraw_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_432_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) lrraw_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_432_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   lrraw_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new lrraw_class(*(lrraw_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_lrraw_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef lrraw_class G__Tlrraw_class;
static int G__sdfdrtDict_432_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (lrraw_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((lrraw_class*) (soff+(sizeof(lrraw_class)*i)))->~G__Tlrraw_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (lrraw_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((lrraw_class*) (soff))->~G__Tlrraw_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_432_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   lrraw_class* dest = (lrraw_class*) G__getstructoffset();
   *dest = *(lrraw_class*) libp->para[0].ref;
   const lrraw_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* fdplane_class */
static int G__sdfdrtDict_433_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   fdplane_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new fdplane_class[n];
     } else {
       p = new((void*) gvp) fdplane_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new fdplane_class;
     } else {
       p = new((void*) gvp) fdplane_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_fdplane_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_433_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) fdplane_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_433_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) fdplane_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_433_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) fdplane_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_433_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fdplane_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_433_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((fdplane_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_433_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) fdplane_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_433_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) fdplane_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_433_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) fdplane_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_433_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) fdplane_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_433_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   fdplane_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new fdplane_class(*(fdplane_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_fdplane_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef fdplane_class G__Tfdplane_class;
static int G__sdfdrtDict_433_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (fdplane_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((fdplane_class*) (soff+(sizeof(fdplane_class)*i)))->~G__Tfdplane_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (fdplane_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((fdplane_class*) (soff))->~G__Tfdplane_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_433_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   fdplane_class* dest = (fdplane_class*) G__getstructoffset();
   *dest = *(fdplane_class*) libp->para[0].ref;
   const fdplane_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* brplane_class */
static int G__sdfdrtDict_434_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   brplane_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new brplane_class[n];
     } else {
       p = new((void*) gvp) brplane_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new brplane_class;
     } else {
       p = new((void*) gvp) brplane_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_brplane_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_434_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) brplane_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_434_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) brplane_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_434_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) brplane_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_434_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      brplane_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_434_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((brplane_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_434_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) brplane_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_434_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) brplane_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_434_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) brplane_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_434_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) brplane_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_434_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   brplane_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new brplane_class(*(brplane_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_brplane_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef brplane_class G__Tbrplane_class;
static int G__sdfdrtDict_434_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (brplane_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((brplane_class*) (soff+(sizeof(brplane_class)*i)))->~G__Tbrplane_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (brplane_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((brplane_class*) (soff))->~G__Tbrplane_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_434_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   brplane_class* dest = (brplane_class*) G__getstructoffset();
   *dest = *(brplane_class*) libp->para[0].ref;
   const brplane_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* lrplane_class */
static int G__sdfdrtDict_435_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   lrplane_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new lrplane_class[n];
     } else {
       p = new((void*) gvp) lrplane_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new lrplane_class;
     } else {
       p = new((void*) gvp) lrplane_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_lrplane_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_435_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) lrplane_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_435_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) lrplane_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_435_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) lrplane_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_435_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      lrplane_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_435_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((lrplane_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_435_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) lrplane_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_435_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) lrplane_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_435_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) lrplane_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_435_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) lrplane_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_435_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   lrplane_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new lrplane_class(*(lrplane_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_lrplane_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef lrplane_class G__Tlrplane_class;
static int G__sdfdrtDict_435_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (lrplane_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((lrplane_class*) (soff+(sizeof(lrplane_class)*i)))->~G__Tlrplane_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (lrplane_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((lrplane_class*) (soff))->~G__Tlrplane_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_435_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   lrplane_class* dest = (lrplane_class*) G__getstructoffset();
   *dest = *(lrplane_class*) libp->para[0].ref;
   const lrplane_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* fdprofile_class */
static int G__sdfdrtDict_436_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   fdprofile_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new fdprofile_class[n];
     } else {
       p = new((void*) gvp) fdprofile_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new fdprofile_class;
     } else {
       p = new((void*) gvp) fdprofile_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_fdprofile_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_436_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) fdprofile_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_436_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) fdprofile_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_436_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) fdprofile_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_436_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fdprofile_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_436_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((fdprofile_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_436_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) fdprofile_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_436_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) fdprofile_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_436_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) fdprofile_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_436_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) fdprofile_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_436_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   fdprofile_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new fdprofile_class(*(fdprofile_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_fdprofile_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef fdprofile_class G__Tfdprofile_class;
static int G__sdfdrtDict_436_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (fdprofile_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((fdprofile_class*) (soff+(sizeof(fdprofile_class)*i)))->~G__Tfdprofile_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (fdprofile_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((fdprofile_class*) (soff))->~G__Tfdprofile_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_436_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   fdprofile_class* dest = (fdprofile_class*) G__getstructoffset();
   *dest = *(fdprofile_class*) libp->para[0].ref;
   const fdprofile_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* brprofile_class */
static int G__sdfdrtDict_437_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   brprofile_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new brprofile_class[n];
     } else {
       p = new((void*) gvp) brprofile_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new brprofile_class;
     } else {
       p = new((void*) gvp) brprofile_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_brprofile_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_437_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) brprofile_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_437_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) brprofile_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_437_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) brprofile_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_437_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      brprofile_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_437_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((brprofile_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_437_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) brprofile_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_437_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) brprofile_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_437_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) brprofile_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_437_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) brprofile_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_437_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   brprofile_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new brprofile_class(*(brprofile_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_brprofile_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef brprofile_class G__Tbrprofile_class;
static int G__sdfdrtDict_437_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (brprofile_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((brprofile_class*) (soff+(sizeof(brprofile_class)*i)))->~G__Tbrprofile_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (brprofile_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((brprofile_class*) (soff))->~G__Tbrprofile_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_437_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   brprofile_class* dest = (brprofile_class*) G__getstructoffset();
   *dest = *(brprofile_class*) libp->para[0].ref;
   const brprofile_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* lrprofile_class */
static int G__sdfdrtDict_438_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   lrprofile_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new lrprofile_class[n];
     } else {
       p = new((void*) gvp) lrprofile_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new lrprofile_class;
     } else {
       p = new((void*) gvp) lrprofile_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_lrprofile_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_438_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) lrprofile_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_438_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) lrprofile_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_438_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) lrprofile_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_438_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      lrprofile_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_438_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((lrprofile_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_438_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) lrprofile_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_438_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) lrprofile_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_438_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) lrprofile_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_438_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) lrprofile_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_438_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   lrprofile_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new lrprofile_class(*(lrprofile_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_lrprofile_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef lrprofile_class G__Tlrprofile_class;
static int G__sdfdrtDict_438_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (lrprofile_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((lrprofile_class*) (soff+(sizeof(lrprofile_class)*i)))->~G__Tlrprofile_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (lrprofile_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((lrprofile_class*) (soff))->~G__Tlrprofile_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_438_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   lrprofile_class* dest = (lrprofile_class*) G__getstructoffset();
   *dest = *(lrprofile_class*) libp->para[0].ref;
   const lrprofile_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* fdtubeprofile_class */
static int G__sdfdrtDict_439_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   fdtubeprofile_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new fdtubeprofile_class[n];
     } else {
       p = new((void*) gvp) fdtubeprofile_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new fdtubeprofile_class;
     } else {
       p = new((void*) gvp) fdtubeprofile_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_fdtubeprofile_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_439_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) fdtubeprofile_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_439_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) fdtubeprofile_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_439_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) fdtubeprofile_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_439_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fdtubeprofile_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_439_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((fdtubeprofile_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_439_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) fdtubeprofile_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_439_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) fdtubeprofile_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_439_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) fdtubeprofile_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_439_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) fdtubeprofile_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_439_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   fdtubeprofile_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new fdtubeprofile_class(*(fdtubeprofile_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_fdtubeprofile_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef fdtubeprofile_class G__Tfdtubeprofile_class;
static int G__sdfdrtDict_439_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (fdtubeprofile_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((fdtubeprofile_class*) (soff+(sizeof(fdtubeprofile_class)*i)))->~G__Tfdtubeprofile_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (fdtubeprofile_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((fdtubeprofile_class*) (soff))->~G__Tfdtubeprofile_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_439_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   fdtubeprofile_class* dest = (fdtubeprofile_class*) G__getstructoffset();
   *dest = *(fdtubeprofile_class*) libp->para[0].ref;
   const fdtubeprofile_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* brtubeprofile_class */
static int G__sdfdrtDict_440_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   brtubeprofile_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new brtubeprofile_class[n];
     } else {
       p = new((void*) gvp) brtubeprofile_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new brtubeprofile_class;
     } else {
       p = new((void*) gvp) brtubeprofile_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_brtubeprofile_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_440_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) brtubeprofile_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_440_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) brtubeprofile_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_440_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) brtubeprofile_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_440_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      brtubeprofile_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_440_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((brtubeprofile_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_440_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) brtubeprofile_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_440_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) brtubeprofile_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_440_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) brtubeprofile_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_440_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) brtubeprofile_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_440_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   brtubeprofile_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new brtubeprofile_class(*(brtubeprofile_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_brtubeprofile_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef brtubeprofile_class G__Tbrtubeprofile_class;
static int G__sdfdrtDict_440_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (brtubeprofile_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((brtubeprofile_class*) (soff+(sizeof(brtubeprofile_class)*i)))->~G__Tbrtubeprofile_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (brtubeprofile_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((brtubeprofile_class*) (soff))->~G__Tbrtubeprofile_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_440_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   brtubeprofile_class* dest = (brtubeprofile_class*) G__getstructoffset();
   *dest = *(brtubeprofile_class*) libp->para[0].ref;
   const brtubeprofile_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* lrtubeprofile_class */
static int G__sdfdrtDict_441_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   lrtubeprofile_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new lrtubeprofile_class[n];
     } else {
       p = new((void*) gvp) lrtubeprofile_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new lrtubeprofile_class;
     } else {
       p = new((void*) gvp) lrtubeprofile_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_lrtubeprofile_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_441_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) lrtubeprofile_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_441_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) lrtubeprofile_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_441_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) lrtubeprofile_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_441_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      lrtubeprofile_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_441_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((lrtubeprofile_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_441_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) lrtubeprofile_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_441_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) lrtubeprofile_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_441_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) lrtubeprofile_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_441_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) lrtubeprofile_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_441_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   lrtubeprofile_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new lrtubeprofile_class(*(lrtubeprofile_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_lrtubeprofile_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef lrtubeprofile_class G__Tlrtubeprofile_class;
static int G__sdfdrtDict_441_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (lrtubeprofile_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((lrtubeprofile_class*) (soff+(sizeof(lrtubeprofile_class)*i)))->~G__Tlrtubeprofile_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (lrtubeprofile_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((lrtubeprofile_class*) (soff))->~G__Tlrtubeprofile_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_441_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   lrtubeprofile_class* dest = (lrtubeprofile_class*) G__getstructoffset();
   *dest = *(lrtubeprofile_class*) libp->para[0].ref;
   const lrtubeprofile_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* hbar_class */
static int G__sdfdrtDict_442_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hbar_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hbar_class[n];
     } else {
       p = new((void*) gvp) hbar_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hbar_class;
     } else {
       p = new((void*) gvp) hbar_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_hbar_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_442_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) hbar_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_442_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hbar_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_442_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) hbar_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_442_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      hbar_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_442_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hbar_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_442_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hbar_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_442_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hbar_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_442_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hbar_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_442_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hbar_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_442_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   hbar_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new hbar_class(*(hbar_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_hbar_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef hbar_class G__Thbar_class;
static int G__sdfdrtDict_442_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (hbar_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((hbar_class*) (soff+(sizeof(hbar_class)*i)))->~G__Thbar_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (hbar_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((hbar_class*) (soff))->~G__Thbar_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_442_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hbar_class* dest = (hbar_class*) G__getstructoffset();
   *dest = *(hbar_class*) libp->para[0].ref;
   const hbar_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* hraw1_class */
static int G__sdfdrtDict_443_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hraw1_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hraw1_class[n];
     } else {
       p = new((void*) gvp) hraw1_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hraw1_class;
     } else {
       p = new((void*) gvp) hraw1_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_hraw1_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_443_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) hraw1_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_443_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hraw1_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_443_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) hraw1_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_443_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      hraw1_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_443_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hraw1_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_443_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hraw1_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_443_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hraw1_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_443_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hraw1_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_443_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hraw1_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_443_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   hraw1_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new hraw1_class(*(hraw1_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_hraw1_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef hraw1_class G__Thraw1_class;
static int G__sdfdrtDict_443_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (hraw1_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((hraw1_class*) (soff+(sizeof(hraw1_class)*i)))->~G__Thraw1_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (hraw1_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((hraw1_class*) (soff))->~G__Thraw1_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_443_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hraw1_class* dest = (hraw1_class*) G__getstructoffset();
   *dest = *(hraw1_class*) libp->para[0].ref;
   const hraw1_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* mc04_class */
static int G__sdfdrtDict_444_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mc04_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mc04_class[n];
     } else {
       p = new((void*) gvp) mc04_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mc04_class;
     } else {
       p = new((void*) gvp) mc04_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_mc04_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_444_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) mc04_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_444_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) mc04_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_444_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) mc04_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_444_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      mc04_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_444_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((mc04_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_444_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) mc04_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_444_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) mc04_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_444_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) mc04_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_444_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) mc04_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_444_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   mc04_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new mc04_class(*(mc04_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_mc04_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef mc04_class G__Tmc04_class;
static int G__sdfdrtDict_444_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (mc04_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((mc04_class*) (soff+(sizeof(mc04_class)*i)))->~G__Tmc04_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (mc04_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((mc04_class*) (soff))->~G__Tmc04_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_444_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mc04_class* dest = (mc04_class*) G__getstructoffset();
   *dest = *(mc04_class*) libp->para[0].ref;
   const mc04_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* mcraw_class */
static int G__sdfdrtDict_445_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mcraw_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mcraw_class[n];
     } else {
       p = new((void*) gvp) mcraw_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mcraw_class;
     } else {
       p = new((void*) gvp) mcraw_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_mcraw_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_445_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) mcraw_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_445_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) mcraw_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_445_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) mcraw_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_445_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      mcraw_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_445_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((mcraw_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_445_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) mcraw_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_445_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) mcraw_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_445_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) mcraw_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_445_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) mcraw_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_445_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   mcraw_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new mcraw_class(*(mcraw_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_mcraw_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef mcraw_class G__Tmcraw_class;
static int G__sdfdrtDict_445_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (mcraw_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((mcraw_class*) (soff+(sizeof(mcraw_class)*i)))->~G__Tmcraw_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (mcraw_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((mcraw_class*) (soff))->~G__Tmcraw_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_445_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mcraw_class* dest = (mcraw_class*) G__getstructoffset();
   *dest = *(mcraw_class*) libp->para[0].ref;
   const mcraw_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* stps2_class */
static int G__sdfdrtDict_446_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   stps2_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new stps2_class[n];
     } else {
       p = new((void*) gvp) stps2_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new stps2_class;
     } else {
       p = new((void*) gvp) stps2_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_stps2_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_446_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) stps2_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_446_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) stps2_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_446_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) stps2_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_446_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      stps2_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_446_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((stps2_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_446_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) stps2_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_446_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) stps2_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_446_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) stps2_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_446_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) stps2_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_446_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   stps2_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new stps2_class(*(stps2_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_stps2_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef stps2_class G__Tstps2_class;
static int G__sdfdrtDict_446_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (stps2_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((stps2_class*) (soff+(sizeof(stps2_class)*i)))->~G__Tstps2_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (stps2_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((stps2_class*) (soff))->~G__Tstps2_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_446_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   stps2_class* dest = (stps2_class*) G__getstructoffset();
   *dest = *(stps2_class*) libp->para[0].ref;
   const stps2_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* stpln_class */
static int G__sdfdrtDict_447_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   stpln_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new stpln_class[n];
     } else {
       p = new((void*) gvp) stpln_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new stpln_class;
     } else {
       p = new((void*) gvp) stpln_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_stpln_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_447_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) stpln_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_447_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) stpln_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_447_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) stpln_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_447_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      stpln_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_447_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((stpln_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_447_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) stpln_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_447_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) stpln_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_447_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) stpln_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_447_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) stpln_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_447_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   stpln_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new stpln_class(*(stpln_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_stpln_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef stpln_class G__Tstpln_class;
static int G__sdfdrtDict_447_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (stpln_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((stpln_class*) (soff+(sizeof(stpln_class)*i)))->~G__Tstpln_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (stpln_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((stpln_class*) (soff))->~G__Tstpln_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_447_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   stpln_class* dest = (stpln_class*) G__getstructoffset();
   *dest = *(stpln_class*) libp->para[0].ref;
   const stpln_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* hctim_class */
static int G__sdfdrtDict_448_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hctim_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hctim_class[n];
     } else {
       p = new((void*) gvp) hctim_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hctim_class;
     } else {
       p = new((void*) gvp) hctim_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_hctim_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_448_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) hctim_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_448_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hctim_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_448_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) hctim_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_448_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      hctim_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_448_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hctim_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_448_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hctim_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_448_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hctim_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_448_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hctim_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_448_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hctim_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_448_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   hctim_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new hctim_class(*(hctim_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_hctim_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef hctim_class G__Thctim_class;
static int G__sdfdrtDict_448_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (hctim_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((hctim_class*) (soff+(sizeof(hctim_class)*i)))->~G__Thctim_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (hctim_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((hctim_class*) (soff))->~G__Thctim_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_448_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hctim_class* dest = (hctim_class*) G__getstructoffset();
   *dest = *(hctim_class*) libp->para[0].ref;
   const hctim_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* hcbin_class */
static int G__sdfdrtDict_449_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hcbin_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcbin_class[n];
     } else {
       p = new((void*) gvp) hcbin_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcbin_class;
     } else {
       p = new((void*) gvp) hcbin_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_hcbin_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_449_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) hcbin_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_449_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcbin_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_449_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) hcbin_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_449_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      hcbin_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_449_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcbin_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_449_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcbin_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_449_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcbin_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_449_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcbin_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_449_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcbin_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_449_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   hcbin_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new hcbin_class(*(hcbin_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_hcbin_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef hcbin_class G__Thcbin_class;
static int G__sdfdrtDict_449_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (hcbin_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((hcbin_class*) (soff+(sizeof(hcbin_class)*i)))->~G__Thcbin_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (hcbin_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((hcbin_class*) (soff))->~G__Thcbin_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_449_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hcbin_class* dest = (hcbin_class*) G__getstructoffset();
   *dest = *(hcbin_class*) libp->para[0].ref;
   const hcbin_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* prfc_class */
static int G__sdfdrtDict_450_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   prfc_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new prfc_class[n];
     } else {
       p = new((void*) gvp) prfc_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new prfc_class;
     } else {
       p = new((void*) gvp) prfc_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_prfc_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_450_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) prfc_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_450_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) prfc_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_450_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) prfc_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_450_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      prfc_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_450_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((prfc_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_450_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) prfc_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_450_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) prfc_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_450_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) prfc_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_450_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) prfc_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_450_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   prfc_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new prfc_class(*(prfc_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_prfc_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef prfc_class G__Tprfc_class;
static int G__sdfdrtDict_450_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (prfc_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((prfc_class*) (soff+(sizeof(prfc_class)*i)))->~G__Tprfc_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (prfc_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((prfc_class*) (soff))->~G__Tprfc_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_450_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   prfc_class* dest = (prfc_class*) G__getstructoffset();
   *dest = *(prfc_class*) libp->para[0].ref;
   const prfc_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* fdatmos_param_class */
static int G__sdfdrtDict_451_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   fdatmos_param_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new fdatmos_param_class[n];
     } else {
       p = new((void*) gvp) fdatmos_param_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new fdatmos_param_class;
     } else {
       p = new((void*) gvp) fdatmos_param_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_fdatmos_param_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_451_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) fdatmos_param_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_451_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) fdatmos_param_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_451_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) fdatmos_param_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_451_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fdatmos_param_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_451_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((fdatmos_param_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_451_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) fdatmos_param_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_451_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) fdatmos_param_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_451_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) fdatmos_param_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_451_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) fdatmos_param_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_451_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   fdatmos_param_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new fdatmos_param_class(*(fdatmos_param_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_fdatmos_param_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef fdatmos_param_class G__Tfdatmos_param_class;
static int G__sdfdrtDict_451_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (fdatmos_param_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((fdatmos_param_class*) (soff+(sizeof(fdatmos_param_class)*i)))->~G__Tfdatmos_param_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (fdatmos_param_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((fdatmos_param_class*) (soff))->~G__Tfdatmos_param_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_451_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   fdatmos_param_class* dest = (fdatmos_param_class*) G__getstructoffset();
   *dest = *(fdatmos_param_class*) libp->para[0].ref;
   const fdatmos_param_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* gdas_class */
static int G__sdfdrtDict_452_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   gdas_class* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new gdas_class[n];
     } else {
       p = new((void*) gvp) gdas_class[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new gdas_class;
     } else {
       p = new((void*) gvp) gdas_class;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_gdas_class));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_452_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) gdas_class::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_452_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) gdas_class::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_452_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) gdas_class::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_452_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      gdas_class::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_452_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((gdas_class*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_452_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) gdas_class::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_452_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) gdas_class::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_452_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) gdas_class::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_452_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) gdas_class::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sdfdrtDict_452_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   gdas_class* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new gdas_class(*(gdas_class*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_gdas_class));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef gdas_class G__Tgdas_class;
static int G__sdfdrtDict_452_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (gdas_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((gdas_class*) (soff+(sizeof(gdas_class)*i)))->~G__Tgdas_class();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (gdas_class*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((gdas_class*) (soff))->~G__Tgdas_class();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sdfdrtDict_452_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   gdas_class* dest = (gdas_class*) G__getstructoffset();
   *dest = *(gdas_class*) libp->para[0].ref;
   const gdas_class& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > */
static int G__sdfdrtDict_454_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::reference obj = ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->at((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::const_reference obj = ((const vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->at((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator* pobj;
         vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator xobj = ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator* pobj;
         vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator xobj = ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::reverse_iterator* pobj;
         vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::reverse_iterator xobj = ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::reverse_iterator* pobj;
         vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::reverse_iterator xobj = ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->resize((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->resize((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type) G__int(libp->para[0]), *((vector<unsigned char,allocator<unsigned char> >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::reference obj = ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->operator[]((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::const_reference obj = ((const vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->operator[]((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >;
     } else {
       p = new((void*) gvp) vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type) G__int(libp->para[0]), *(vector<unsigned char,allocator<unsigned char> >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type) G__int(libp->para[0]), *(vector<unsigned char,allocator<unsigned char> >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >(*(vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >(*(vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >(*((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >(*((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >& obj = ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->operator=(*(vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->reserve((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<unsigned char,allocator<unsigned char> >& obj = ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<unsigned char,allocator<unsigned char> >& obj = ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->push_back(*(vector<unsigned char,allocator<unsigned char> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->swap(*(vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator* pobj;
         vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator xobj = ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->insert(*((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator*) G__int(libp->para[0])), *(vector<unsigned char,allocator<unsigned char> >*) libp->para[1].ref);
         pobj = new vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->insert(*((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->insert(*((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator*) G__int(libp->para[0])), (vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type) G__int(libp->para[1])
, *(vector<unsigned char,allocator<unsigned char> >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->erase(*((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->erase(*((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_454_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > G__TvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR;
static int G__sdfdrtDict_454_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) (soff+(sizeof(vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >)*i)))->~G__TvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) (soff))->~G__TvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > > */
static int G__sdfdrtDict_458_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::reference obj = ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->at((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::const_reference obj = ((const vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->at((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator* pobj;
         vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator xobj = ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator* pobj;
         vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator xobj = ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::reverse_iterator* pobj;
         vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::reverse_iterator xobj = ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::reverse_iterator* pobj;
         vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::reverse_iterator xobj = ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->resize((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->resize((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type) G__int(libp->para[0]), *((vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::reference obj = ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->operator[]((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::const_reference obj = ((const vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->operator[]((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >;
     } else {
       p = new((void*) gvp) vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type) G__int(libp->para[0]), *(vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type) G__int(libp->para[0]), *(vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >(*(vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >(*(vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >(*((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >(*((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >& obj = ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->operator=(*(vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->reserve((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >& obj = ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >& obj = ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->push_back(*(vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->swap(*(vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator* pobj;
         vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator xobj = ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->insert(*((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator*) G__int(libp->para[0])), *(vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) libp->para[1].ref);
         pobj = new vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->insert(*((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator*) G__int(libp->para[0])), *((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->insert(*((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator*) G__int(libp->para[0])), (vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type) G__int(libp->para[1])
, *(vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->erase(*((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->erase(*((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator*) G__int(libp->para[0])), *((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_458_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > > G__TvectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR;
static int G__sdfdrtDict_458_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) (soff+(sizeof(vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >)*i)))->~G__TvectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*) (soff))->~G__TvectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > */
static int G__sdfdrtDict_462_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::reference obj = ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->at((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::const_reference obj = ((const vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->at((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator* pobj;
         vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator xobj = ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator* pobj;
         vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator xobj = ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::reverse_iterator* pobj;
         vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::reverse_iterator xobj = ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::reverse_iterator* pobj;
         vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::reverse_iterator xobj = ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->resize((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->resize((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type) G__int(libp->para[0]), *((vector<char,allocator<char> >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::reference obj = ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->operator[]((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::const_reference obj = ((const vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->operator[]((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >;
     } else {
       p = new((void*) gvp) vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type) G__int(libp->para[0]), *(vector<char,allocator<char> >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type) G__int(libp->para[0]), *(vector<char,allocator<char> >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >(*(vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >(*(vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >(*((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >(*((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >& obj = ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->operator=(*(vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->reserve((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<char,allocator<char> >& obj = ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<char,allocator<char> >& obj = ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->push_back(*(vector<char,allocator<char> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->swap(*(vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator* pobj;
         vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator xobj = ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->insert(*((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator*) G__int(libp->para[0])), *(vector<char,allocator<char> >*) libp->para[1].ref);
         pobj = new vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->insert(*((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->insert(*((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator*) G__int(libp->para[0])), (vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type) G__int(libp->para[1])
, *(vector<char,allocator<char> >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->erase(*((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->erase(*((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_462_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > G__TvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR;
static int G__sdfdrtDict_462_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) (soff+(sizeof(vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >)*i)))->~G__TvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) (soff))->~G__TvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > > */
static int G__sdfdrtDict_466_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::reference obj = ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->at((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::const_reference obj = ((const vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->at((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator* pobj;
         vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator xobj = ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator* pobj;
         vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator xobj = ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::reverse_iterator* pobj;
         vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::reverse_iterator xobj = ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::reverse_iterator* pobj;
         vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::reverse_iterator xobj = ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->resize((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->resize((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type) G__int(libp->para[0]), *((vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::reference obj = ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->operator[]((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::const_reference obj = ((const vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->operator[]((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >;
     } else {
       p = new((void*) gvp) vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type) G__int(libp->para[0]), *(vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type) G__int(libp->para[0]), *(vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >(*(vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >(*(vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >(*((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >(*((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >& obj = ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->operator=(*(vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->reserve((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >& obj = ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >& obj = ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->push_back(*(vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->swap(*(vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator* pobj;
         vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator xobj = ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->insert(*((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator*) G__int(libp->para[0])), *(vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) libp->para[1].ref);
         pobj = new vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->insert(*((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator*) G__int(libp->para[0])), *((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->insert(*((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator*) G__int(libp->para[0])), (vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type) G__int(libp->para[1])
, *(vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->erase(*((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->erase(*((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator*) G__int(libp->para[0])), *((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_466_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > > G__TvectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR;
static int G__sdfdrtDict_466_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) (soff+(sizeof(vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >)*i)))->~G__TvectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*) (soff))->~G__TvectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > > */
static int G__sdfdrtDict_470_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::reference obj = ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->at((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::const_reference obj = ((const vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->at((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator* pobj;
         vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator xobj = ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator* pobj;
         vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator xobj = ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::reverse_iterator* pobj;
         vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::reverse_iterator xobj = ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::reverse_iterator* pobj;
         vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::reverse_iterator xobj = ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->resize((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->resize((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type) G__int(libp->para[0]), *((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::reference obj = ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->operator[]((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::const_reference obj = ((const vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->operator[]((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >;
     } else {
       p = new((void*) gvp) vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type) G__int(libp->para[0]), *(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type) G__int(libp->para[0]), *(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >(*(vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >(*(vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >(*((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >(*((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >& obj = ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->operator=(*(vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->reserve((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >& obj = ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >& obj = ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->push_back(*(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->swap(*(vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator* pobj;
         vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator xobj = ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->insert(*((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator*) G__int(libp->para[0])), *(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) libp->para[1].ref);
         pobj = new vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->insert(*((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator*) G__int(libp->para[0])), *((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->insert(*((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator*) G__int(libp->para[0])), (vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type) G__int(libp->para[1])
, *(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->erase(*((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->erase(*((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator*) G__int(libp->para[0])), *((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sdfdrtDict_470_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > > G__TvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR;
static int G__sdfdrtDict_470_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) (soff+(sizeof(vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >)*i)))->~G__TvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*) (soff))->~G__TvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* dstbank_class */

/* talex00_class */

/* vector<int,allocator<int> > */

/* vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > */

/* vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > > */

/* vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > */

/* vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > > */

/* rusdraw_class */

/* rusdmc_class */

/* rusdmc1_class */

/* showlib_class */

/* bsdinfo_class */

/* sdtrgbk_class */

/* vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > */

/* vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > > */

/* SDEventSubData_class */

/* tasdevent_class */

/* vector<SDEventSubData_class,allocator<SDEventSubData_class> > */

/* SDCalibHostData_class */

/* SDCalibSubData_class */

/* vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > */

/* SDCalibWeatherData_class */

/* tasdcalib_class */

/* vector<SDCalibHostData_class,allocator<SDCalibHostData_class> > */

/* vector<SDCalibSubData_class,allocator<SDCalibSubData_class> > */

/* vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> > */

/* SDCalibevData_class */

/* SDCalibevWeatherData_class */

/* SDCalibevSimInfo_class */

/* tasdcalibev_class */

/* vector<SDCalibevData_class,allocator<SDCalibevData_class> > */

/* vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> > */

/* rufptn_class */

/* rusdgeom_class */

/* rufldf_class */

/* etrack_class */

/* atmpar_class */

/* fdraw_class */

/* brraw_class */

/* lrraw_class */

/* fdplane_class */

/* brplane_class */

/* lrplane_class */

/* fdprofile_class */

/* brprofile_class */

/* lrprofile_class */

/* fdtubeprofile_class */

/* brtubeprofile_class */

/* lrtubeprofile_class */

/* hbar_class */

/* hraw1_class */

/* mc04_class */

/* mcraw_class */

/* stps2_class */

/* stpln_class */

/* hctim_class */

/* hcbin_class */

/* prfc_class */

/* fdatmos_param_class */

/* gdas_class */

/* vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > */

/* vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > > */

/* vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > */

/* vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > > */

/* vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncsdfdrtDict {
 public:
  G__Sizep2memfuncsdfdrtDict(): p(&G__Sizep2memfuncsdfdrtDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncsdfdrtDict::*p)();
};

size_t G__get_sizep2memfuncsdfdrtDict()
{
  G__Sizep2memfuncsdfdrtDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancesdfdrtDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class))) {
     dstbank_class *G__Lderived;
     G__Lderived=(dstbank_class*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_talex00_class))) {
     talex00_class *G__Lderived;
     G__Lderived=(talex00_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_talex00_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_talex00_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_talex00_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdraw_class))) {
     rusdraw_class *G__Lderived;
     G__Lderived=(rusdraw_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdraw_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdraw_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdraw_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc_class))) {
     rusdmc_class *G__Lderived;
     G__Lderived=(rusdmc_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc1_class))) {
     rusdmc1_class *G__Lderived;
     G__Lderived=(rusdmc1_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc1_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc1_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc1_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_showlib_class))) {
     showlib_class *G__Lderived;
     G__Lderived=(showlib_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_showlib_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_showlib_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_showlib_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_bsdinfo_class))) {
     bsdinfo_class *G__Lderived;
     G__Lderived=(bsdinfo_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_bsdinfo_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_bsdinfo_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_bsdinfo_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_sdtrgbk_class))) {
     sdtrgbk_class *G__Lderived;
     G__Lderived=(sdtrgbk_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_sdtrgbk_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_sdtrgbk_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_sdtrgbk_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class))) {
     SDEventSubData_class *G__Lderived;
     G__Lderived=(SDEventSubData_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_tasdevent_class))) {
     tasdevent_class *G__Lderived;
     G__Lderived=(tasdevent_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_tasdevent_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_tasdevent_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_tasdevent_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class))) {
     SDCalibHostData_class *G__Lderived;
     G__Lderived=(SDCalibHostData_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class))) {
     SDCalibSubData_class *G__Lderived;
     G__Lderived=(SDCalibSubData_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalib_class))) {
     tasdcalib_class *G__Lderived;
     G__Lderived=(tasdcalib_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalib_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalib_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalib_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class))) {
     SDCalibevData_class *G__Lderived;
     G__Lderived=(SDCalibevData_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class))) {
     SDCalibevWeatherData_class *G__Lderived;
     G__Lderived=(SDCalibevWeatherData_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevSimInfo_class))) {
     SDCalibevSimInfo_class *G__Lderived;
     G__Lderived=(SDCalibevSimInfo_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevSimInfo_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevSimInfo_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevSimInfo_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalibev_class))) {
     tasdcalibev_class *G__Lderived;
     G__Lderived=(tasdcalibev_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalibev_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalibev_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalibev_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_rufptn_class))) {
     rufptn_class *G__Lderived;
     G__Lderived=(rufptn_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rufptn_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rufptn_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rufptn_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdgeom_class))) {
     rusdgeom_class *G__Lderived;
     G__Lderived=(rusdgeom_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdgeom_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdgeom_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdgeom_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_rufldf_class))) {
     rufldf_class *G__Lderived;
     G__Lderived=(rufldf_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rufldf_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rufldf_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rufldf_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_etrack_class))) {
     etrack_class *G__Lderived;
     G__Lderived=(etrack_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_etrack_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_etrack_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_etrack_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_atmpar_class))) {
     atmpar_class *G__Lderived;
     G__Lderived=(atmpar_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_atmpar_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_atmpar_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_atmpar_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_fdraw_class))) {
     fdraw_class *G__Lderived;
     G__Lderived=(fdraw_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdraw_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdraw_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdraw_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_brraw_class))) {
     brraw_class *G__Lderived;
     G__Lderived=(brraw_class*)0x1000;
     {
       fdraw_class *G__Lpbase=(fdraw_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brraw_class),G__get_linked_tagnum(&G__sdfdrtDictLN_fdraw_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brraw_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brraw_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brraw_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_lrraw_class))) {
     lrraw_class *G__Lderived;
     G__Lderived=(lrraw_class*)0x1000;
     {
       fdraw_class *G__Lpbase=(fdraw_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrraw_class),G__get_linked_tagnum(&G__sdfdrtDictLN_fdraw_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrraw_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrraw_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrraw_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_fdplane_class))) {
     fdplane_class *G__Lderived;
     G__Lderived=(fdplane_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdplane_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdplane_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdplane_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_brplane_class))) {
     brplane_class *G__Lderived;
     G__Lderived=(brplane_class*)0x1000;
     {
       fdplane_class *G__Lpbase=(fdplane_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brplane_class),G__get_linked_tagnum(&G__sdfdrtDictLN_fdplane_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brplane_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brplane_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brplane_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_lrplane_class))) {
     lrplane_class *G__Lderived;
     G__Lderived=(lrplane_class*)0x1000;
     {
       fdplane_class *G__Lpbase=(fdplane_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrplane_class),G__get_linked_tagnum(&G__sdfdrtDictLN_fdplane_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrplane_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrplane_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrplane_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_fdprofile_class))) {
     fdprofile_class *G__Lderived;
     G__Lderived=(fdprofile_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_brprofile_class))) {
     brprofile_class *G__Lderived;
     G__Lderived=(brprofile_class*)0x1000;
     {
       fdprofile_class *G__Lpbase=(fdprofile_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_fdprofile_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_lrprofile_class))) {
     lrprofile_class *G__Lderived;
     G__Lderived=(lrprofile_class*)0x1000;
     {
       fdprofile_class *G__Lpbase=(fdprofile_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_fdprofile_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_fdtubeprofile_class))) {
     fdtubeprofile_class *G__Lderived;
     G__Lderived=(fdtubeprofile_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdtubeprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdtubeprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdtubeprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_brtubeprofile_class))) {
     brtubeprofile_class *G__Lderived;
     G__Lderived=(brtubeprofile_class*)0x1000;
     {
       fdtubeprofile_class *G__Lpbase=(fdtubeprofile_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brtubeprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_fdtubeprofile_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brtubeprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brtubeprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brtubeprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_lrtubeprofile_class))) {
     lrtubeprofile_class *G__Lderived;
     G__Lderived=(lrtubeprofile_class*)0x1000;
     {
       fdtubeprofile_class *G__Lpbase=(fdtubeprofile_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrtubeprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_fdtubeprofile_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrtubeprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrtubeprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrtubeprofile_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_hbar_class))) {
     hbar_class *G__Lderived;
     G__Lderived=(hbar_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_hbar_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_hbar_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_hbar_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_hraw1_class))) {
     hraw1_class *G__Lderived;
     G__Lderived=(hraw1_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_hraw1_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_hraw1_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_hraw1_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_mc04_class))) {
     mc04_class *G__Lderived;
     G__Lderived=(mc04_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_mc04_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_mc04_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_mc04_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_mcraw_class))) {
     mcraw_class *G__Lderived;
     G__Lderived=(mcraw_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_mcraw_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_mcraw_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_mcraw_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_stps2_class))) {
     stps2_class *G__Lderived;
     G__Lderived=(stps2_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_stps2_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_stps2_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_stps2_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_stpln_class))) {
     stpln_class *G__Lderived;
     G__Lderived=(stpln_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_stpln_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_stpln_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_stpln_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_hctim_class))) {
     hctim_class *G__Lderived;
     G__Lderived=(hctim_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_hctim_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_hctim_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_hctim_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_hcbin_class))) {
     hcbin_class *G__Lderived;
     G__Lderived=(hcbin_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_hcbin_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_hcbin_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_hcbin_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_prfc_class))) {
     prfc_class *G__Lderived;
     G__Lderived=(prfc_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_prfc_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_prfc_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_prfc_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_fdatmos_param_class))) {
     fdatmos_param_class *G__Lderived;
     G__Lderived=(fdatmos_param_class*)0x1000;
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdatmos_param_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdatmos_param_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdatmos_param_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sdfdrtDictLN_gdas_class))) {
     gdas_class *G__Lderived;
     G__Lderived=(gdas_class*)0x1000;
     {
       fdatmos_param_class *G__Lpbase=(fdatmos_param_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_gdas_class),G__get_linked_tagnum(&G__sdfdrtDictLN_fdatmos_param_class),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       dstbank_class *G__Lpbase=(dstbank_class*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_gdas_class),G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_gdas_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_gdas_class),G__get_linked_tagnum(&G__sdfdrtDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablesdfdrtDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("value_type",99,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",67,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",67,-1,256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",99,-1,1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",99,-1,257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEcharcOallocatorlEchargRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEcharcOallocatorlEchargRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEcharcOallocatorlEchargRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEcharcOallocatorlEchargRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",115,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",83,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",83,-1,256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",115,-1,1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",115,-1,257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEshortcOallocatorlEshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEshortcOallocatorlEshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEshortcOallocatorlEshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEshortcOallocatorlEshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",98,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",66,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",66,-1,256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",98,-1,1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",98,-1,257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",102,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",70,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",70,-1,256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",102,-1,1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",102,-1,257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",100,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",68,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",68,-1,256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",100,-1,1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",100,-1,257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",105,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",73,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",73,-1,256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",105,-1,1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",105,-1,257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<Int_t> >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<Int_t> > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Double_t>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<Double_t> >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<Double_t> > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Float_t>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Short_t>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<Short_t> >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<short,allocator<short> > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<Short_t> > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Char_t>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SDEventSubData_class>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class),1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class),257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<Float_t> >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<float,allocator<float> > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SDCalibHostData_class>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class),1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class),257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SDCalibSubData_class>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class),1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class),257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SDCalibWeatherData_class>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibWeatherData_class),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibWeatherData_class),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibWeatherData_class),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibWeatherData_class),1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibWeatherData_class),257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SDCalibevData_class>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class),1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class),257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SDCalibevWeatherData_class>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class),1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class),257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UShort_t>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<UShort_t> >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<unsigned short,allocator<unsigned short> > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<UShort_t> > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Byte_t>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<Byte_t> >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR),1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR),257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<unsigned char,allocator<unsigned char> > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<Byte_t> > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR),1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR),257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<Char_t> >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR),1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR),257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<char,allocator<char> > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<Char_t> > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR),1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR),257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<Float_t> > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),1,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),257,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > >",117,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* dstbank_class */
static void G__setup_memvardstbank_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class));
   { dstbank_class *p; p=(dstbank_class*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"dstbank_id=",0,"ID of the DST bank");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"dstbank_version=",0,"Version of the DST bank");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* talex00_class */
static void G__setup_memvartalex00_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_talex00_class));
   { talex00_class *p; p=(talex00_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->event_num)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"event_num=",0,"event number");
   G__memvar_setup((void*)((long)(&p->event_code)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"event_code=",0,"1=data, 0=Monte Carlo");
   G__memvar_setup((void*)((long)(&p->site)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"site=",0,"site bitflag index (bit0=BR,1=LR,2=SK,[3-8]=[BF,DM,KM,SC,SN,SR],bit9=MD");
   G__memvar_setup((void*)((long)(&p->run_id)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"run_id=",0,"[TALEX00_NCT] run IDs of the raw data files from each tower, -1 if irreleveant");
   G__memvar_setup((void*)((long)(&p->trig_id)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"trig_id=",0,"[TALEX00_NCT] trigger IDs for each tower, -1 if irrelevant");
   G__memvar_setup((void*)((long)(&p->errcode)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"errcode=",0,"should be zero if there were no readout problems");
   G__memvar_setup((void*)((long)(&p->yymmdd)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"yymmdd=",0,"year, month, day");
   G__memvar_setup((void*)((long)(&p->hhmmss)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hhmmss=",0,"hour minut second");
   G__memvar_setup((void*)((long)(&p->usec)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"usec=",0,"usecond");
   G__memvar_setup((void*)((long)(&p->monyymmdd)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"monyymmdd=",0,"yymmdd at the beginning of the mon. cycle used in this event");
   G__memvar_setup((void*)((long)(&p->monhhmmss)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"monhhmmss=",0,"hhmmss at the beginning of the mon. cycle used in this event");
   G__memvar_setup((void*)((long)(&p->nofwf)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nofwf=",0,"number of waveforms in the event");
   G__memvar_setup((void*)((long)(&p->nretry)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"nretry=",0,"number of retries to get the waveform");
   G__memvar_setup((void*)((long)(&p->wf_id)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"wf_id=",0,"waveform id in the trigger");
   G__memvar_setup((void*)((long)(&p->trig_code)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"trig_code=",0,"level1 trigger code");
   G__memvar_setup((void*)((long)(&p->xxyy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"xxyy=",0,"detector that was hit (XXYY)");
   G__memvar_setup((void*)((long)(&p->clkcnt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"clkcnt=",0,"GPS clock count at the waveform beginning");
   G__memvar_setup((void*)((long)(&p->mclkcnt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mclkcnt=",0,"max clock count for detector, around 50E6 ");
   G__memvar_setup((void*)((long)(&p->fadcti)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"fadcti=",0,"fadc trace integral, for upper and lower");
   G__memvar_setup((void*)((long)(&p->fadcav)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"fadcav=",0,"average of the FADC trace");
   G__memvar_setup((void*)((long)(&p->fadc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<Int_t> > >"),-1,1,"fadc=",0,"fadc trace for upper and lower");
   G__memvar_setup((void*)((long)(&p->pchmip)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"pchmip=",0,"peak channel of 1MIP histograms");
   G__memvar_setup((void*)((long)(&p->pchped)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"pchped=",0,"peak channel of pedestal histograms");
   G__memvar_setup((void*)((long)(&p->lhpchmip)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"lhpchmip=",0,"left half-peak channel for 1mip histogram");
   G__memvar_setup((void*)((long)(&p->lhpchped)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"lhpchped=",0,"left half-peak channel of pedestal histogram");
   G__memvar_setup((void*)((long)(&p->rhpchmip)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"rhpchmip=",0,"right half-peak channel for 1mip histogram");
   G__memvar_setup((void*)((long)(&p->rhpchped)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"rhpchped=",0,"right half-peak channel of pedestal histograms");
   G__memvar_setup((void*)((long)(&p->mftndof)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"mftndof=",0,"number of degrees of freedom in 1MIP fit");
   G__memvar_setup((void*)((long)(&p->mip)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"mip=",0,"1MIP value (ped. subtracted)");
   G__memvar_setup((void*)((long)(&p->mftchi2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"mftchi2=",0,"chi2 of the 1MIP fit");
   G__memvar_setup((void*)((long)(&p->mftp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<Double_t> > >"),-1,1,"mftp=",0,"1MIP fit parameters");
   G__memvar_setup((void*)((long)(&p->mftpe)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<Double_t> > >"),-1,1,"mftpe=",0,"Errors on 1MIP fit parameters");
   G__memvar_setup((void*)((long)(&p->lat_lon_alt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"lat_lon_alt=",0,"GPS coordinates: latitude, longitude, altitude");
   G__memvar_setup((void*)((long)(&p->xyz_cor_clf)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"xyz_cor_clf=",0,"XYZ coordinates in CLF frame:");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<int,allocator<int> > */
static void G__setup_memvarvectorlEintcOallocatorlEintgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR));
   { vector<int,allocator<int> > *p; p=(vector<int,allocator<int> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > */
static void G__setup_memvarvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   { vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > *p; p=(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > > */
static void G__setup_memvarvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR));
   { vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > > *p; p=(vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > */
static void G__setup_memvarvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   { vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > *p; p=(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > > */
static void G__setup_memvarvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   { vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > > *p; p=(vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* rusdraw_class */
static void G__setup_memvarrusdraw_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdraw_class));
   { rusdraw_class *p; p=(rusdraw_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->event_num)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"event_num=",0,"event number");
   G__memvar_setup((void*)((long)(&p->event_code)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"event_code=",0,"1=data, 0=Monte Carlo");
   G__memvar_setup((void*)((long)(&p->site)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"site=",0,"BR=0,LR=1,SK=2,BRLR=3,BRSK=4,LRSK=5,BRLRSK=6");
   G__memvar_setup((void*)((long)(&p->run_id)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"run_id=",0,"run number(s), -1 if irrelevant");
   G__memvar_setup((void*)((long)(&p->trig_id)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"trig_id=",0,"event number in the raw ascii data file ");
   G__memvar_setup((void*)((long)(&p->errcode)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"errcode=",0,"should be zero if there were no readout problems");
   G__memvar_setup((void*)((long)(&p->yymmdd)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"yymmdd=",0,"year, month, day");
   G__memvar_setup((void*)((long)(&p->hhmmss)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hhmmss=",0,"hour minut second");
   G__memvar_setup((void*)((long)(&p->usec)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"usec=",0,"usecond");
   G__memvar_setup((void*)((long)(&p->monyymmdd)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"monyymmdd=",0,"yymmdd at the beginning of the mon. cycle used in this event");
   G__memvar_setup((void*)((long)(&p->monhhmmss)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"monhhmmss=",0,"hhmmss at the beginning of the mon. cycle used in this event");
   G__memvar_setup((void*)((long)(&p->nofwf)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nofwf=",0,"number of waveforms in the event");
   G__memvar_setup((void*)((long)(&p->nretry)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"nretry=",0,"number of retries to get the waveform");
   G__memvar_setup((void*)((long)(&p->wf_id)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"wf_id=",0,"waveform id in the trigger");
   G__memvar_setup((void*)((long)(&p->trig_code)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"trig_code=",0,"level1 trigger code");
   G__memvar_setup((void*)((long)(&p->xxyy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"xxyy=",0,"detector that was hit (XXYY)");
   G__memvar_setup((void*)((long)(&p->clkcnt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"clkcnt=",0,"GPS clock count at the waveform beginning");
   G__memvar_setup((void*)((long)(&p->mclkcnt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mclkcnt=",0,"max clock count for detector, around 50E6 ");
   G__memvar_setup((void*)((long)(&p->fadcti)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"fadcti=",0,"fadc trace integral, for upper and lower");
   G__memvar_setup((void*)((long)(&p->fadcav)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"fadcav=",0,"average of the FADC trace");
   G__memvar_setup((void*)((long)(&p->fadc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<Int_t> > >"),-1,1,"fadc=",0,"fadc trace for upper and lower");
   G__memvar_setup((void*)((long)(&p->pchmip)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"pchmip=",0,"peak channel of 1MIP histograms");
   G__memvar_setup((void*)((long)(&p->pchped)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"pchped=",0,"peak channel of pedestal histograms");
   G__memvar_setup((void*)((long)(&p->lhpchmip)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"lhpchmip=",0,"left half-peak channel for 1mip histogram");
   G__memvar_setup((void*)((long)(&p->lhpchped)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"lhpchped=",0,"left half-peak channel of pedestal histogram");
   G__memvar_setup((void*)((long)(&p->rhpchmip)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"rhpchmip=",0,"right half-peak channel for 1mip histogram");
   G__memvar_setup((void*)((long)(&p->rhpchped)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"rhpchped=",0,"right half-peak channel of pedestal histograms");
   G__memvar_setup((void*)((long)(&p->mftndof)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"mftndof=",0,"number of degrees of freedom in 1MIP fit");
   G__memvar_setup((void*)((long)(&p->mip)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"mip=",0,"1MIP value (ped. subtracted)");
   G__memvar_setup((void*)((long)(&p->mftchi2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"mftchi2=",0,"chi2 of the 1MIP fit");
   G__memvar_setup((void*)((long)(&p->mftp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<Double_t> > >"),-1,1,"mftp=",0,"1MIP fit parameters");
   G__memvar_setup((void*)((long)(&p->mftpe)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<Double_t> > >"),-1,1,"mftpe=",0,"Errors on 1MIP fit parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* rusdmc_class */
static void G__setup_memvarrusdmc_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc_class));
   { rusdmc_class *p; p=(rusdmc_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->event_num)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"event_num=",0,"event number");
   G__memvar_setup((void*)((long)(&p->parttype)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"parttype=",0,"Corsika particle code [proton=14, iron=5626, for others, consult Corsika manual]");
   G__memvar_setup((void*)((long)(&p->corecounter)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"corecounter=",0,"counter closest to core");
   G__memvar_setup((void*)((long)(&p->tc)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"tc=",0,"clock count corresponding to shower front passing through core position");
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"energy=",0,"total energy of primary particle [EeV]");
   G__memvar_setup((void*)((long)(&p->height)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"height=",0,"height of first interation [cm]");
   G__memvar_setup((void*)((long)(&p->theta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"theta=",0,"zenith angle [rad]");
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,"azimuthal angle (N of E) [rad]");
   G__memvar_setup((void*)((long)(&p->corexyz)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"corexyz=",0,"[3] 3D core position in CLF reference frame [cm]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* rusdmc1_class */
static void G__setup_memvarrusdmc1_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc1_class));
   { rusdmc1_class *p; p=(rusdmc1_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->xcore)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"xcore=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ycore)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ycore=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t0)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t0=",0,"Time of the core hitting the ground, [1200m], ");
   G__memvar_setup((void*)((long)(&p->bdist)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"bdist=",0,"Distance of the core from the edge of the array.");
   G__memvar_setup((void*)((long)(&p->tdistbr)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tdistbr=",0,"Distance of the core position from BR T-Shaped boundary,");
   G__memvar_setup((void*)((long)(&p->tdistlr)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tdistlr=",0,"same for LR");
   G__memvar_setup((void*)((long)(&p->tdistsk)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tdistsk=",0,"same for SK");
   G__memvar_setup((void*)((long)(&p->tdist)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tdist=",0,"Closest distance to any T-shaped boundary (BR,LR,SK)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* showlib_class */
static void G__setup_memvarshowlib_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_showlib_class));
   { showlib_class *p; p=(showlib_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->code)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"code=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->number)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"number=",0,"Number of shower in CORSIKA run");
   G__memvar_setup((void*)((long)(&p->angle)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"angle=",0,"Generation angle (radians)");
   G__memvar_setup((void*)((long)(&p->particle)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"particle=",0,"Primary particle (CORSIKA convention)");
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"energy=",0,"Energy of primary particle in GeV");
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"first=",0,"(Slant) Depth of first (actual) interaction in g/cm^2");
   G__memvar_setup((void*)((long)(&p->nmax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nmax=",0,"GH fit parameter, maximum shower size divided by 1e9");
   G__memvar_setup((void*)((long)(&p->x0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x0=",0,"GH fit parameter, shower starting depth in g/cm^2");
   G__memvar_setup((void*)((long)(&p->xmax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"xmax=",0,"GH fit parameter, depth of shower max in g/cm^2");
   G__memvar_setup((void*)((long)(&p->lambda)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lambda=",0,"GH fit parameter, shower development rate in g/cm^2");
   G__memvar_setup((void*)((long)(&p->chi2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chi2=",0,"Chi-square of CORSIKA's fit of the actual shower to the GH profile");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* bsdinfo_class */
static void G__setup_memvarbsdinfo_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_bsdinfo_class));
   { bsdinfo_class *p; p=(bsdinfo_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->yymmdd)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"yymmdd=",0,"date, YYMMDD format");
   G__memvar_setup((void*)((long)(&p->hhmmss)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hhmmss=",0,"time, HHMMSS format");
   G__memvar_setup((void*)((long)(&p->usec)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"usec=",0,"micro second");
   G__memvar_setup((void*)((long)(&p->nbsds)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nbsds=",0,"number of SDs that are part of event but not working properly");
   G__memvar_setup((void*)((long)(&p->xxyy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"xxyy=",0,"[BSDINFO_NBSDS]  position IDs of bad SDs");
   G__memvar_setup((void*)((long)(&p->bitf)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"bitf=",0,"[BSDINFO_NBSDS]  bit flag that describes what's wrong with the SD, ");
   G__memvar_setup((void*)((long)(&p->nsdsout)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nsdsout=",0,"number of SDs either completely out (absent in the live detector list during event)");
   G__memvar_setup((void*)((long)(&p->xxyyout)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"xxyyout=",0,"SDs that are completely out (can't participate in event readout)");
   G__memvar_setup((void*)((long)(&p->bitfout)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"bitfout=",0,"Bit flags of SDs that are considered as completely out, if not available then 0xFFFF");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* sdtrgbk_class */
static void G__setup_memvarsdtrgbk_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_sdtrgbk_class));
   { sdtrgbk_class *p; p=(sdtrgbk_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->secf)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"secf=",0,"[SDTRGBK_NSD][SDTRGBK_NSIGPSD]");
   G__memvar_setup((void*)((long)(&p->tlim)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"tlim=",0,"[SDTRGBK_NSD][2]");
   G__memvar_setup((void*)((long)(&p->raw_bankid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"raw_bankid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ich)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Short_t> >"),-1,1,"ich=",0,"[SDTRGBK_NSD][SDTRGBK_NSIGPSD]");
   G__memvar_setup((void*)((long)(&p->q)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<Short_t> > >"),-1,1,"q=",0,"[SDTRGBK_NSD][SDTRGBK_NSIGPSD][2]");
   G__memvar_setup((void*)((long)(&p->l1sig_wfindex)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Short_t> >"),-1,1,"l1sig_wfindex=",0,"[SDTRGBK_NSD][SDTRGBK_NSIGPSD]");
   G__memvar_setup((void*)((long)(&p->xxyy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<Short_t>"),-1,1,"xxyy=",0,"[SDTRGBK_NSD] // counter position ID");
   G__memvar_setup((void*)((long)(&p->wfindex_cal)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<Short_t>"),-1,1,"wfindex_cal=",0,"[SDTRGBK_NSD]");
   G__memvar_setup((void*)((long)(&p->nl1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<Short_t>"),-1,1,"nl1=",0,"[SDTRGBK_NSD]");
   G__memvar_setup((void*)((long)(&p->nsd)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"nsd=",0,"number of SDs");
   G__memvar_setup((void*)((long)(&p->n_bad_ped)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"n_bad_ped=",0,"number of SDs with bad pedestals");
   G__memvar_setup((void*)((long)(&p->n_spat_cont)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"n_spat_cont=",0,"number of spatially contiguous SDs");
   G__memvar_setup((void*)((long)(&p->n_isol)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"n_isol=",0,"number of isolated SDs - SDs not taking part in space trigger patterns");
   G__memvar_setup((void*)((long)(&p->n_pot_st_cont)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"n_pot_st_cont=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->n_l1_tg)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"n_l1_tg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dec_ped)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"dec_ped=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->inc_ped)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"inc_ped=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->il2sd)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<Short_t>"),-1,1,"il2sd=",0,"[3] indices of SDs that caused level-2 trigger (within this bank)");
   G__memvar_setup((void*)((long)(&p->il2sd_sig)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<Short_t>"),-1,1,"il2sd_sig=",0,"[3] indices of signals in each SD causing level-2 trigger");
   G__memvar_setup((void*)((long)(&p->ig)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR),G__defined_typename("vector<Char_t>"),-1,1,"ig=",0,"[SDTRGBK_NSD]");
   G__memvar_setup((void*)((long)(&p->trigp)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"trigp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->igevent)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"igevent=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > */
static void G__setup_memvarvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR));
   { vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > *p; p=(vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > > */
static void G__setup_memvarvectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR));
   { vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > > *p; p=(vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* SDEventSubData_class */
static void G__setup_memvarSDEventSubData_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class));
   { SDEventSubData_class *p; p=(SDEventSubData_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->clock)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"clock=",0,"clock count at the trigger timing	");
   G__memvar_setup((void*)((long)(&p->max_clock)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"max_clock=",0,"maximum clock count between 1PPS	  ");
   G__memvar_setup((void*)((long)(&p->lid)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"lid=",0,"logical ID				");
   G__memvar_setup((void*)((long)(&p->usum)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"usum=",0,"summation value of the upper layer	");
   G__memvar_setup((void*)((long)(&p->lsum)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"lsum=",0,"summation value of the lower layer	");
   G__memvar_setup((void*)((long)(&p->uavr)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"uavr=",0,"average of the FADC of the upper layer");
   G__memvar_setup((void*)((long)(&p->lavr)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"lavr=",0,"average of the FADC of the lower layer");
   G__memvar_setup((void*)((long)(&p->wf_id)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"wf_id=",0,"waveform id in the trigger		");
   G__memvar_setup((void*)((long)(&p->num_trgwf)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"num_trgwf=",0,"number of triggered waveforms ");
   G__memvar_setup((void*)((long)(&p->bank)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"bank=",0,"ID of the triggered waveform		");
   G__memvar_setup((void*)((long)(&p->num_retry)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"num_retry=",0,"the number of the retry		");
   G__memvar_setup((void*)((long)(&p->trig_code)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"trig_code=",0,"level-1 trigger code			");
   G__memvar_setup((void*)((long)(&p->wf_error)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"wf_error=",0,"broken waveform data			");
   G__memvar_setup((void*)((long)(&p->uwf)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<Short_t>"),-1,1,"uwf=",0,"waveform of the upper layer ");
   G__memvar_setup((void*)((long)(&p->lwf)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<Short_t>"),-1,1,"lwf=",0,"waveform of the lower layer ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* tasdevent_class */
static void G__setup_memvartasdevent_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_tasdevent_class));
   { tasdevent_class *p; p=(tasdevent_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->event_code)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"event_code=",0,"1=data, 0=Monte Carlo	");
   G__memvar_setup((void*)((long)(&p->run_id)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"run_id=",0,"run id			");
   G__memvar_setup((void*)((long)(&p->site)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"site=",0,"site id			");
   G__memvar_setup((void*)((long)(&p->trig_id)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"trig_id=",0,"trigger ID			");
   G__memvar_setup((void*)((long)(&p->trig_code)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"trig_code=",0,"level-2 trigger code,0 is internal,");
   G__memvar_setup((void*)((long)(&p->code)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"code=",0,"internal trigger code	");
   G__memvar_setup((void*)((long)(&p->num_trgwf)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"num_trgwf=",0,"number of triggered waveform	");
   G__memvar_setup((void*)((long)(&p->num_wf)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"num_wf=",0,"number of aquired waveforms	");
   G__memvar_setup((void*)((long)(&p->bank)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"bank=",0,"bank id			");
   G__memvar_setup((void*)((long)(&p->date)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"date=",0,"triggered date		");
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"time=",0,"triggered time		");
   G__memvar_setup((void*)((long)(&p->date_org)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"date_org=",0,"original triggered date	");
   G__memvar_setup((void*)((long)(&p->time_org)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"time_org=",0,"original triggered time	");
   G__memvar_setup((void*)((long)(&p->usec)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"usec=",0,"triggered usec		");
   G__memvar_setup((void*)((long)(&p->gps_error)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"gps_error=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pos)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pos=",0,"triggered position		");
   G__memvar_setup((void*)((long)(&p->pattern)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"pattern=",0,"trigger pattern		");
   G__memvar_setup((void*)((long)(&p->sub)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR),G__defined_typename("vector<SDEventSubData_class>"),-1,1,"sub=",0,"[tasdevent_ndmax];");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<SDEventSubData_class,allocator<SDEventSubData_class> > */
static void G__setup_memvarvectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR));
   { vector<SDEventSubData_class,allocator<SDEventSubData_class> > *p; p=(vector<SDEventSubData_class,allocator<SDEventSubData_class> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* SDCalibHostData_class */
static void G__setup_memvarSDCalibHostData_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class));
   { SDCalibHostData_class *p; p=(SDCalibHostData_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->site)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"site=",0,"site id ");
   G__memvar_setup((void*)((long)(&p->numTrg)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numTrg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trgBank)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"trgBank=",0,"Trigger bank ID ");
   G__memvar_setup((void*)((long)(&p->trgSec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"trgSec=",0,"Trigger sending time in 10 min.");
   G__memvar_setup((void*)((long)(&p->trgPos)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<Short_t>"),-1,1,"trgPos=",0,"Triggered position ");
   G__memvar_setup((void*)((long)(&p->daqMode)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"daqMode=",0,"daq code from central PC ");
   G__memvar_setup((void*)((long)(&p->miss)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR),G__defined_typename("vector<Char_t>"),-1,1,"miss=",0,"DAQ error or GPS timestamp error");
   G__memvar_setup((void*)((long)(&p->run_id)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<Short_t>"),-1,1,"run_id=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SDCalibSubData_class */
static void G__setup_memvarSDCalibSubData_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class));
   { SDCalibSubData_class *p; p=(SDCalibSubData_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->site)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"site=",0,"site id ");
   G__memvar_setup((void*)((long)(&p->lid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"lid=",0,"position id ");
   G__memvar_setup((void*)((long)(&p->livetime)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"livetime=",0,"livetime in 10 min");
   G__memvar_setup((void*)((long)(&p->warning)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"warning=",0,"condition of sensors and trigger rate.");
   G__memvar_setup((void*)((long)(&p->dontUse)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"dontUse=",0,"bad detector flag.");
   G__memvar_setup((void*)((long)(&p->dataQuality)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"dataQuality=",0,"condtion of data");
   G__memvar_setup((void*)((long)(&p->gpsRunMode)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"gpsRunMode=",0,"1 is 3D fix, 2 is position hold");
   G__memvar_setup((void*)((long)(&p->miss)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR),G__defined_typename("vector<Char_t>"),-1,1,"miss=",0,"comm. error bit field");
   G__memvar_setup((void*)((long)(&p->clockFreq)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"clockFreq=",0,"clock frequency [Hs] ");
   G__memvar_setup((void*)((long)(&p->clockChirp)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"clockChirp=",0,"time deviation of clock frequency [Hs/s] ");
   G__memvar_setup((void*)((long)(&p->clockError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"clockError=",0,"fluctuation of clock [ns]");
   G__memvar_setup((void*)((long)(&p->upedAvr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"upedAvr=",0,"average of pedestal (upper layer) ");
   G__memvar_setup((void*)((long)(&p->lpedAvr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lpedAvr=",0,"average of pedestal (lower layer) ");
   G__memvar_setup((void*)((long)(&p->upedStdev)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"upedStdev=",0,"standard deviation of pedestal");
   G__memvar_setup((void*)((long)(&p->lpedStdev)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lpedStdev=",0,"standard deviation of pedestal");
   G__memvar_setup((void*)((long)(&p->upedChisq)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"upedChisq=",0,"Chi square value (upper layer) ");
   G__memvar_setup((void*)((long)(&p->lpedChisq)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lpedChisq=",0,"Chi square value (lower layer)");
   G__memvar_setup((void*)((long)(&p->umipNonuni)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"umipNonuni=",0,"Non-uniformity (upper layer) ");
   G__memvar_setup((void*)((long)(&p->lmipNonuni)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lmipNonuni=",0,"Non-uniformity (lower layer) ");
   G__memvar_setup((void*)((long)(&p->umipMev2cnt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"umipMev2cnt=",0,"Mev to count conversion factor");
   G__memvar_setup((void*)((long)(&p->lmipMev2cnt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lmipMev2cnt=",0,"Mev to count conversion factor");
   G__memvar_setup((void*)((long)(&p->umipMev2pe)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"umipMev2pe=",0,"Mev to photo-electron conversion factor");
   G__memvar_setup((void*)((long)(&p->lmipMev2pe)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lmipMev2pe=",0,"Mev to photo-electron conversion factor");
   G__memvar_setup((void*)((long)(&p->umipChisq)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"umipChisq=",0,"Chi square value (upper layer) ");
   G__memvar_setup((void*)((long)(&p->lmipChisq)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lmipChisq=",0,"Chi square value (lower layer)");
   G__memvar_setup((void*)((long)(&p->lvl0Rate)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lvl0Rate=",0,"level-0 trigger rate ");
   G__memvar_setup((void*)((long)(&p->lvl1Rate)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lvl1Rate=",0,"level-1 trigger rate ");
   G__memvar_setup((void*)((long)(&p->scinti_temp)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scinti_temp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pchmip)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"pchmip=",0,"peak channel of 1MIP histograms ");
   G__memvar_setup((void*)((long)(&p->pchped)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"pchped=",0,"peak channel of pedestal histograms ");
   G__memvar_setup((void*)((long)(&p->lhpchmip)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"lhpchmip=",0,"left half-peak channel for 1mip histogram ");
   G__memvar_setup((void*)((long)(&p->lhpchped)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"lhpchped=",0,"left half-peak channel of pedestal histogram ");
   G__memvar_setup((void*)((long)(&p->rhpchmip)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"rhpchmip=",0,"right half-peak channel for 1mip histogram ");
   G__memvar_setup((void*)((long)(&p->rhpchped)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"rhpchped=",0,"right half-peak channel of pedestal histograms ");
   G__memvar_setup((void*)((long)(&p->mftndof)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mftndof=",0,"number of degrees of freedom in 1MIP fit ");
   G__memvar_setup((void*)((long)(&p->mip)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"mip=",0,"1MIP value (ped. subtracted) ");
   G__memvar_setup((void*)((long)(&p->mftchi2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"mftchi2=",0,"chi2 of the 1MIP fit ");
   G__memvar_setup((void*)((long)(&p->mftp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Float_t> >"),-1,1,"mftp=",0,"1MIP fit parameters ");
   G__memvar_setup((void*)((long)(&p->mftpe)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Float_t> >"),-1,1,"mftpe=",0,"Errors on 1MIP fit parameters ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > */
static void G__setup_memvarvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   { vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > *p; p=(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* SDCalibWeatherData_class */
static void G__setup_memvarSDCalibWeatherData_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibWeatherData_class));
   { SDCalibWeatherData_class *p; p=(SDCalibWeatherData_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->site)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"site=",0,"0 is BRFD, 1 is LRFD, 4 will be CLF");
   G__memvar_setup((void*)((long)(&p->averageWindSpeed)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"averageWindSpeed=",0,"[m/s]");
   G__memvar_setup((void*)((long)(&p->maximumWindSpeed)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"maximumWindSpeed=",0,"[m/s]");
   G__memvar_setup((void*)((long)(&p->windDirection)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"windDirection=",0,"0 is north, 90 is east [deg]");
   G__memvar_setup((void*)((long)(&p->atmosphericPressure)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"atmosphericPressure=",0,"[hPa]");
   G__memvar_setup((void*)((long)(&p->temperature)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"temperature=",0,"[C]");
   G__memvar_setup((void*)((long)(&p->humidity)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"humidity=",0,"[%RH]");
   G__memvar_setup((void*)((long)(&p->rainfall)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rainfall=",0,"[mm/hour]");
   G__memvar_setup((void*)((long)(&p->numberOfHails)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"numberOfHails=",0,"[hits/cm^2/hour]");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* tasdcalib_class */
static void G__setup_memvartasdcalib_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalib_class));
   { tasdcalib_class *p; p=(tasdcalib_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->num_host)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"num_host=",0,"the number of hosts");
   G__memvar_setup((void*)((long)(&p->num_det)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"num_det=",0,"the number of detectors");
   G__memvar_setup((void*)((long)(&p->num_weather)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"num_weather=",0,"the number of weather stations");
   G__memvar_setup((void*)((long)(&p->date)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"date=",0,"year month day");
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"time=",0,"hour minute second");
   G__memvar_setup((void*)((long)(&p->trgMode)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR),G__defined_typename("vector<Char_t>"),-1,1,"trgMode=",0,"Trigger Mode");
   G__memvar_setup((void*)((long)(&p->host)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR),G__defined_typename("vector<SDCalibHostData_class>"),-1,1,"host=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sub)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR),G__defined_typename("vector<SDCalibSubData_class>"),-1,1,"sub=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->weather)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR),G__defined_typename("vector<SDCalibWeatherData_class>"),-1,1,"weather=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->footer)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"footer=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<SDCalibHostData_class,allocator<SDCalibHostData_class> > */
static void G__setup_memvarvectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR));
   { vector<SDCalibHostData_class,allocator<SDCalibHostData_class> > *p; p=(vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<SDCalibSubData_class,allocator<SDCalibSubData_class> > */
static void G__setup_memvarvectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR));
   { vector<SDCalibSubData_class,allocator<SDCalibSubData_class> > *p; p=(vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> > */
static void G__setup_memvarvectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR));
   { vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> > *p; p=(vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* SDCalibevData_class */
static void G__setup_memvarSDCalibevData_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class));
   { SDCalibevData_class *p; p=(SDCalibevData_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->site)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"site=",0,"site id ");
   G__memvar_setup((void*)((long)(&p->lid)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"lid=",0,"position id ");
   G__memvar_setup((void*)((long)(&p->clock)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"clock=",0,"clock count at the trigger timing	");
   G__memvar_setup((void*)((long)(&p->maxClock)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"maxClock=",0,"maximum clock count between 1PPS	");
   G__memvar_setup((void*)((long)(&p->wfId)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"wfId=",0,"waveform id in the trigger		");
   G__memvar_setup((void*)((long)(&p->numTrgwf)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"numTrgwf=",0,"number of triggered waveforms ");
   G__memvar_setup((void*)((long)(&p->trgCode)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"trgCode=",0,"level-1 trigger code			");
   G__memvar_setup((void*)((long)(&p->wfError)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"wfError=",0,"broken waveform data	or saturate");
   G__memvar_setup((void*)((long)(&p->uwf)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<Short_t>"),-1,1,"uwf=",0,"waveform of the upper layer ");
   G__memvar_setup((void*)((long)(&p->lwf)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<Short_t>"),-1,1,"lwf=",0,"waveform of the lower layer ");
   G__memvar_setup((void*)((long)(&p->clockError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"clockError=",0,"fluctuation of maximum clock count [ns] ");
   G__memvar_setup((void*)((long)(&p->upedAvr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"upedAvr=",0,"average of pedestal (upper) ");
   G__memvar_setup((void*)((long)(&p->lpedAvr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lpedAvr=",0,"average of pedestal (lower) ");
   G__memvar_setup((void*)((long)(&p->upedStdev)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"upedStdev=",0,"standard deviation of pedestal (upper) ");
   G__memvar_setup((void*)((long)(&p->lpedStdev)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lpedStdev=",0,"standard deviation of pedestal (lower) ");
   G__memvar_setup((void*)((long)(&p->umipNonuni)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"umipNonuni=",0,"Non-uniformity (upper layer) ");
   G__memvar_setup((void*)((long)(&p->lmipNonuni)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lmipNonuni=",0,"Non-uniformity (lower layer) ");
   G__memvar_setup((void*)((long)(&p->umipMev2cnt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"umipMev2cnt=",0,"Mev to count conversion factor (upper) ");
   G__memvar_setup((void*)((long)(&p->lmipMev2cnt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lmipMev2cnt=",0,"Mev to count conversion factor (lower) ");
   G__memvar_setup((void*)((long)(&p->umipMev2pe)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"umipMev2pe=",0,"Mev to photo-electron conversion factor");
   G__memvar_setup((void*)((long)(&p->lmipMev2pe)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lmipMev2pe=",0,"Mev to photo-electron conversion factor");
   G__memvar_setup((void*)((long)(&p->lvl0Rate)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lvl0Rate=",0,"level-0 trigger rate ");
   G__memvar_setup((void*)((long)(&p->lvl1Rate)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lvl1Rate=",0,"level-1 trigger rate ");
   G__memvar_setup((void*)((long)(&p->scintiTemp)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scintiTemp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->warning)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"warning=",0,"condition of sensors and trigger rate.");
   G__memvar_setup((void*)((long)(&p->dontUse)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"dontUse=",0,"bad detector flag.");
   G__memvar_setup((void*)((long)(&p->dataQuality)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"dataQuality=",0,"condtion of data");
   G__memvar_setup((void*)((long)(&p->trgMode0)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"trgMode0=",0,"level-0 trigger mode ");
   G__memvar_setup((void*)((long)(&p->trgMode1)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"trgMode1=",0,"level-1 trigger mode ");
   G__memvar_setup((void*)((long)(&p->gpsRunMode)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"gpsRunMode=",0,"1 is 3D fix, 2 is position hold");
   G__memvar_setup((void*)((long)(&p->uthreLvl0)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"uthreLvl0=",0,"threshold of level-0 trigger (upper) ");
   G__memvar_setup((void*)((long)(&p->lthreLvl0)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"lthreLvl0=",0,"threshold of level-0 trigger (lower) ");
   G__memvar_setup((void*)((long)(&p->uthreLvl1)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"uthreLvl1=",0,"threshold of level-1 trigger (upper) ");
   G__memvar_setup((void*)((long)(&p->lthreLvl1)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"lthreLvl1=",0,"threshold of level-1 trigger (lower) ");
   G__memvar_setup((void*)((long)(&p->posX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"posX=",0,"relative position [m], positive is east ");
   G__memvar_setup((void*)((long)(&p->posY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"posY=",0,"relative position [m], positive is north ");
   G__memvar_setup((void*)((long)(&p->posZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"posZ=",0,"relative position [m], positive is up ");
   G__memvar_setup((void*)((long)(&p->delayns)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"delayns=",0,"signal cable delay ");
   G__memvar_setup((void*)((long)(&p->ppsofs)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ppsofs=",0,"PPS ofset ");
   G__memvar_setup((void*)((long)(&p->ppsflu)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ppsflu=",0,"PPS fluctuation ");
   G__memvar_setup((void*)((long)(&p->lonmas)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"lonmas=",0,"longitude [mas] ");
   G__memvar_setup((void*)((long)(&p->latmas)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"latmas=",0,"latitude [mas] ");
   G__memvar_setup((void*)((long)(&p->heicm)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"heicm=",0,"height [cm] ");
   G__memvar_setup((void*)((long)(&p->udec5pled)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"udec5pled=",0,"maximun lineality range of upper layer");
   G__memvar_setup((void*)((long)(&p->ldec5pled)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"ldec5pled=",0,"maximun lineality range of lower layer");
   G__memvar_setup((void*)((long)(&p->udec5pmip)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"udec5pmip=",0,"maximun lineality range of upper layer");
   G__memvar_setup((void*)((long)(&p->ldec5pmip)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"ldec5pmip=",0,"maximun lineality range of lower layer");
   G__memvar_setup((void*)((long)(&p->pchmip)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"pchmip=",0,"peak channel of 1MIP histograms ");
   G__memvar_setup((void*)((long)(&p->pchped)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"pchped=",0,"peak channel of pedestal histograms ");
   G__memvar_setup((void*)((long)(&p->lhpchmip)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"lhpchmip=",0,"left half-peak channel for 1mip histogram ");
   G__memvar_setup((void*)((long)(&p->lhpchped)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"lhpchped=",0,"left half-peak channel of pedestal histogram ");
   G__memvar_setup((void*)((long)(&p->rhpchmip)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"rhpchmip=",0,"right half-peak channel for 1mip histogram ");
   G__memvar_setup((void*)((long)(&p->rhpchped)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"rhpchped=",0,"right half-peak channel of pedestal histograms ");
   G__memvar_setup((void*)((long)(&p->mftndof)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mftndof=",0,"number of degrees of freedom in 1MIP fit ");
   G__memvar_setup((void*)((long)(&p->mip)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"mip=",0,"1MIP value (ped. subtracted) ");
   G__memvar_setup((void*)((long)(&p->mftchi2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"mftchi2=",0,"chi2 of the 1MIP fit ");
   G__memvar_setup((void*)((long)(&p->mftp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Float_t> >"),-1,1,"mftp=",0,"1MIP fit parameters ");
   G__memvar_setup((void*)((long)(&p->mftpe)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Float_t> >"),-1,1,"mftpe=",0,"Errors on 1MIP fit parameters ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SDCalibevWeatherData_class */
static void G__setup_memvarSDCalibevWeatherData_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class));
   { SDCalibevWeatherData_class *p; p=(SDCalibevWeatherData_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->site)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"site=",0,"0 is BRFD, 1 is LRFD, 4 will be CLF ");
   G__memvar_setup((void*)((long)(&p->atmosphericPressure)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"atmosphericPressure=",0,"[hPa] ");
   G__memvar_setup((void*)((long)(&p->temperature)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"temperature=",0,"[C]   ");
   G__memvar_setup((void*)((long)(&p->humidity)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"humidity=",0,"[%RH] ");
   G__memvar_setup((void*)((long)(&p->rainfall)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rainfall=",0,"[mm/hour] ");
   G__memvar_setup((void*)((long)(&p->numberOfHails)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"numberOfHails=",0,"[hits/cm^2/hour]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SDCalibevSimInfo_class */
static void G__setup_memvarSDCalibevSimInfo_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevSimInfo_class));
   { SDCalibevSimInfo_class *p; p=(SDCalibevSimInfo_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->interactionModel)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR),G__defined_typename("vector<Char_t>"),-1,1,"interactionModel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->primaryParticleType)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR),G__defined_typename("vector<Char_t>"),-1,1,"primaryParticleType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->primaryEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"primaryEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->primaryCosZenith)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"primaryCosZenith=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->primaryAzimuth)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"primaryAzimuth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->primaryFirstIntDepth)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"primaryFirstIntDepth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->primaryArrivalTimeFromPps)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"primaryArrivalTimeFromPps=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->primaryCorePosX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"primaryCorePosX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->primaryCorePosY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"primaryCorePosY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->primaryCorePosZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"primaryCorePosZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->thinRatio)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"thinRatio=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxWeight)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"maxWeight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trgCode)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"trgCode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->userInfo)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"userInfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->detailUserInfo)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"detailUserInfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* tasdcalibev_class */
static void G__setup_memvartasdcalibev_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalibev_class));
   { tasdcalibev_class *p; p=(tasdcalibev_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eventCode)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eventCode=",0,"1=data, 0=Monte Carlo ");
   G__memvar_setup((void*)((long)(&p->date)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"date=",0,"triggered date ");
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"time=",0,"triggered time ");
   G__memvar_setup((void*)((long)(&p->usec)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"usec=",0,"triggered usec ");
   G__memvar_setup((void*)((long)(&p->trgBank)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"trgBank=",0,"Trigger bank ID ");
   G__memvar_setup((void*)((long)(&p->trgPos)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"trgPos=",0,"triggered position (detector ID) ");
   G__memvar_setup((void*)((long)(&p->trgMode)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"trgMode=",0,"LSB:BR, bit-1:LR, bit-2:SK ");
   G__memvar_setup((void*)((long)(&p->daqMode)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"daqMode=",0,"LSB:BR, bit-1:LR, bit-2:SK ");
   G__memvar_setup((void*)((long)(&p->numWf)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numWf=",0,"number of aquired waveforms	");
   G__memvar_setup((void*)((long)(&p->numTrgwf)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numTrgwf=",0,"number of triggered waveform	");
   G__memvar_setup((void*)((long)(&p->numWeather)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numWeather=",0,"the number of weather stations ");
   G__memvar_setup((void*)((long)(&p->numAlive)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numAlive=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numDead)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numDead=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->runId)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"runId=",0,"run id");
   G__memvar_setup((void*)((long)(&p->daqMiss)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"daqMiss=",0,"DAQ error or GPS timestamp error");
   G__memvar_setup((void*)((long)(&p->sub)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR),G__defined_typename("vector<SDCalibevData_class>"),-1,1,"sub=",0,"max. size is tasdcalibev_ndmax");
   G__memvar_setup((void*)((long)(&p->weather)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR),G__defined_typename("vector<SDCalibevWeatherData_class>"),-1,1,"weather=",0,"max. size is tasdcalibev_nwmax");
   G__memvar_setup((void*)((long)(&p->sim)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevSimInfo_class),-1,-1,1,"sim=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->aliveDetLid)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<Short_t>"),-1,1,"aliveDetLid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->aliveDetSite)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<Short_t>"),-1,1,"aliveDetSite=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->aliveDetPosX)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"aliveDetPosX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->aliveDetPosY)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"aliveDetPosY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->aliveDetPosZ)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"aliveDetPosZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deadDetLid)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<Short_t>"),-1,1,"deadDetLid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deadDetSite)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<Short_t>"),-1,1,"deadDetSite=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deadDetPosX)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"deadDetPosX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deadDetPosY)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"deadDetPosY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deadDetPosZ)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"deadDetPosZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->footer)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"footer=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<SDCalibevData_class,allocator<SDCalibevData_class> > */
static void G__setup_memvarvectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR));
   { vector<SDCalibevData_class,allocator<SDCalibevData_class> > *p; p=(vector<SDCalibevData_class,allocator<SDCalibevData_class> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> > */
static void G__setup_memvarvectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR));
   { vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> > *p; p=(vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* rufptn_class */
static void G__setup_memvarrufptn_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rufptn_class));
   { rufptn_class *p; p=(rufptn_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nhits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nhits=",0,"number of independent signals (hits) in the trigger");
   G__memvar_setup((void*)((long)(&p->nsclust)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nsclust=",0,"number of hits in the largest space cluster");
   G__memvar_setup((void*)((long)(&p->nstclust)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nstclust=",0,"number of SDs in the largest plane cluster");
   G__memvar_setup((void*)((long)(&p->nborder)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nborder=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isgood)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"isgood=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wfindex)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"wfindex=",0,"indicate to what 1st rusdraw waveform each hit corresponds");
   G__memvar_setup((void*)((long)(&p->xxyy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"xxyy=",0,"position of the hit");
   G__memvar_setup((void*)((long)(&p->nfold)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"nfold=",0,"foldedness of the hit (over how many 128 fadc widnows this signal extends)");
   G__memvar_setup((void*)((long)(&p->sstart)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"sstart=",0,"channel where the signal starts");
   G__memvar_setup((void*)((long)(&p->sstop)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"sstop=",0,"channel where the signal stops");
   G__memvar_setup((void*)((long)(&p->lderiv)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"lderiv=",0,"Channel after which FADC makes a big jump");
   G__memvar_setup((void*)((long)(&p->zderiv)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"zderiv=",0,"channel after which derivative hits zero");
   G__memvar_setup((void*)((long)(&p->xyzclf)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"xyzclf=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->qtot)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"qtot=",0,"Total charge in the event (sum over counters in space-time cluster)");
   G__memvar_setup((void*)((long)(&p->tearliest)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"tearliest=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reltime)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"reltime=",0,"hit time, relative to to EARLIEST hit, in units of counter sep. dist");
   G__memvar_setup((void*)((long)(&p->timeerr)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"timeerr=",0,"error on time, in counter separation units");
   G__memvar_setup((void*)((long)(&p->fadcpa)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"fadcpa=",0,"pulse area, in fadc counts, peds subtracted");
   G__memvar_setup((void*)((long)(&p->fadcpaerr)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"fadcpaerr=",0,"errror on (pulse area - peds) in fadc counts");
   G__memvar_setup((void*)((long)(&p->pulsa)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"pulsa=",0,"pulse area in VEM (pedestals subtracted)");
   G__memvar_setup((void*)((long)(&p->pulsaerr)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"pulsaerr=",0,"error on pulse area in VEM (pedestals subtracted)");
   G__memvar_setup((void*)((long)(&p->ped)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"ped=",0,"pedestals taken from monitoring ");
   G__memvar_setup((void*)((long)(&p->pederr)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"pederr=",0,"pedestal errors computed from the monitoring information (FWHM/2.33)");
   G__memvar_setup((void*)((long)(&p->vem)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"vem=",0,"FADC counts/VEM, from monitoring");
   G__memvar_setup((void*)((long)(&p->vemerr)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"vemerr=",0,"errors on the FADC counts/VEM (FWHM/2.33), using monitoring");
   G__memvar_setup((void*)((long)(&p->tyro_cdist)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"tyro_cdist=",0,"distances from the core for all counters that were hit");
   G__memvar_setup((void*)((long)(&p->tyro_xymoments)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"tyro_xymoments=",0,"<x>,<y>, and <x**2>,<xy>,<y**2> about (<x>,<y>) using charge");
   G__memvar_setup((void*)((long)(&p->tyro_xypmoments)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"tyro_xypmoments=",0,"pricipal moments (eigenvalues) of 2nd moments matrix");
   G__memvar_setup((void*)((long)(&p->tyro_u)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"tyro_u=",0,"long axis, corresponding to larger eigenvalue");
   G__memvar_setup((void*)((long)(&p->tyro_v)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"tyro_v=",0,"short axis, corresponding to smaller eigenvalue");
   G__memvar_setup((void*)((long)(&p->tyro_tfitpars)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"tyro_tfitpars=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tyro_chi2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"tyro_chi2=",0,"chi2/d.o.f. for T vs U fit");
   G__memvar_setup((void*)((long)(&p->tyro_ndof)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"tyro_ndof=",0,"# of d.o.f. for T vs U fit");
   G__memvar_setup((void*)((long)(&p->tyro_theta)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"tyro_theta=",0,"event zenith angle");
   G__memvar_setup((void*)((long)(&p->tyro_phi)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"tyro_phi=",0,"event azimuthal angle");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* rusdgeom_class */
static void G__setup_memvarrusdgeom_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdgeom_class));
   { rusdgeom_class *p; p=(rusdgeom_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->sdsigq)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"sdsigq=",0,"charge in VEM of the given signal ");
   G__memvar_setup((void*)((long)(&p->sdsigt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"sdsigt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sdsigte)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"sdsigte=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xyzclf)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"xyzclf=",0,"clf-frame xyz coordinates of each ");
   G__memvar_setup((void*)((long)(&p->pulsa)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"pulsa=",0,"charge of the i'th counter in VEM */");
   G__memvar_setup((void*)((long)(&p->sdtime)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"sdtime=",0,"relative time of the i'th counter, ");
   G__memvar_setup((void*)((long)(&p->sdterr)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"sdterr=",0,"time resolution of the i'th counter, ");
   G__memvar_setup((void*)((long)(&p->xcore)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"xcore=",0,"core X and Y, in 1200m units, with respect to CLF, ");
   G__memvar_setup((void*)((long)(&p->dxcore)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"dxcore=",0,"uncertainty on xcore */");
   G__memvar_setup((void*)((long)(&p->ycore)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"ycore=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dycore)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"dycore=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"t0=",0,"time when the core hits the CLF plane, sec. aft. ");
   G__memvar_setup((void*)((long)(&p->dt0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"dt0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->theta)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"theta=",0,"event zenith angle, degrees */");
   G__memvar_setup((void*)((long)(&p->dtheta)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"dtheta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"phi=",0,"event azimuthal angle, degrees */");
   G__memvar_setup((void*)((long)(&p->dphi)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"dphi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"chi2=",0,"chi2 of the fit */");
   G__memvar_setup((void*)((long)(&p->a)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"a=",0,"Curvature parameter */");
   G__memvar_setup((void*)((long)(&p->da)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"da=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tearliest)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tearliest=",0,"Earliest signal time in the trigger in ");
   G__memvar_setup((void*)((long)(&p->igsig)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"igsig=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->irufptn)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"irufptn=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->igsd)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"igsd=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xxyy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"xxyy=",0,"sd position IDs */");
   G__memvar_setup((void*)((long)(&p->nsig)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"nsig=",0,"number of independent signals (hits) in each SD */");
   G__memvar_setup((void*)((long)(&p->sdirufptn)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"sdirufptn=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndof)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"ndof=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nsds)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nsds=",0,"number of sds in the trigger */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* rufldf_class */
static void G__setup_memvarrufldf_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rufldf_class));
   { rufldf_class *p; p=(rufldf_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->xcore)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"xcore=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxcore)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"dxcore=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ycore)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"ycore=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dycore)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"dycore=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"sc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dsc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"dsc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->s600)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"s600=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->s600_0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"s600_0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->s800)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"s800=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->s800_0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"s800_0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->aenergy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"aenergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->atmcor)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"atmcor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"chi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->theta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"theta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dtheta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dtheta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dphi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dphi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t0)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dt0)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dt0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bdist)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"bdist=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tdistbr)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tdistbr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tdistlr)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tdistlr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tdistsk)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tdistsk=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tdist)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tdist=",0,"Actual distance for T-shape boundary for a subarray");
   G__memvar_setup((void*)((long)(&p->ndof)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"ndof=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* etrack_class */
static void G__setup_memvaretrack_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_etrack_class));
   { etrack_class *p; p=(etrack_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"energy=",0,"event energy in EeV units (1 EeV = 10^18 eV), 0 if not available");
   G__memvar_setup((void*)((long)(&p->xmax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"xmax=",0,"slant depth where maximum number of charged particles occurs, [g/cm^2], 0 if not available");
   G__memvar_setup((void*)((long)(&p->theta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"theta=",0,"zenith angle [radians]");
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,"azimuthal angle [radians], counter-clock-wise from X=East");
   G__memvar_setup((void*)((long)(&p->t0)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t0=",0,"time when the shower axis crosses CLF Z=0 plane, [uS], with respect to GPS second");
   G__memvar_setup((void*)((long)(&p->xycore)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"xycore[2]=",0,"CLF XY point where event axis croses CLF Z=0 plane [meters], with respect to CLF origin");
   G__memvar_setup((void*)((long)(&p->udata)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"udata=",0,"[ETRACK_NUDATA]; non-essential, user-specific pieces of information");
   G__memvar_setup((void*)((long)(&p->nudata)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nudata=",0,"number of user-specific pieces of information");
   G__memvar_setup((void*)((long)(&p->yymmdd)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"yymmdd=",0,"UTC date, yy=year since 2000, mm=month, dd=day");
   G__memvar_setup((void*)((long)(&p->hhmmss)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hhmmss=",0,"UTC time, hh=hour,mm=minute,ss=second");
   G__memvar_setup((void*)((long)(&p->qualct)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"qualct=",0,"flag to indicate whether events passes the quality cuts");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* atmpar_class */
static void G__setup_memvaratmpar_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_atmpar_class));
   { atmpar_class *p; p=(atmpar_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->dateFrom)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"dateFrom=",0,"sec from 1970/1/1");
   G__memvar_setup((void*)((long)(&p->dateTo)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"dateTo=",0,"sec from 1970/1/1");
   G__memvar_setup((void*)((long)(&p->modelid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"modelid=",0,"number of models ");
   G__memvar_setup((void*)((long)(&p->nh)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nh=",0,"number of heights that distinquish layers");
   G__memvar_setup((void*)((long)(&p->h)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"h=",0,"layer transition heights [cm]");
   G__memvar_setup((void*)((long)(&p->a)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"a=",0,"parameters of the T(h) = a_i + b_i * exp(h/c_i) model determined by the fit");
   G__memvar_setup((void*)((long)(&p->b)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"b=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->c)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"c=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"chi2=",0,"quality of the fit");
   G__memvar_setup((void*)((long)(&p->ndof)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ndof=",0,"number of degees of freedom in the fit = number of points - number of fit parameter");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* fdraw_class */
static void G__setup_memvarfdraw_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdraw_class));
   { fdraw_class *p; p=(fdraw_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->event_code)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"event_code=",0,"1=normal, 0=monte carlo            ");
   G__memvar_setup((void*)((long)(&p->part)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"part=",0,"= run_id % 100                    ");
   G__memvar_setup((void*)((long)(&p->num_mir)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"num_mir=",0,"number of participating cameras   ");
   G__memvar_setup((void*)((long)(&p->event_num)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"event_num=",0,"trigger id number                 ");
   G__memvar_setup((void*)((long)(&p->julian)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"julian=",0,"julian day                        ");
   G__memvar_setup((void*)((long)(&p->jsecond)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jsecond=",0,"second into julian day            ");
   G__memvar_setup((void*)((long)(&p->gps1pps_tick)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"gps1pps_tick=",0,"last 1pps tick from gps           ");
   G__memvar_setup((void*)((long)(&p->ctdclock)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ctdclock=",0,"ctd 40MHz clock tick              ");
   G__memvar_setup((void*)((long)(&p->ctd_version)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ctd_version=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tf_version)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"tf_version=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sdf_version)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"sdf_version=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trig_code)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"trig_code=",0,"tf trigger code:");
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"second=",0,"camera store time rel. to 0:00 UT ");
   G__memvar_setup((void*)((long)(&p->microsec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"microsec=",0,"microsec of store time          ");
   G__memvar_setup((void*)((long)(&p->clkcnt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"clkcnt=",0,"camera 40 MHz clock tick          ");
   G__memvar_setup((void*)((long)(&p->mir_num)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<Short_t>"),-1,1,"mir_num=",0,"mirror id number (0-11)            ");
   G__memvar_setup((void*)((long)(&p->num_chan)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<Short_t>"),-1,1,"num_chan=",0,"number of channels with FADC data ");
   G__memvar_setup((void*)((long)(&p->tf_mode)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"tf_mode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tf_mode2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"tf_mode2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hit_pt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Short_t> >"),-1,1,"hit_pt=",0,"array of triggered tubes by camera (idx 0-255 are tubes, 256 is empty)");
   G__memvar_setup((void*)((long)(&p->channel)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Short_t> >"),-1,1,"channel=",0,"channel ID number ");
   G__memvar_setup((void*)((long)(&p->sdf_peak)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Short_t> >"),-1,1,"sdf_peak=",0,"peak timing of input pulse ");
   G__memvar_setup((void*)((long)(&p->sdf_tmphit)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Short_t> >"),-1,1,"sdf_tmphit=",0,"internal value for trigg ");
   G__memvar_setup((void*)((long)(&p->sdf_mode)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Short_t> >"),-1,1,"sdf_mode=",0,"run mode ");
   G__memvar_setup((void*)((long)(&p->sdf_ctrl)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Short_t> >"),-1,1,"sdf_ctrl=",0,"communication mode ");
   G__memvar_setup((void*)((long)(&p->sdf_thre)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Short_t> >"),-1,1,"sdf_thre=",0,"for threshold and trigger mode ");
   G__memvar_setup((void*)((long)(&p->mean)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<UShort_t> > >"),-1,1,"mean=",0,"average of bkgnd. 0ms, 6ms, 53ms, and 79ms ago.");
   G__memvar_setup((void*)((long)(&p->disp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<UShort_t> > >"),-1,1,"disp=",0,"rms of bkgnd. 0ms, 6ms, 53ms, and 79ms ago. ");
   G__memvar_setup((void*)((long)(&p->m_fadc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<Short_t> > >"),-1,1,"m_fadc=",0,"raw 14-bit fadc data ");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"used_bankid=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* brraw_class */
static void G__setup_memvarbrraw_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brraw_class));
   { brraw_class *p; p=(brraw_class*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* lrraw_class */
static void G__setup_memvarlrraw_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrraw_class));
   { lrraw_class *p; p=(lrraw_class*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* fdplane_class */
static void G__setup_memvarfdplane_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdplane_class));
   { fdplane_class *p; p=(fdplane_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->part)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"part=",0,"part number");
   G__memvar_setup((void*)((long)(&p->event_num)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"event_num=",0,"event number");
   G__memvar_setup((void*)((long)(&p->julian)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"julian=",0,"run start day");
   G__memvar_setup((void*)((long)(&p->jsecond)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jsecond=",0,"run start second (from start of julian)");
   G__memvar_setup((void*)((long)(&p->jsecfrac)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jsecfrac=",0,"run start nanosecond (from start of jsecond)");
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"second=",0,"event start second (from run start)");
   G__memvar_setup((void*)((long)(&p->secfrac)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"secfrac=",0,"event start nanosecond (from start of second)");
   G__memvar_setup((void*)((long)(&p->ntube)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ntube=",0,"number of tubes in event");
   G__memvar_setup((void*)((long)(&p->uniqID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"uniqID=",0,"New to bank version 001: uniqID and fmode");
   G__memvar_setup((void*)((long)(&p->fmode)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fmode=",0,"Fmode used: 0=default (triangle) 1=MCRU");
   G__memvar_setup((void*)((long)(&p->npe)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"npe=",0,"integrated pulse above pedestal in NPE");
   G__memvar_setup((void*)((long)(&p->adc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"adc=",0,"integrated pulse above pedestal in FADC counts");
   G__memvar_setup((void*)((long)(&p->ped)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"ped=",0,"pedestal value under the pulse in FADC counts");
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"time=",0,"weighted average pulse time");
   G__memvar_setup((void*)((long)(&p->time_rms)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"time_rms=",0,"weighted average pulse time rms");
   G__memvar_setup((void*)((long)(&p->sigma)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"sigma=",0,"tube significance");
   G__memvar_setup((void*)((long)(&p->sdp_n)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sdp_n[3]=",0,"shower-detector plane normal (SDPN)");
   G__memvar_setup((void*)((long)(&p->sdp_en)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sdp_en[3]=",0,"uncertainty on SDPN fit");
   G__memvar_setup((void*)((long)(&p->sdp_n_cov)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sdp_n_cov[3][3]=",0,"covariance matrix of SDPN fit");
   G__memvar_setup((void*)((long)(&p->sdp_the)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sdp_the=",0,"shower-detector plane theta angle");
   G__memvar_setup((void*)((long)(&p->sdp_phi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sdp_phi=",0,"shower-detector plane phi angle");
   G__memvar_setup((void*)((long)(&p->sdp_chi2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sdp_chi2=",0,"SDPN fit chi2");
   G__memvar_setup((void*)((long)(&p->alt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"alt=",0,"altitude of tube");
   G__memvar_setup((void*)((long)(&p->azm)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"azm=",0,"azimuth of tube");
   G__memvar_setup((void*)((long)(&p->plane_alt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"plane_alt=",0,"altitude of tube rotated into SDP coordinate system");
   G__memvar_setup((void*)((long)(&p->plane_azm)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"plane_azm=",0,"azimuth of tube rotated into SDP coordinate system");
   G__memvar_setup((void*)((long)(&p->linefit_slope)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"linefit_slope=",0,"linear fit to time vs. angle slope (ns / degree)");
   G__memvar_setup((void*)((long)(&p->linefit_eslope)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"linefit_eslope=",0,"linear fit to time vs. angle slope uncertainty (ns / degree)");
   G__memvar_setup((void*)((long)(&p->linefit_int)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"linefit_int=",0,"linear fit to time vs. angle intercept (ns)");
   G__memvar_setup((void*)((long)(&p->linefit_eint)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"linefit_eint=",0,"linear fit to time vs. angle intercept uncertainty (ns)");
   G__memvar_setup((void*)((long)(&p->linefit_chi2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"linefit_chi2=",0,"linear fit chi2");
   G__memvar_setup((void*)((long)(&p->linefit_cov)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"linefit_cov[2][2]=",0,"linear fit covariance");
   G__memvar_setup((void*)((long)(&p->linefit_res)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"linefit_res=",0,"linear fit tube residual (ns)");
   G__memvar_setup((void*)((long)(&p->linefit_tchi2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"linefit_tchi2=",0,"linear fit tube chi2 contribution");
   G__memvar_setup((void*)((long)(&p->ptanfit_rp)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ptanfit_rp=",0,"pseudo-tangent fit rp (meters)");
   G__memvar_setup((void*)((long)(&p->ptanfit_erp)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ptanfit_erp=",0,"pseudo-tangent fit rp uncertainty (meters)");
   G__memvar_setup((void*)((long)(&p->ptanfit_t0)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ptanfit_t0=",0,"pseudo-tangent fit t0 (ns)");
   G__memvar_setup((void*)((long)(&p->ptanfit_et0)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ptanfit_et0=",0,"pseudo-tangent fit t0 uncertainty (ns)");
   G__memvar_setup((void*)((long)(&p->ptanfit_chi2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ptanfit_chi2=",0,"pseudo-tangent fit chi2");
   G__memvar_setup((void*)((long)(&p->ptanfit_cov)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ptanfit_cov[2][2]=",0,"pseudo-tangent fit covariance");
   G__memvar_setup((void*)((long)(&p->ptanfit_res)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"ptanfit_res=",0,"pseudo-tangent fit tube residual contribution (ns)");
   G__memvar_setup((void*)((long)(&p->ptanfit_tchi2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"ptanfit_tchi2=",0,"pseudo-tangent fit tube chi2 contribution");
   G__memvar_setup((void*)((long)(&p->rp)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"rp=",0,"tangent-fit rp (meters)");
   G__memvar_setup((void*)((long)(&p->erp)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"erp=",0,"tangent-fit rp uncertainty (meters)");
   G__memvar_setup((void*)((long)(&p->psi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"psi=",0,"tangent-fit psi (radians)");
   G__memvar_setup((void*)((long)(&p->epsi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"epsi=",0,"tangent-fit psi uncertainty (radians)");
   G__memvar_setup((void*)((long)(&p->t0)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t0=",0,"tangent-fit t0 (ns)");
   G__memvar_setup((void*)((long)(&p->et0)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"et0=",0,"tangent-fit t0 uncertainty (ns)");
   G__memvar_setup((void*)((long)(&p->tanfit_chi2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tanfit_chi2=",0,"tangent-fit chi2");
   G__memvar_setup((void*)((long)(&p->tanfit_cov)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tanfit_cov[3][3]=",0,"pseudo-tangent fit covariance");
   G__memvar_setup((void*)((long)(&p->tanfit_res)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"tanfit_res=",0,"pseudo-tangent fit tube residual (ns)");
   G__memvar_setup((void*)((long)(&p->tanfit_tchi2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"tanfit_tchi2=",0,"pseudo-tangent fit tube chi2 contribution");
   G__memvar_setup((void*)((long)(&p->azm_extent)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"azm_extent=",0,"azimuthal extent of good tubes rotated into SDP coordinate system (radians)");
   G__memvar_setup((void*)((long)(&p->time_extent)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"time_extent=",0,"time extent of good tubes (ns)");
   G__memvar_setup((void*)((long)(&p->shower_zen)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"shower_zen=",0,"Shower zenith angle (radians)");
   G__memvar_setup((void*)((long)(&p->shower_azm)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"shower_azm=",0,"Shower azimuthal angle (pointing back to source, radians, E=0, N=PI/2)");
   G__memvar_setup((void*)((long)(&p->shower_axis)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"shower_axis[3]=",0,"Shower axis vector (along direction of shower propagation)");
   G__memvar_setup((void*)((long)(&p->rpuv)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"rpuv[3]=",0,"Rp unit vector");
   G__memvar_setup((void*)((long)(&p->core)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"core[3]=",0,"Shower core location (meters)");
   G__memvar_setup((void*)((long)(&p->camera)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"camera=",0,"camera number");
   G__memvar_setup((void*)((long)(&p->tube)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"tube=",0,"tube number");
   G__memvar_setup((void*)((long)(&p->it0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"it0=",0,"FADC index of start of pulse");
   G__memvar_setup((void*)((long)(&p->it1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"it1=",0,"FADC index of end of pulse");
   G__memvar_setup((void*)((long)(&p->knex_qual)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"knex_qual=",0,"1 = good connectivity, 0 = bad connectivity");
   G__memvar_setup((void*)((long)(&p->tube_qual)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"tube_qual=",0,"total tube quality");
   G__memvar_setup((void*)((long)(&p->ngtube)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ngtube=",0,"number of good tubes in event");
   G__memvar_setup((void*)((long)(&p->seed)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"seed=",0,"original knex seed");
   G__memvar_setup((void*)((long)(&p->type)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"type=",0,"type of event (down=2, up=3, intime=4, noise=5)");
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"status=",0,"decimal time fit status ([good linear][good pseudotan][good tangent])");
   G__memvar_setup((void*)((long)(&p->siteid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"siteid=",0,"site ID (BR = 0, LR = 1)");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"used_bankid=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* brplane_class */
static void G__setup_memvarbrplane_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brplane_class));
   { brplane_class *p; p=(brplane_class*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* lrplane_class */
static void G__setup_memvarlrplane_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrplane_class));
   { lrplane_class *p; p=(lrplane_class*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* fdprofile_class */
static void G__setup_memvarfdprofile_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdprofile_class));
   { fdprofile_class *p; p=(fdprofile_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->siteid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"siteid=",0,"site ID (BR = 0, LR = 1)");
   G__memvar_setup((void*)((long)(&p->ntslice)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ntslice=",0,"number of time slices (FADC bins)");
   G__memvar_setup((void*)((long)(&p->ngtslice)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ngtslice[3]=",0,"number of good time slices (acceptance)");
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"status[3]=",0,"status[0] is for fdplane_.psi");
   G__memvar_setup((void*)((long)(&p->timebin)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"timebin=",0,"[FDPROF_MAXTSLICE];   // FADC bin time slice");
   G__memvar_setup((void*)((long)(&p->rp)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"rp[3]=",0,"Impact parameter (meters)");
   G__memvar_setup((void*)((long)(&p->psi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"psi[3]=",0,"Shower-detector plane angle (radians)");
   G__memvar_setup((void*)((long)(&p->t0)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t0[3]=",0,"Detection time at Rp, less Rp travel time (ns)");
   G__memvar_setup((void*)((long)(&p->Xmax)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Xmax[3]=",0,"Shower maximum (g/cm2)");
   G__memvar_setup((void*)((long)(&p->eXmax)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eXmax[3]=",0,"uncertainty on xmax");
   G__memvar_setup((void*)((long)(&p->Nmax)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Nmax[3]=",0,"Number of charged particles at shower maximum");
   G__memvar_setup((void*)((long)(&p->eNmax)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eNmax[3]=",0,"uncertainty on nmax");
   G__memvar_setup((void*)((long)(&p->Energy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Energy[3]=",0,"Initial cosmic-ray energy");
   G__memvar_setup((void*)((long)(&p->eEnergy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eEnergy[3]=",0,"uncertainty on energy");
   G__memvar_setup((void*)((long)(&p->chi2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"chi2[3]=",0,"Total chi2 of fit");
   G__memvar_setup((void*)((long)(&p->npe)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"npe=",0,"[FDPROF_MAXTSLICE];	// number of photoelectrons by time slice");
   G__memvar_setup((void*)((long)(&p->enpe)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"enpe=",0,"[FDPROF_MAXTSLICE];	// uncertainty on npe");
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"x=",0,"[3][FDPROF_MAXTSLICE];	// slant depth at middle of time slice (g/cm2)");
   G__memvar_setup((void*)((long)(&p->dtheta)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"dtheta=",0,"[3][FDPROF_MAXTSLICE];  // angular size of bin (radians)");
   G__memvar_setup((void*)((long)(&p->darea)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"darea=",0,"[3][FDPROF_MAXTSLICE];	// cosine-corrected active area of mirror (sq. meter)");
   G__memvar_setup((void*)((long)(&p->acpt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"acpt=",0,"[3][FDPROF_MAXTSLICE];	// PMT acceptance by time slice");
   G__memvar_setup((void*)((long)(&p->eacpt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"eacpt=",0,"[3][FDPROF_MAXTSLICE];	// binomial uncertainty on acceptance");
   G__memvar_setup((void*)((long)(&p->flux)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"flux=",0,"[3][FDPROF_MAXTSLICE];	// flux at the mirror [photons / (m2 * radian)]");
   G__memvar_setup((void*)((long)(&p->eflux)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"eflux=",0,"[3][FDPROF_MAXTSLICE];	// uncertainty on flux");
   G__memvar_setup((void*)((long)(&p->nfl)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"nfl=",0,"[3][FDPROF_MAXTSLICE];  // Flux of simulated fluorescence photons");
   G__memvar_setup((void*)((long)(&p->ncvdir)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"ncvdir=",0,"[3][FDPROF_MAXTSLICE];  // Flux of simulated direct cerenkov photons");
   G__memvar_setup((void*)((long)(&p->ncvmie)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"ncvmie=",0,"[3][FDPROF_MAXTSLICE];  // Flux of simulated Mie scattered cerenkov photons");
   G__memvar_setup((void*)((long)(&p->ncvray)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"ncvray=",0,"[3][FDPROF_MAXTSLICE];  // Flux of simulated Rayleigh scattered cerenkov photons");
   G__memvar_setup((void*)((long)(&p->simflux)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"simflux=",0,"[3][FDPROF_MAXTSLICE];  // Total flux of simluated photons");
   G__memvar_setup((void*)((long)(&p->tres)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"tres=",0,"[3][FDPROF_MAXTSLICE];	// Time-slice fit residual");
   G__memvar_setup((void*)((long)(&p->tchi2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"tchi2=",0,"[3][FDPROF_MAXTSLICE];	// Time-slice fit chi2 contribution");
   G__memvar_setup((void*)((long)(&p->ne)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"ne=",0,"[3][FDPROF_MAXTSLICE];	// Number of charged particles");
   G__memvar_setup((void*)((long)(&p->ene)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"ene=",0,"[3][FDPROF_MAXTSLICE];	// uncertainty on ne");
   G__memvar_setup((void*)((long)(&p->mc)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mc=",0,"[0 = don't use trumpmc bank info, 1 = use trumpmc bank]");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"used_bankid=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* brprofile_class */
static void G__setup_memvarbrprofile_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brprofile_class));
   { brprofile_class *p; p=(brprofile_class*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* lrprofile_class */
static void G__setup_memvarlrprofile_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrprofile_class));
   { lrprofile_class *p; p=(lrprofile_class*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* fdtubeprofile_class */
static void G__setup_memvarfdtubeprofile_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdtubeprofile_class));
   { fdtubeprofile_class *p; p=(fdtubeprofile_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ntube)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ntube=",0,"total number of tubes");
   G__memvar_setup((void*)((long)(&p->ngtube)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ngtube[3]=",0,"number of good tubes");
   G__memvar_setup((void*)((long)(&p->rp)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"rp[3]=",0,"Impact parameter (meters)");
   G__memvar_setup((void*)((long)(&p->psi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"psi[3]=",0,"Shower-detector plane angle (radians)");
   G__memvar_setup((void*)((long)(&p->t0)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t0[3]=",0,"Detection time at Rp, less Rp travel time (ns)");
   G__memvar_setup((void*)((long)(&p->Xmax)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Xmax[3]=",0,"Shower maximum (g/cm2)");
   G__memvar_setup((void*)((long)(&p->eXmax)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eXmax[3]=",0,"uncertainty on xmax");
   G__memvar_setup((void*)((long)(&p->Nmax)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Nmax[3]=",0,"Number of charged particles at shower maximum");
   G__memvar_setup((void*)((long)(&p->eNmax)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eNmax[3]=",0,"uncertainty on nmax");
   G__memvar_setup((void*)((long)(&p->Energy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Energy[3]=",0,"Initial cosmic-ray energy");
   G__memvar_setup((void*)((long)(&p->eEnergy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eEnergy[3]=",0,"uncertainty on energy");
   G__memvar_setup((void*)((long)(&p->chi2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"chi2[3]=",0,"Total chi2 of fit");
   G__memvar_setup((void*)((long)(&p->X0)-(long)(p)),100,0,0,-1,G__defined_typename("real8"),-1,1,"X0[3]=",0,"effective depth of 1st inter.");
   G__memvar_setup((void*)((long)(&p->eX0)-(long)(p)),100,0,0,-1,G__defined_typename("real8"),-1,1,"eX0[3]=",0,"uncertainty in X0");
   G__memvar_setup((void*)((long)(&p->Lambda)-(long)(p)),100,0,0,-1,G__defined_typename("real8"),-1,1,"Lambda[3]=",0,"profile width parameter");
   G__memvar_setup((void*)((long)(&p->eLambda)-(long)(p)),100,0,0,-1,G__defined_typename("real8"),-1,1,"eLambda[3]=",0,"uncertainty in lambda");
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"x=",0,"slant depth at middle of tube (g/cm2)");
   G__memvar_setup((void*)((long)(&p->npe)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"npe=",0,"number of photo-electrons in tube");
   G__memvar_setup((void*)((long)(&p->enpe)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"enpe=",0,"uncertainty on NPE, including uncertainty from acceptance");
   G__memvar_setup((void*)((long)(&p->eacptfrac)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"eacptfrac=",0,"fraction of uncertainty due to acceptance.");
   G__memvar_setup((void*)((long)(&p->acpt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"acpt=",0,"PMT acceptance");
   G__memvar_setup((void*)((long)(&p->eacpt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"eacpt=",0,"binomial uncertainty on acceptance");
   G__memvar_setup((void*)((long)(&p->flux)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"flux=",0,"flux at the mirror [detectable npe / (m2 * radian)]");
   G__memvar_setup((void*)((long)(&p->eflux)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"eflux=",0,"uncertainty on flux");
   G__memvar_setup((void*)((long)(&p->simnpe)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"simnpe=",0,"simulated photo-electrons in tube");
   G__memvar_setup((void*)((long)(&p->nfl)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"nfl=",0,"Flux of simulated fluorescence photons");
   G__memvar_setup((void*)((long)(&p->ncvdir)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"ncvdir=",0,"Flux of simulated direct cerenkov photons");
   G__memvar_setup((void*)((long)(&p->ncvmie)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"ncvmie=",0,"Flux of simulated Mie scattered cerenkov photons");
   G__memvar_setup((void*)((long)(&p->ncvray)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"ncvray=",0,"Flux of simulated Rayleigh scattered cerenkov photons");
   G__memvar_setup((void*)((long)(&p->simflux)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"simflux=",0,"Total flux of simluated photons");
   G__memvar_setup((void*)((long)(&p->ne)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"ne=",0,"Number of charged particles");
   G__memvar_setup((void*)((long)(&p->ene)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"ene=",0,"uncertainty on ne");
   G__memvar_setup((void*)((long)(&p->tres)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"tres=",0,"Time-slice fit residual");
   G__memvar_setup((void*)((long)(&p->tchi2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"tchi2=",0,"Time-slice fit chi2 contribution");
   G__memvar_setup((void*)((long)(&p->camera)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"camera=",0,"Camera number for this tube");
   G__memvar_setup((void*)((long)(&p->tube)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"tube=",0,"Tube ID");
   G__memvar_setup((void*)((long)(&p->tube_qual)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"tube_qual=",0,"tube quality (good = 1, bad = 0, added = copy of fdplane tube status (EXPERIMENTAL, TENTATIVE))");
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"status[3]=",0,"status[0] is for fdplane_.psi");
   G__memvar_setup((void*)((long)(&p->siteid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"siteid=",0,"site ID (BR = 0, LR = 1)");
   G__memvar_setup((void*)((long)(&p->mc)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mc=",0,"[0 = don't use trumpmc bank info, 1 = use trumpmc ");
   G__memvar_setup((void*)((long)(&p->simtime)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"simtime=",0,"[3][FDTUBEPROF_MAXTUBE] time of simulated signal from waveform");
   G__memvar_setup((void*)((long)(&p->simtrms)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"simtrms=",0,"[3][FDTUBEPROF_MAXTUBE] RMS of time");
   G__memvar_setup((void*)((long)(&p->simtres)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"simtres=",0,"[3][FDTUBEPROF_MAXTUBE] waveform time residual with fdplane");
   G__memvar_setup((void*)((long)(&p->timechi2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"timechi2=",0,"[3][FDTUBEPROF_MAXTUBE] chi2 of above qty with fdplane");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"used_bankid=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* brtubeprofile_class */
static void G__setup_memvarbrtubeprofile_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brtubeprofile_class));
   { brtubeprofile_class *p; p=(brtubeprofile_class*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* lrtubeprofile_class */
static void G__setup_memvarlrtubeprofile_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrtubeprofile_class));
   { lrtubeprofile_class *p; p=(lrtubeprofile_class*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* hbar_class */
static void G__setup_memvarhbar_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_hbar_class));
   { hbar_class *p; p=(hbar_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->jday)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jday=",0,"mean julian day - 2.44e6 */");
   G__memvar_setup((void*)((long)(&p->jsec)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jsec=",0,"second into Julian day */");
   G__memvar_setup((void*)((long)(&p->msec)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"msec=",0,"milli sec of julian day (NOT since UT0:00) */");
   G__memvar_setup((void*)((long)(&p->source)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"source=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nmir)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nmir=",0,"number of mirrors for this event */");
   G__memvar_setup((void*)((long)(&p->ntube)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ntube=",0,"total number of tubes for this event */");
   G__memvar_setup((void*)((long)(&p->hnpe_jday)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"hnpe_jday=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mir)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mir=",0,"mirror # (id), one for each of nmir");
   G__memvar_setup((void*)((long)(&p->mir_reflect)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"mir_reflect=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tubemir)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"tubemir=",0,"mirror #, saved with tube as short */");
   G__memvar_setup((void*)((long)(&p->tube)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"tube=",0,"tube # */");
   G__memvar_setup((void*)((long)(&p->qdcb)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"qdcb=",0,"digitized channel B charge integral */");
   G__memvar_setup((void*)((long)(&p->npe)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"npe=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigma_npe)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"sigma_npe=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->first_order_gain_flag)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR),G__defined_typename("vector<Byte_t>"),-1,1,"first_order_gain_flag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second_order_gain)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"second_order_gain=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second_order_gain_sigma)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"second_order_gain_sigma=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second_order_gain_flag)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR),G__defined_typename("vector<Byte_t>"),-1,1,"second_order_gain_flag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->qe_337)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"qe_337=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigma_qe_337)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"sigma_qe_337=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->uv_exp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"uv_exp=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* hraw1_class */
static void G__setup_memvarhraw1_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_hraw1_class));
   { hraw1_class *p; p=(hraw1_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->jday)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jday=",0,"mean julian day - 2.44e6 */");
   G__memvar_setup((void*)((long)(&p->jsec)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jsec=",0,"second into Julian day */");
   G__memvar_setup((void*)((long)(&p->msec)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"msec=",0,"milli sec of julian day (NOT since UT0:00) */");
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"status=",0,"set bit 0 to 1 when converts from .pln file */");
   G__memvar_setup((void*)((long)(&p->nmir)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nmir=",0,"number of mirrors for this event */");
   G__memvar_setup((void*)((long)(&p->ntube)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ntube=",0,"total number of tubes for this event */");
   G__memvar_setup((void*)((long)(&p->mir)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mir=",0,"mirror # (id), saved as short */");
   G__memvar_setup((void*)((long)(&p->mir_rev)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mir_rev=",0,"mirror version (rev3 or rev4) */");
   G__memvar_setup((void*)((long)(&p->mirevtno)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mirevtno=",0,"event # from mirror packet */");
   G__memvar_setup((void*)((long)(&p->mirntube)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mirntube=",0,"# of tubes for that mir, saved as short */");
   G__memvar_setup((void*)((long)(&p->miraccuracy_ns)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"miraccuracy_ns=",0,"clock accuracy (gps or wwvb) in nsec */");
   G__memvar_setup((void*)((long)(&p->mirtime_ns)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mirtime_ns=",0,"time of mirror holdoff in nsec from second */");
   G__memvar_setup((void*)((long)(&p->tubemir)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"tubemir=",0,"mirror #, saved with tube as short */");
   G__memvar_setup((void*)((long)(&p->tube)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"tube=",0,"tube # */");
   G__memvar_setup((void*)((long)(&p->qdca)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"qdca=",0,"digitized channel A charge integral */");
   G__memvar_setup((void*)((long)(&p->qdcb)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"qdcb=",0,"digitized channel B charge integral */");
   G__memvar_setup((void*)((long)(&p->tdc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"tdc=",0,"digitized tube trigger to holdoff time */");
   G__memvar_setup((void*)((long)(&p->tha)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"tha=",0,"trigger threshold in millivolts on minute ch A */");
   G__memvar_setup((void*)((long)(&p->thb)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"thb=",0,"trigger threshold in millivolts on minute ch B */");
   G__memvar_setup((void*)((long)(&p->prxf)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"prxf=",0,"# of photons according to RXF calib. */");
   G__memvar_setup((void*)((long)(&p->thcal1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"thcal1=",0,"time according to HCAL1 calib. */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* mc04_class */
static void G__setup_memvarmc04_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_mc04_class));
   { mc04_class *p; p=(mc04_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"energy=",0,"shower energy (EeV), (mJ) if laser");
   G__memvar_setup((void*)((long)(&p->csmax)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"csmax=",0,"shower size at shower max. / 1e9");
   G__memvar_setup((void*)((long)(&p->x0)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x0=",0,"G-H fit paramater (g/cm^2)");
   G__memvar_setup((void*)((long)(&p->x1)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x1=",0,"depth of first interaction (g/cm^2)");
   G__memvar_setup((void*)((long)(&p->xmax)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"xmax=",0,"depth of shower max        (g/cm^2)");
   G__memvar_setup((void*)((long)(&p->lambda)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"lambda=",0,"G-H fit paramater          (g/cm^2)");
   G__memvar_setup((void*)((long)(&p->xfin)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"xfin=",0,"depth at rfin (from rini)  (g/cm^2)");
   G__memvar_setup((void*)((long)(&p->rini)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"rini[3]=",0,"vector position of x0 point");
   G__memvar_setup((void*)((long)(&p->rfin)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"rfin[3]=",0,"vector position of final point");
   G__memvar_setup((void*)((long)(&p->uthat)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"uthat[3]=",0,"track direction unit vector");
   G__memvar_setup((void*)((long)(&p->theta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"theta=",0,"shower track zenith angle");
   G__memvar_setup((void*)((long)(&p->Rpvec)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Rpvec[3]=",0,"Rp vector to track (m) from origin");
   G__memvar_setup((void*)((long)(&p->Rcore)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Rcore[3]=",0,"shower core (from origin),z=0 (m)");
   G__memvar_setup((void*)((long)(&p->Rp)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Rp=",0,"magnitude of Rpvec");
   G__memvar_setup((void*)((long)(&p->rsite)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"rsite=",0,"[MC04_MAXEYE][3] site location with respect to origin");
   G__memvar_setup((void*)((long)(&p->rpvec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"rpvec=",0,"[MC04_MAXEYE][3] Rp vector to track (meters)");
   G__memvar_setup((void*)((long)(&p->rcore)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"rcore=",0,"[MC04_MAXEYE][3] shower core vector,z=0 (meters)");
   G__memvar_setup((void*)((long)(&p->shwn)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"shwn=",0,"[MC04_MAXEYE][3] shower-detector plane");
   G__memvar_setup((void*)((long)(&p->rp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"rp=",0,"[MC04_MAXEYE] magnitude of rpvec");
   G__memvar_setup((void*)((long)(&p->psi)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"psi=",0,"[MC04_MAXEYE] psi angle in SD plane");
   G__memvar_setup((void*)((long)(&p->aero_vod)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"aero_vod=",0,"aerosols vertical optical depth");
   G__memvar_setup((void*)((long)(&p->aero_hal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"aero_hal=",0,"aerosols horiz. attenuation length (m)");
   G__memvar_setup((void*)((long)(&p->aero_vsh)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"aero_vsh=",0,"aerosols vertical scale height (m)");
   G__memvar_setup((void*)((long)(&p->aero_mlh)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"aero_mlh=",0,"aerosols mixing layer height");
   G__memvar_setup((void*)((long)(&p->la_site)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"la_site[3]=",0,"laser or flasher site (meters)");
   G__memvar_setup((void*)((long)(&p->la_wavlen)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"la_wavlen=",0,"laser wave length (nm)");
   G__memvar_setup((void*)((long)(&p->fl_totpho)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fl_totpho=",0,"total number of photons");
   G__memvar_setup((void*)((long)(&p->fl_twidth)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fl_twidth=",0,"flasher pulse width (ns)");
   G__memvar_setup((void*)((long)(&p->iprim)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iprim=",0,"primary particle: 1=proton, 2=iron");
   G__memvar_setup((void*)((long)(&p->eventNr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eventNr=",0,"event number in mc file (set)");
   G__memvar_setup((void*)((long)(&p->setNr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"setNr=",0,"set identifier YYMMDDPP");
   G__memvar_setup((void*)((long)(&p->iseed1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iseed1=",0,"iseed before event");
   G__memvar_setup((void*)((long)(&p->iseed2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iseed2=",0,"iseed after event");
   G__memvar_setup((void*)((long)(&p->detid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"detid=",0,"detector id ( Hires, TA, TALE, ... )");
   G__memvar_setup((void*)((long)(&p->maxeye)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"maxeye=",0,"number of sites in detector");
   G__memvar_setup((void*)((long)(&p->if_eye)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"if_eye=",0,"[MC04_MAXEYE] if (site[ieye] != 1) ignore site");
   G__memvar_setup((void*)((long)(&p->neye)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"neye=",0,"number of sites triggered");
   G__memvar_setup((void*)((long)(&p->nmir)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nmir=",0,"number of mirrors in event");
   G__memvar_setup((void*)((long)(&p->ntube)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ntube=",0,"total number of tubes in event");
   G__memvar_setup((void*)((long)(&p->eyeid)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"eyeid=",0,"[MC04_MAXEYE] triggered site id");
   G__memvar_setup((void*)((long)(&p->eye_nmir)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"eye_nmir=",0,"[MC04_MAXEYE] number of triggered mirrors in eye");
   G__memvar_setup((void*)((long)(&p->eye_ntube)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"eye_ntube=",0,"[MC04_MAXEYE] number of triggered tube in eye");
   G__memvar_setup((void*)((long)(&p->mirid)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mirid=",0,"[MC04_MAXMIR] triggered mirrors id");
   G__memvar_setup((void*)((long)(&p->mir_eye)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mir_eye=",0,"[MC04_MAXMIR] triggered mirrors id");
   G__memvar_setup((void*)((long)(&p->thresh)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"thresh=",0,"[MC04_MAXMIR] mir. average tube threshold in mV");
   G__memvar_setup((void*)((long)(&p->tubeid)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"tubeid=",0,"[MC04_MAXTUBE] tube id");
   G__memvar_setup((void*)((long)(&p->tube_mir)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"tube_mir=",0,"[MC04_MAXTUBE] mirror id for each tube");
   G__memvar_setup((void*)((long)(&p->tube_eye)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"tube_eye=",0,"[MC04_MAXTUBE] eye id for each tube");
   G__memvar_setup((void*)((long)(&p->pe)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"pe=",0,"[MC04_MAXTUBE] pe's received by tube from shower");
   G__memvar_setup((void*)((long)(&p->triggered)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"triggered=",0,"[MC04_MAXTUBE] 1 if tube is part of triggered event, 0 otherwise");
   G__memvar_setup((void*)((long)(&p->t_tmean)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"t_tmean=",0,"[MC04_MAXTUBE] pe's mean arrival time");
   G__memvar_setup((void*)((long)(&p->t_trms)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"t_trms=",0,"[MC04_MAXTUBE] pe's RMS of arrival times");
   G__memvar_setup((void*)((long)(&p->t_tmin)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"t_tmin=",0,"[MC04_MAXTUBE] pe's min. arrival time");
   G__memvar_setup((void*)((long)(&p->t_tmax)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"t_tmax=",0,"[MC04_MAXTUBE] pe's max. arrival time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* mcraw_class */
static void G__setup_memvarmcraw_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_mcraw_class));
   { mcraw_class *p; p=(mcraw_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->jday)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jday=",0,"mean julian day - 2.44e6 */");
   G__memvar_setup((void*)((long)(&p->jsec)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jsec=",0,"second into Julian day */");
   G__memvar_setup((void*)((long)(&p->msec)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"msec=",0,"milli sec of julian day (NOT since UT0:00) */");
   G__memvar_setup((void*)((long)(&p->neye)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"neye=",0,"number of sites triggered */");
   G__memvar_setup((void*)((long)(&p->nmir)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nmir=",0,"number of mirrors for this event */");
   G__memvar_setup((void*)((long)(&p->ntube)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ntube=",0,"total number of tubes for this event */");
   G__memvar_setup((void*)((long)(&p->eyeid)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"eyeid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mirid)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mirid=",0,"mirror # (id), saved as short */");
   G__memvar_setup((void*)((long)(&p->mir_eye)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mir_eye=",0,"eye # (id), saved as short */");
   G__memvar_setup((void*)((long)(&p->mir_rev)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mir_rev=",0,"mirror version (rev3 or rev4) */");
   G__memvar_setup((void*)((long)(&p->mirevtno)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mirevtno=",0,"event # from mirror packet */");
   G__memvar_setup((void*)((long)(&p->mir_ntube)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mir_ntube=",0,"# of tubes for that mir */");
   G__memvar_setup((void*)((long)(&p->mirtime_ns)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mirtime_ns=",0,"time of mir. holdoff in ns from sec. */");
   G__memvar_setup((void*)((long)(&p->tube_eye)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"tube_eye=",0,"eye #, saved with tube as short */");
   G__memvar_setup((void*)((long)(&p->tube_mir)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"tube_mir=",0,"mirror #, saved with tube as short */");
   G__memvar_setup((void*)((long)(&p->tubeid)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"tubeid=",0,"tube # */");
   G__memvar_setup((void*)((long)(&p->qdca)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"qdca=",0,"digitized channel A charge integral */");
   G__memvar_setup((void*)((long)(&p->qdcb)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"qdcb=",0,"digitized channel B charge integral */");
   G__memvar_setup((void*)((long)(&p->tdc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"tdc=",0,"digitized tube trigger to holdoff time */");
   G__memvar_setup((void*)((long)(&p->tha)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"tha=",0,"trigger threshold (mV) on minute ch A */");
   G__memvar_setup((void*)((long)(&p->thb)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"thb=",0,"trigger threshold (mV) on minute ch B */");
   G__memvar_setup((void*)((long)(&p->prxf)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"prxf=",0,"# of photons according to RXF calib. */");
   G__memvar_setup((void*)((long)(&p->thcal1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"thcal1=",0,"time according to HCAL1 calib. */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* stps2_class */
static void G__setup_memvarstps2_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_stps2_class));
   { stps2_class *p; p=(stps2_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->maxeye)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"maxeye=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->plog)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"plog=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rvec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"rvec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rwalk)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"rwalk=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ang)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"ang=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->aveTime)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"aveTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaTime)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"sigmaTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->avePhot)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"avePhot=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaPhot)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"sigmaPhot=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lifetime)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"lifetime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->totalLifetime)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"totalLifetime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->inTimeTubes)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"inTimeTubes=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->if_eye)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"if_eye=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->upward)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR),G__defined_typename("vector<Char_t>"),-1,1,"upward=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* stpln_class */
static void G__setup_memvarstpln_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_stpln_class));
   { stpln_class *p; p=(stpln_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->jday)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jday=",0,"mean julian day - 2.44e6 */");
   G__memvar_setup((void*)((long)(&p->jsec)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jsec=",0,"second into Julian day */");
   G__memvar_setup((void*)((long)(&p->msec)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"msec=",0,"milli sec of julian day (NOT since UT0:00) */");
   G__memvar_setup((void*)((long)(&p->neye)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"neye=",0,"number of sites triggered */");
   G__memvar_setup((void*)((long)(&p->nmir)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nmir=",0,"number of mirrors for this event */");
   G__memvar_setup((void*)((long)(&p->ntube)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ntube=",0,"total number of tubes for this event */");
   G__memvar_setup((void*)((long)(&p->maxeye)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"maxeye=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->if_eye)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"if_eye=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eyeid)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"eyeid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eye_nmir)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"eye_nmir=",0,"number of mirrors for this event */");
   G__memvar_setup((void*)((long)(&p->eye_ngmir)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"eye_ngmir=",0,"number of mirrors for this event */");
   G__memvar_setup((void*)((long)(&p->eye_ntube)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"eye_ntube=",0,"total number of tubes for this event */");
   G__memvar_setup((void*)((long)(&p->eye_ngtube)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"eye_ngtube=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->n_ampwt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Float_t> >"),-1,1,"n_ampwt=",0,"amplitude weighted plane normal */");
   G__memvar_setup((void*)((long)(&p->errn_ampwt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Float_t> >"),-1,1,"errn_ampwt=",0,"error in n_ampwt[]              */");
   G__memvar_setup((void*)((long)(&p->rmsdevpln)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"rmsdevpln=",0,"rms deviation in offplane angle (rad)  */");
   G__memvar_setup((void*)((long)(&p->rmsdevtim)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"rmsdevtim=",0,"rms deviation in tube trigger time from");
   G__memvar_setup((void*)((long)(&p->tracklength)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"tracklength=",0,"tracklength in degrees */");
   G__memvar_setup((void*)((long)(&p->crossingtime)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"crossingtime=",0,"time difference between last and first");
   G__memvar_setup((void*)((long)(&p->ph_per_gtube)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"ph_per_gtube=",0,"average number of photons per good tube */");
   G__memvar_setup((void*)((long)(&p->mirid)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mirid=",0,"mirror # (id), saved as short */");
   G__memvar_setup((void*)((long)(&p->mir_eye)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mir_eye=",0,"eye # (id), saved as short */");
   G__memvar_setup((void*)((long)(&p->mir_type)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mir_type=",0,"Hires/TA/ToP */");
   G__memvar_setup((void*)((long)(&p->mir_ngtube)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mir_ngtube=",0,"# of tubes for that mir */");
   G__memvar_setup((void*)((long)(&p->mirtime_ns)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mirtime_ns=",0,"time of mir. holdoff in ns from sec. */");
   G__memvar_setup((void*)((long)(&p->ig)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"ig=",0,"ig = 1 is for good tubes, 0 for noise tubes */");
   G__memvar_setup((void*)((long)(&p->tube_eye)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"tube_eye=",0,"eye #, saved with tube as short */");
   G__memvar_setup((void*)((long)(&p->saturated)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"saturated=",0,"tube saturation flag */");
   G__memvar_setup((void*)((long)(&p->mir_tube_id)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mir_tube_id=",0,"mir_tube_id = (mirror_id*1000+tube_id) */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* hctim_class */
static void G__setup_memvarhctim_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_hctim_class));
   { hctim_class *p; p=(hctim_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->mchi2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"mchi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rchi2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"rchi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lchi2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"lchi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mrp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"mrp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rrp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"rrp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lrp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"lrp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mpsi)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"mpsi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rpsi)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"rpsi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lpsi)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"lpsi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mthe)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"mthe=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rthe)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"rthe=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lthe)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"lthe=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mphi)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"mphi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rphi)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"rphi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lphi)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"lphi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->failmode)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"failmode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timinfo)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"timinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jday)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"jday=",0,"mean julian day - 2.44e6 */");
   G__memvar_setup((void*)((long)(&p->jsec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"jsec=",0,"second into Julian day */");
   G__memvar_setup((void*)((long)(&p->msec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"msec=",0,"milli sec of julian day (NOT since UT0:00) */");
   G__memvar_setup((void*)((long)(&p->ntube)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"ntube=",0,"number of tubes in each fit");
   G__memvar_setup((void*)((long)(&p->nmir)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"nmir=",0,"numbers of mirrors in each fit");
   G__memvar_setup((void*)((long)(&p->mtkv)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"mtkv=",0,"[HCTIM_MAXFIT][3]");
   G__memvar_setup((void*)((long)(&p->rtkv)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"rtkv=",0,"[HCTIM_MAXFIT][3] ");
   G__memvar_setup((void*)((long)(&p->ltkv)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"ltkv=",0,"[HCTIM_MAXFIT][3]");
   G__memvar_setup((void*)((long)(&p->mrpv)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"mrpv=",0,"[HCTIM_MAXFIT][3] ");
   G__memvar_setup((void*)((long)(&p->rrpv)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"rrpv=",0,"[HCTIM_MAXFIT][3] ");
   G__memvar_setup((void*)((long)(&p->lrpv)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"lrpv=",0,"[HCTIM_MAXFIT][3]");
   G__memvar_setup((void*)((long)(&p->mrpuv)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"mrpuv=",0,"[HCTIM_MAXFIT][3] ");
   G__memvar_setup((void*)((long)(&p->rrpuv)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"rrpuv=",0,"[HCTIM_MAXFIT][3] ");
   G__memvar_setup((void*)((long)(&p->lrpuv)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"lrpuv=",0,"[HCTIM_MAXFIT][3]");
   G__memvar_setup((void*)((long)(&p->mshwn)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"mshwn=",0,"[HCTIM_MAXFIT][3] ");
   G__memvar_setup((void*)((long)(&p->rshwn)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"rshwn=",0,"[HCTIM_MAXFIT][3] ");
   G__memvar_setup((void*)((long)(&p->lshwn)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"lshwn=",0,"[HCTIM_MAXFIT][3]");
   G__memvar_setup((void*)((long)(&p->mcore)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"mcore=",0,"[HCTIM_MAXFIT][3] ");
   G__memvar_setup((void*)((long)(&p->rcore)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"rcore=",0,"[HCTIM_MAXFIT][3] ");
   G__memvar_setup((void*)((long)(&p->lcore)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"lcore=",0,"[HCTIM_MAXFIT][3]");
   G__memvar_setup((void*)((long)(&p->tubemir)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"tubemir=",0,"mirror number of the tube");
   G__memvar_setup((void*)((long)(&p->tube)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"tube=",0,"tube number");
   G__memvar_setup((void*)((long)(&p->ig)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"ig=",0,"tube flag");
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"time=",0,"tube time */");
   G__memvar_setup((void*)((long)(&p->timefit)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"timefit=",0,"time from best fit */");
   G__memvar_setup((void*)((long)(&p->thetb)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"thetb=",0,"viewing angle */");
   G__memvar_setup((void*)((long)(&p->sgmt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"sgmt=",0,"sigma time */");
   G__memvar_setup((void*)((long)(&p->asx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"asx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->asy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"asy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->asz)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"asz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mir)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"mir=",0,"mir number */");
   G__memvar_setup((void*)((long)(&p->mirntube)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"mirntube=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* hcbin_class */
static void G__setup_memvarhcbin_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_hcbin_class));
   { hcbin_class *p; p=(hcbin_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->bvx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"bvx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bvy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"bvy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bvz)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"bvz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bsz)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"bsz=",0,"bin size in degrees */");
   G__memvar_setup((void*)((long)(&p->sig)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"sig=",0,"signal in pe/degree/m^2 */");
   G__memvar_setup((void*)((long)(&p->sigerr)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"sigerr=",0,"error on the signal */");
   G__memvar_setup((void*)((long)(&p->cfc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"cfc=",0,"correction factor or exposure");
   G__memvar_setup((void*)((long)(&p->ig)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"ig=",0,"ig=  1: good bin */");
   G__memvar_setup((void*)((long)(&p->nbin)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"nbin=",0,"number of bins */");
   G__memvar_setup((void*)((long)(&p->failmode)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"failmode=",0,"0 ==> Success */");
   G__memvar_setup((void*)((long)(&p->bininfo)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"bininfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jday)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"jday=",0,"mean julian day - 2.44e6 */");
   G__memvar_setup((void*)((long)(&p->jsec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"jsec=",0,"second into Julian day */");
   G__memvar_setup((void*)((long)(&p->msec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"msec=",0,"milli sec of julian day ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* prfc_class */
static void G__setup_memvarprfc_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_prfc_class));
   { prfc_class *p; p=(prfc_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->chi2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"chi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->szmx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"szmx=",0,"Shower size. Number of charged */");
   G__memvar_setup((void*)((long)(&p->dszmx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"dszmx=",0,"particles at Shower Maximum */");
   G__memvar_setup((void*)((long)(&p->rszmx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"rszmx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lszmx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"lszmx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tszmx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"tszmx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xm)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"xm=",0,"Xmax = Shower Maximum   g/cm^2 */");
   G__memvar_setup((void*)((long)(&p->dxm)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"dxm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rxm)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"rxm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lxm)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"lxm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->txm)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"txm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"x0=",0,"X0   = Shower initial point  g/cm^2 */");
   G__memvar_setup((void*)((long)(&p->dx0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"dx0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rx0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"rx0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lx0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"lx0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tx0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"tx0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lambda)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"lambda=",0,"Elongation parameter  g/cm^2 */");
   G__memvar_setup((void*)((long)(&p->dlambda)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"dlambda=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rlambda)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"rlambda=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->llambda)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"llambda=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tlambda)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"tlambda=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eng)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"eng=",0,"Shower energy  EeV  */");
   G__memvar_setup((void*)((long)(&p->deng)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"deng=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reng)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"reng=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leng)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"leng=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->teng)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"teng=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dep)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"dep=",0,"slant grammage g/cm^2 */");
   G__memvar_setup((void*)((long)(&p->gm)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"gm=",0,"vertical grammage g/cm^2 */");
   G__memvar_setup((void*)((long)(&p->scin)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"scin=",0,"Scintillation */");
   G__memvar_setup((void*)((long)(&p->rayl)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"rayl=",0,"Rayleigh Scattered */");
   G__memvar_setup((void*)((long)(&p->aero)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"aero=",0,"Aerosol Scattered */");
   G__memvar_setup((void*)((long)(&p->crnk)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"crnk=",0,"Direct Cherenkov */");
   G__memvar_setup((void*)((long)(&p->sigmc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"sigmc=",0,"Total MC signal */");
   G__memvar_setup((void*)((long)(&p->sig)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"sig=",0,"Signal measured */");
   G__memvar_setup((void*)((long)(&p->mxel)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,1,"mxel=",0,"Error Matrix Elements */");
   G__memvar_setup((void*)((long)(&p->nel)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"nel=",0,"Number of Matrix Elements */");
   G__memvar_setup((void*)((long)(&p->mor)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mor=",0,"Matix order */");
   G__memvar_setup((void*)((long)(&p->ig)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,1,"ig=",0,"flag of the bin */");
   G__memvar_setup((void*)((long)(&p->pflinfo)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"pflinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bininfo)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"bininfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mtxinfo)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"mtxinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->failmode)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"failmode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nbin)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"nbin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->traj_source)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"traj_source=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->errstat)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"errstat=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndf)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"ndf=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* fdatmos_param_class */
static void G__setup_memvarfdatmos_param_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdatmos_param_class));
   { fdatmos_param_class *p; p=(fdatmos_param_class*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->uniqID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"uniqID=",0,"uniq ID");
   G__memvar_setup((void*)((long)(&p->dateFrom)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"dateFrom=",0,"available date from sec from 1970/1/1");
   G__memvar_setup((void*)((long)(&p->dateTo)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"dateTo=",0,"available date to sec from 1970/1/1");
   G__memvar_setup((void*)((long)(&p->nItem)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nItem=",0,"number of data line");
   G__memvar_setup((void*)((long)(&p->height)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"height=",0,"height [km]");
   G__memvar_setup((void*)((long)(&p->pressure)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"pressure=",0,"pressure [hPa] ");
   G__memvar_setup((void*)((long)(&p->pressureError)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"pressureError=",0,"pressure error [hPa]");
   G__memvar_setup((void*)((long)(&p->temperature)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"temperature=",0,"temperature [degree]");
   G__memvar_setup((void*)((long)(&p->temperatureError)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"temperatureError=",0,"temperature error [degree]");
   G__memvar_setup((void*)((long)(&p->dewPoint)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"dewPoint=",0,"dew point [degree]");
   G__memvar_setup((void*)((long)(&p->dewPointError)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"dewPointError=",0,"dew point error [degree]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"used_bankid=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* gdas_class */
static void G__setup_memvargdas_class(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_gdas_class));
   { gdas_class *p; p=(gdas_class*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sdfdrtDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > */
static void G__setup_memvarvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR));
   { vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > *p; p=(vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > > */
static void G__setup_memvarvectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR));
   { vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > > *p; p=(vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > */
static void G__setup_memvarvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   { vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > *p; p=(vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > > */
static void G__setup_memvarvectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR));
   { vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > > *p; p=(vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > > */
static void G__setup_memvarvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   { vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > > *p; p=(vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarsdfdrtDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncdstbank_class(void) {
   /* dstbank_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class));
   G__memfunc_setup("loadFromDST",1055,G__sdfdrtDict_343_0_1, 121, -1, -1, 0, 0, 1, 1, 0, "", "load the dst class from DST bank", (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,G__sdfdrtDict_343_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", "load the dst class into DST bank", (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,G__sdfdrtDict_343_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", "clear out the class variables and the DST bank", (void*) NULL, 1);
   G__memfunc_setup("get_bank_id",1127,G__sdfdrtDict_343_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_bank_version",1696,G__sdfdrtDict_343_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_bank_name",1339,G__sdfdrtDict_343_0_6, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpBank",786,G__sdfdrtDict_343_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"E - - 0 'stdout' fp i - 'Int_t' 0 '1' format", "dump the contents of the DST class", (void*) NULL, 0);
   G__memfunc_setup("GetDSTDIR",746,G__sdfdrtDict_343_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", "return the dst2k-ta directory against which this class was compiled", (void*) G__func2void( (const char* (*)())(&dstbank_class::GetDSTDIR) ), 0);
   G__memfunc_setup("dstbank_class",1372,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dstbank_class",1372,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class), -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - dstbank_id_val i - 'Int_t' 0 - dstbank_version_val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sdfdrtDict_343_0_11, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&dstbank_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_343_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dstbank_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_343_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&dstbank_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_343_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&dstbank_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_343_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_343_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dstbank_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_343_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dstbank_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_343_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dstbank_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_343_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dstbank_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("dstbank_class", 1372, G__sdfdrtDict_343_0_23, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class), -1, 0, 1, 1, 1, 0, "u 'dstbank_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~dstbank_class", 1498, G__sdfdrtDict_343_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_343_0_25, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_dstbank_class), -1, 1, 1, 1, 1, 0, "u 'dstbank_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctalex00_class(void) {
   /* talex00_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_talex00_class));
   G__memfunc_setup("talex00_class",1267,G__sdfdrtDict_344_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_talex00_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_344_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&talex00_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_344_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&talex00_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_344_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&talex00_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_344_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&talex00_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_344_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_344_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&talex00_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_344_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&talex00_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_344_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&talex00_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_344_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&talex00_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("talex00_class", 1267, G__sdfdrtDict_344_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_talex00_class), -1, 0, 1, 1, 1, 0, "u 'talex00_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~talex00_class", 1393, G__sdfdrtDict_344_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_344_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_talex00_class), -1, 1, 1, 1, 1, 0, "u 'talex00_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEintcOallocatorlEintgRsPgR(void) {
   /* vector<int,allocator<int> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__memfunc_setup("at",213,G__sdfdrtDict_346_0_1, 105, -1, G__defined_typename("vector<int,allocator<int> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__sdfdrtDict_346_0_2, 105, -1, G__defined_typename("vector<int,allocator<int> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__sdfdrtDict_346_0_3, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__sdfdrtDict_346_0_4, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__sdfdrtDict_346_0_5, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR), G__defined_typename("vector<int,allocator<int> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__sdfdrtDict_346_0_6, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR), G__defined_typename("vector<int,allocator<int> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__sdfdrtDict_346_0_7, 107, -1, G__defined_typename("vector<int,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__sdfdrtDict_346_0_8, 107, -1, G__defined_typename("vector<int,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_346_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<int,allocator<int> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_346_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<int,allocator<int> >::size_type' 0 - sz i - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__sdfdrtDict_346_0_11, 107, -1, G__defined_typename("vector<int,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__sdfdrtDict_346_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_346_0_13, 105, -1, G__defined_typename("vector<int,allocator<int> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_346_0_14, 105, -1, G__defined_typename("vector<int,allocator<int> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__sdfdrtDict_346_0_15, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__sdfdrtDict_346_0_16, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<int,allocator<int> >::size_type' 0 - n i - - 11 'int()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__sdfdrtDict_346_0_17, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__sdfdrtDict_346_0_18, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' 'vector<int,allocator<int> >::const_iterator' 10 - first u 'vector<int,allocator<int> >::iterator' 'vector<int,allocator<int> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sdfdrtDict_346_0_19, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__sdfdrtDict_346_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__sdfdrtDict_346_0_21, 105, -1, -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__sdfdrtDict_346_0_22, 105, -1, -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__sdfdrtDict_346_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__sdfdrtDict_346_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_346_0_25, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' - 0 - position i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_346_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' - 0 - position u 'vector<int,allocator<int> >::iterator' 'vector<int,allocator<int> >::const_iterator' 10 - first "
"u 'vector<int,allocator<int> >::iterator' 'vector<int,allocator<int> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_346_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' - 0 - position k - 'vector<int,allocator<int> >::size_type' 0 - n "
"i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__sdfdrtDict_346_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_346_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_346_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' - 0 - first u 'vector<int,allocator<int> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__sdfdrtDict_346_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<int,allocator<int> >", 2728, G__sdfdrtDict_346_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR(void) {
   /* vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__sdfdrtDict_350_0_1, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__sdfdrtDict_350_0_2, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__sdfdrtDict_350_0_3, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__sdfdrtDict_350_0_4, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__sdfdrtDict_350_0_5, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__sdfdrtDict_350_0_6, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__sdfdrtDict_350_0_7, 107, -1, G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__sdfdrtDict_350_0_8, 107, -1, G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_350_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_350_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - sz u 'vector<int,allocator<int> >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__sdfdrtDict_350_0_11, 107, -1, G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__sdfdrtDict_350_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_350_0_13, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_350_0_14, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >",7176,G__sdfdrtDict_350_0_15, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >",7176,G__sdfdrtDict_350_0_16, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n u 'vector<int,allocator<int> >' - 11 '(vector<int,allocator<int> >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >",7176,G__sdfdrtDict_350_0_17, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >",7176,G__sdfdrtDict_350_0_18, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator' 10 - first u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sdfdrtDict_350_0_19, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__sdfdrtDict_350_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__sdfdrtDict_350_0_21, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__sdfdrtDict_350_0_22, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__sdfdrtDict_350_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__sdfdrtDict_350_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_350_0_25, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - position u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_350_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - position u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator' 10 - first "
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_350_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - position k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n "
"u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__sdfdrtDict_350_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_350_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_350_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - first u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__sdfdrtDict_350_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >", 7302, G__sdfdrtDict_350_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR(void) {
   /* vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__sdfdrtDict_354_0_1, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__sdfdrtDict_354_0_2, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__sdfdrtDict_354_0_3, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__sdfdrtDict_354_0_4, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__sdfdrtDict_354_0_5, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__sdfdrtDict_354_0_6, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__sdfdrtDict_354_0_7, 107, -1, G__defined_typename("vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__sdfdrtDict_354_0_8, 107, -1, G__defined_typename("vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_354_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_354_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type' 0 - sz u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__sdfdrtDict_354_0_11, 107, -1, G__defined_typename("vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__sdfdrtDict_354_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_354_0_13, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_354_0_14, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >",16324,G__sdfdrtDict_354_0_15, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >",16324,G__sdfdrtDict_354_0_16, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type' 0 - n u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >' - 11 '(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >",16324,G__sdfdrtDict_354_0_17, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >",16324,G__sdfdrtDict_354_0_18, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator' 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::const_iterator' 10 - first u 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator' 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sdfdrtDict_354_0_19, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__sdfdrtDict_354_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__sdfdrtDict_354_0_21, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__sdfdrtDict_354_0_22, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__sdfdrtDict_354_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__sdfdrtDict_354_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_354_0_25, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator' - 0 - position u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_354_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator' - 0 - position u 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator' 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::const_iterator' 10 - first "
"u 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator' 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_354_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator' - 0 - position k - 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::size_type' 0 - n "
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__sdfdrtDict_354_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_354_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_354_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator' - 0 - first u 'vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__sdfdrtDict_354_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >", 16450, G__sdfdrtDict_354_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR(void) {
   /* vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__sdfdrtDict_358_0_1, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__sdfdrtDict_358_0_2, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__sdfdrtDict_358_0_3, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__sdfdrtDict_358_0_4, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__sdfdrtDict_358_0_5, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__sdfdrtDict_358_0_6, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__sdfdrtDict_358_0_7, 107, -1, G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__sdfdrtDict_358_0_8, 107, -1, G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_358_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_358_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - sz u 'vector<double,allocator<double> >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__sdfdrtDict_358_0_11, 107, -1, G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__sdfdrtDict_358_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_358_0_13, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_358_0_14, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >",8392,G__sdfdrtDict_358_0_15, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >",8392,G__sdfdrtDict_358_0_16, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n u 'vector<double,allocator<double> >' - 11 '(vector<double,allocator<double> >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >",8392,G__sdfdrtDict_358_0_17, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >",8392,G__sdfdrtDict_358_0_18, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator' 10 - first u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sdfdrtDict_358_0_19, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__sdfdrtDict_358_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__sdfdrtDict_358_0_21, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__sdfdrtDict_358_0_22, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__sdfdrtDict_358_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<double,allocator<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__sdfdrtDict_358_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_358_0_25, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - position u 'vector<double,allocator<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_358_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - position u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator' 10 - first "
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_358_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - position k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n "
"u 'vector<double,allocator<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__sdfdrtDict_358_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_358_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_358_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - first u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__sdfdrtDict_358_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >", 8518, G__sdfdrtDict_358_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR(void) {
   /* vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__sdfdrtDict_362_0_1, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__sdfdrtDict_362_0_2, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__sdfdrtDict_362_0_3, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__sdfdrtDict_362_0_4, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__sdfdrtDict_362_0_5, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__sdfdrtDict_362_0_6, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__sdfdrtDict_362_0_7, 107, -1, G__defined_typename("vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__sdfdrtDict_362_0_8, 107, -1, G__defined_typename("vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_362_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_362_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type' 0 - sz u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__sdfdrtDict_362_0_11, 107, -1, G__defined_typename("vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__sdfdrtDict_362_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_362_0_13, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_362_0_14, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >",18756,G__sdfdrtDict_362_0_15, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >",18756,G__sdfdrtDict_362_0_16, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type' 0 - n u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >' - 11 '(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >",18756,G__sdfdrtDict_362_0_17, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >",18756,G__sdfdrtDict_362_0_18, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator' 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::const_iterator' 10 - first u 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator' 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sdfdrtDict_362_0_19, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__sdfdrtDict_362_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__sdfdrtDict_362_0_21, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__sdfdrtDict_362_0_22, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__sdfdrtDict_362_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__sdfdrtDict_362_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_362_0_25, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator' - 0 - position u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_362_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator' - 0 - position u 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator' 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::const_iterator' 10 - first "
"u 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator' 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_362_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator' - 0 - position k - 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::size_type' 0 - n "
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__sdfdrtDict_362_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_362_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_362_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator' - 0 - first u 'vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__sdfdrtDict_362_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >", 18882, G__sdfdrtDict_362_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncrusdraw_class(void) {
   /* rusdraw_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdraw_class));
   G__memfunc_setup("rusdraw_class",1405,G__sdfdrtDict_365_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_rusdraw_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_365_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&rusdraw_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_365_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rusdraw_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_365_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&rusdraw_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_365_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&rusdraw_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_365_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_365_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rusdraw_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_365_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&rusdraw_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_365_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rusdraw_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_365_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&rusdraw_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("rusdraw_class", 1405, G__sdfdrtDict_365_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_rusdraw_class), -1, 0, 1, 1, 1, 0, "u 'rusdraw_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~rusdraw_class", 1531, G__sdfdrtDict_365_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_365_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_rusdraw_class), -1, 1, 1, 1, 1, 0, "u 'rusdraw_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncrusdmc_class(void) {
   /* rusdmc_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc_class));
   G__memfunc_setup("rusdmc_class",1283,G__sdfdrtDict_366_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_366_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&rusdmc_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_366_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rusdmc_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_366_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&rusdmc_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_366_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&rusdmc_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_366_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_366_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rusdmc_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_366_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&rusdmc_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_366_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rusdmc_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_366_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&rusdmc_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("rusdmc_class", 1283, G__sdfdrtDict_366_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc_class), -1, 0, 1, 1, 1, 0, "u 'rusdmc_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~rusdmc_class", 1409, G__sdfdrtDict_366_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_366_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc_class), -1, 1, 1, 1, 1, 0, "u 'rusdmc_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncrusdmc1_class(void) {
   /* rusdmc1_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc1_class));
   G__memfunc_setup("rusdmc1_class",1332,G__sdfdrtDict_367_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc1_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_367_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&rusdmc1_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_367_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rusdmc1_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_367_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&rusdmc1_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_367_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&rusdmc1_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_367_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_367_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rusdmc1_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_367_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&rusdmc1_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_367_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rusdmc1_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_367_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&rusdmc1_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("rusdmc1_class", 1332, G__sdfdrtDict_367_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc1_class), -1, 0, 1, 1, 1, 0, "u 'rusdmc1_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~rusdmc1_class", 1458, G__sdfdrtDict_367_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_367_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_rusdmc1_class), -1, 1, 1, 1, 1, 0, "u 'rusdmc1_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncshowlib_class(void) {
   /* showlib_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_showlib_class));
   G__memfunc_setup("showlib_class",1389,G__sdfdrtDict_368_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_showlib_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_368_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&showlib_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_368_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&showlib_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_368_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&showlib_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_368_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&showlib_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_368_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_368_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&showlib_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_368_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&showlib_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_368_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&showlib_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_368_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&showlib_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("showlib_class", 1389, G__sdfdrtDict_368_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_showlib_class), -1, 0, 1, 1, 1, 0, "u 'showlib_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~showlib_class", 1515, G__sdfdrtDict_368_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_368_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_showlib_class), -1, 1, 1, 1, 1, 0, "u 'showlib_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbsdinfo_class(void) {
   /* bsdinfo_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_bsdinfo_class));
   G__memfunc_setup("bsdinfo_class",1370,G__sdfdrtDict_369_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_bsdinfo_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_369_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&bsdinfo_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_369_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&bsdinfo_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_369_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&bsdinfo_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_369_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&bsdinfo_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_369_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_369_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&bsdinfo_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_369_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&bsdinfo_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_369_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&bsdinfo_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_369_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&bsdinfo_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("bsdinfo_class", 1370, G__sdfdrtDict_369_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_bsdinfo_class), -1, 0, 1, 1, 1, 0, "u 'bsdinfo_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~bsdinfo_class", 1496, G__sdfdrtDict_369_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_369_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_bsdinfo_class), -1, 1, 1, 1, 1, 0, "u 'bsdinfo_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsdtrgbk_class(void) {
   /* sdtrgbk_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_sdtrgbk_class));
   G__memfunc_setup("sdtrgbk_class",1382,G__sdfdrtDict_370_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_sdtrgbk_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_370_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&sdtrgbk_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_370_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sdtrgbk_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_370_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&sdtrgbk_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_370_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&sdtrgbk_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_370_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_370_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sdtrgbk_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_370_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&sdtrgbk_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_370_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sdtrgbk_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_370_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&sdtrgbk_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("sdtrgbk_class", 1382, G__sdfdrtDict_370_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_sdtrgbk_class), -1, 0, 1, 1, 1, 0, "u 'sdtrgbk_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~sdtrgbk_class", 1508, G__sdfdrtDict_370_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_370_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_sdtrgbk_class), -1, 1, 1, 1, 1, 0, "u 'sdtrgbk_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR(void) {
   /* vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__sdfdrtDict_372_0_1, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR), G__defined_typename("vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__sdfdrtDict_372_0_2, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR), G__defined_typename("vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__sdfdrtDict_372_0_3, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__sdfdrtDict_372_0_4, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__sdfdrtDict_372_0_5, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__sdfdrtDict_372_0_6, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__sdfdrtDict_372_0_7, 107, -1, G__defined_typename("vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__sdfdrtDict_372_0_8, 107, -1, G__defined_typename("vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_372_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_372_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type' 0 - sz u 'vector<short,allocator<short> >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__sdfdrtDict_372_0_11, 107, -1, G__defined_typename("vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__sdfdrtDict_372_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_372_0_13, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR), G__defined_typename("vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_372_0_14, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR), G__defined_typename("vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >",8092,G__sdfdrtDict_372_0_15, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >",8092,G__sdfdrtDict_372_0_16, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type' 0 - n u 'vector<short,allocator<short> >' - 11 '(vector<short,allocator<short> >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >",8092,G__sdfdrtDict_372_0_17, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >",8092,G__sdfdrtDict_372_0_18, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator' 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::const_iterator' 10 - first u 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator' 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sdfdrtDict_372_0_19, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__sdfdrtDict_372_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__sdfdrtDict_372_0_21, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__sdfdrtDict_372_0_22, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__sdfdrtDict_372_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<short,allocator<short> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__sdfdrtDict_372_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_372_0_25, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator' - 0 - position u 'vector<short,allocator<short> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_372_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator' - 0 - position u 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator' 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::const_iterator' 10 - first "
"u 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator' 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_372_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator' - 0 - position k - 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::size_type' 0 - n "
"u 'vector<short,allocator<short> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__sdfdrtDict_372_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_372_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_372_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator' - 0 - first u 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__sdfdrtDict_372_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >", 8218, G__sdfdrtDict_372_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR(void) {
   /* vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__sdfdrtDict_376_0_1, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__sdfdrtDict_376_0_2, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__sdfdrtDict_376_0_3, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__sdfdrtDict_376_0_4, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__sdfdrtDict_376_0_5, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__sdfdrtDict_376_0_6, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__sdfdrtDict_376_0_7, 107, -1, G__defined_typename("vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__sdfdrtDict_376_0_8, 107, -1, G__defined_typename("vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_376_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_376_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type' 0 - sz u 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__sdfdrtDict_376_0_11, 107, -1, G__defined_typename("vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__sdfdrtDict_376_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_376_0_13, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_376_0_14, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >",18156,G__sdfdrtDict_376_0_15, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >",18156,G__sdfdrtDict_376_0_16, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type' 0 - n u 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >' - 11 '(vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >",18156,G__sdfdrtDict_376_0_17, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >",18156,G__sdfdrtDict_376_0_18, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator' 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::const_iterator' 10 - first u 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator' 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sdfdrtDict_376_0_19, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__sdfdrtDict_376_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__sdfdrtDict_376_0_21, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__sdfdrtDict_376_0_22, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__sdfdrtDict_376_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__sdfdrtDict_376_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_376_0_25, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator' - 0 - position u 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_376_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator' - 0 - position u 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator' 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::const_iterator' 10 - first "
"u 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator' 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_376_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator' - 0 - position k - 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::size_type' 0 - n "
"u 'vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__sdfdrtDict_376_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_376_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_376_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator' - 0 - first u 'vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__sdfdrtDict_376_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >", 18282, G__sdfdrtDict_376_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSDEventSubData_class(void) {
   /* SDEventSubData_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class));
   G__memfunc_setup("SDEventSubData_class",1970,G__sdfdrtDict_379_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,G__sdfdrtDict_379_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iwf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadToDST",846,G__sdfdrtDict_379_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iwf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sdfdrtDict_379_0_4, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SDEventSubData_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_379_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDEventSubData_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_379_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SDEventSubData_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_379_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SDEventSubData_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_379_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_379_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDEventSubData_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_379_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SDEventSubData_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_379_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDEventSubData_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_379_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SDEventSubData_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SDEventSubData_class", 1970, G__sdfdrtDict_379_0_16, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class), -1, 0, 1, 1, 1, 0, "u 'SDEventSubData_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SDEventSubData_class", 2096, G__sdfdrtDict_379_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_379_0_18, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class), -1, 1, 1, 1, 1, 0, "u 'SDEventSubData_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctasdevent_class(void) {
   /* tasdevent_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_tasdevent_class));
   G__memfunc_setup("pos2xxyy",870,G__sdfdrtDict_380_0_1, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pos_flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pos2xxyy",870,G__sdfdrtDict_380_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trigp2xxyyt",1198,G__sdfdrtDict_380_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - trigp I - 'Int_t' 0 - trigp_xxyy "
"I - 'Int_t' 0 - trigp_usec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("itrigp2xxyyt",1303,G__sdfdrtDict_380_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - itrigp I - 'Int_t' 0 - trigp_xxyy "
"I - 'Int_t' 0 - trigp_usec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("tasdevent_class",1603,G__sdfdrtDict_380_0_8, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_tasdevent_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sdfdrtDict_380_0_9, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&tasdevent_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_380_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tasdevent_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_380_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&tasdevent_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_380_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&tasdevent_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_380_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_380_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tasdevent_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_380_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tasdevent_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_380_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tasdevent_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_380_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tasdevent_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("tasdevent_class", 1603, G__sdfdrtDict_380_0_21, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_tasdevent_class), -1, 0, 1, 1, 1, 0, "u 'tasdevent_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~tasdevent_class", 1729, G__sdfdrtDict_380_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_380_0_23, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_tasdevent_class), -1, 1, 1, 1, 1, 0, "u 'tasdevent_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR(void) {
   /* vector<SDEventSubData_class,allocator<SDEventSubData_class> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR));
   G__memfunc_setup("at",213,G__sdfdrtDict_382_0_1, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class), G__defined_typename("vector<SDEventSubData_class,allocator<SDEventSubData_class> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__sdfdrtDict_382_0_2, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class), G__defined_typename("vector<SDEventSubData_class,allocator<SDEventSubData_class> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__sdfdrtDict_382_0_3, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__sdfdrtDict_382_0_4, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__sdfdrtDict_382_0_5, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgRcLcLiteratorgR), G__defined_typename("vector<SDEventSubData_class,allocator<SDEventSubData_class> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__sdfdrtDict_382_0_6, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgRcLcLiteratorgR), G__defined_typename("vector<SDEventSubData_class,allocator<SDEventSubData_class> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__sdfdrtDict_382_0_7, 107, -1, G__defined_typename("vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__sdfdrtDict_382_0_8, 107, -1, G__defined_typename("vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_382_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_382_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type' 0 - sz u 'SDEventSubData_class' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__sdfdrtDict_382_0_11, 107, -1, G__defined_typename("vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__sdfdrtDict_382_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_382_0_13, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class), G__defined_typename("vector<SDEventSubData_class,allocator<SDEventSubData_class> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_382_0_14, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class), G__defined_typename("vector<SDEventSubData_class,allocator<SDEventSubData_class> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDEventSubData_class,allocator<SDEventSubData_class> >",5880,G__sdfdrtDict_382_0_15, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDEventSubData_class,allocator<SDEventSubData_class> >",5880,G__sdfdrtDict_382_0_16, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type' 0 - n u 'SDEventSubData_class' - 11 'SDEventSubData_class()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDEventSubData_class,allocator<SDEventSubData_class> >",5880,G__sdfdrtDict_382_0_17, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDEventSubData_class,allocator<SDEventSubData_class> >",5880,G__sdfdrtDict_382_0_18, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator' 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::const_iterator' 10 - first u 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator' 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sdfdrtDict_382_0_19, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__sdfdrtDict_382_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__sdfdrtDict_382_0_21, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__sdfdrtDict_382_0_22, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDEventSubData_class), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__sdfdrtDict_382_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SDEventSubData_class' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__sdfdrtDict_382_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_382_0_25, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator' - 0 - position u 'SDEventSubData_class' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_382_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator' - 0 - position u 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator' 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::const_iterator' 10 - first "
"u 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator' 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_382_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator' - 0 - position k - 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::size_type' 0 - n "
"u 'SDEventSubData_class' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__sdfdrtDict_382_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_382_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_382_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator' - 0 - first u 'vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__sdfdrtDict_382_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<SDEventSubData_class,allocator<SDEventSubData_class> >", 6006, G__sdfdrtDict_382_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSDCalibHostData_class(void) {
   /* SDCalibHostData_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class));
   G__memfunc_setup("SDCalibHostData_class",2047,G__sdfdrtDict_385_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,G__sdfdrtDict_385_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ihost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadToDST",846,G__sdfdrtDict_385_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ihost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sdfdrtDict_385_0_4, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SDCalibHostData_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_385_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDCalibHostData_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_385_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SDCalibHostData_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_385_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SDCalibHostData_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_385_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_385_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDCalibHostData_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_385_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SDCalibHostData_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_385_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDCalibHostData_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_385_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SDCalibHostData_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SDCalibHostData_class", 2047, G__sdfdrtDict_385_0_16, (int) ('i'), 
G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class), -1, 0, 1, 1, 1, 0, "u 'SDCalibHostData_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SDCalibHostData_class", 2173, G__sdfdrtDict_385_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_385_0_18, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class), -1, 1, 1, 1, 1, 0, "u 'SDCalibHostData_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSDCalibSubData_class(void) {
   /* SDCalibSubData_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class));
   G__memfunc_setup("SDCalibSubData_class",1931,G__sdfdrtDict_386_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,G__sdfdrtDict_386_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadToDST",846,G__sdfdrtDict_386_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sdfdrtDict_386_0_4, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SDCalibSubData_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_386_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDCalibSubData_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_386_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SDCalibSubData_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_386_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SDCalibSubData_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_386_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_386_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDCalibSubData_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_386_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SDCalibSubData_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_386_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDCalibSubData_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_386_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SDCalibSubData_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SDCalibSubData_class", 1931, G__sdfdrtDict_386_0_16, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class), -1, 0, 1, 1, 1, 0, "u 'SDCalibSubData_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SDCalibSubData_class", 2057, G__sdfdrtDict_386_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_386_0_18, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class), -1, 1, 1, 1, 1, 0, "u 'SDCalibSubData_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR(void) {
   /* vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__sdfdrtDict_388_0_1, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__sdfdrtDict_388_0_2, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__sdfdrtDict_388_0_3, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__sdfdrtDict_388_0_4, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__sdfdrtDict_388_0_5, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__sdfdrtDict_388_0_6, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__sdfdrtDict_388_0_7, 107, -1, G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__sdfdrtDict_388_0_8, 107, -1, G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_388_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_388_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - sz u 'vector<float,allocator<float> >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__sdfdrtDict_388_0_11, 107, -1, G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__sdfdrtDict_388_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_388_0_13, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_388_0_14, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >",7988,G__sdfdrtDict_388_0_15, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >",7988,G__sdfdrtDict_388_0_16, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n u 'vector<float,allocator<float> >' - 11 '(vector<float,allocator<float> >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >",7988,G__sdfdrtDict_388_0_17, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >",7988,G__sdfdrtDict_388_0_18, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator' 10 - first u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sdfdrtDict_388_0_19, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__sdfdrtDict_388_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__sdfdrtDict_388_0_21, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__sdfdrtDict_388_0_22, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__sdfdrtDict_388_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<float,allocator<float> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__sdfdrtDict_388_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_388_0_25, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' - 0 - position u 'vector<float,allocator<float> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_388_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' - 0 - position u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator' 10 - first "
"u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_388_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' - 0 - position k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n "
"u 'vector<float,allocator<float> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__sdfdrtDict_388_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_388_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_388_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' - 0 - first u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__sdfdrtDict_388_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >", 8114, G__sdfdrtDict_388_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSDCalibWeatherData_class(void) {
   /* SDCalibWeatherData_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibWeatherData_class));
   G__memfunc_setup("SDCalibWeatherData_class",2353,G__sdfdrtDict_391_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibWeatherData_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,G__sdfdrtDict_391_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iweat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadToDST",846,G__sdfdrtDict_391_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iweat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sdfdrtDict_391_0_4, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SDCalibWeatherData_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_391_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDCalibWeatherData_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_391_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SDCalibWeatherData_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_391_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SDCalibWeatherData_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__sdfdrtDict_391_0_8, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__sdfdrtDict_391_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__sdfdrtDict_391_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_391_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_391_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDCalibWeatherData_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_391_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SDCalibWeatherData_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_391_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDCalibWeatherData_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_391_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SDCalibWeatherData_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SDCalibWeatherData_class", 2353, G__sdfdrtDict_391_0_16, (int) ('i'), 
G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibWeatherData_class), -1, 0, 1, 1, 1, 0, "u 'SDCalibWeatherData_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SDCalibWeatherData_class", 2479, G__sdfdrtDict_391_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_391_0_18, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibWeatherData_class), -1, 1, 1, 1, 1, 0, "u 'SDCalibWeatherData_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctasdcalib_class(void) {
   /* tasdcalib_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalib_class));
   G__memfunc_setup("tasdcalib_class",1564,G__sdfdrtDict_392_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalib_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_392_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&tasdcalib_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_392_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tasdcalib_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_392_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&tasdcalib_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_392_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&tasdcalib_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_392_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_392_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tasdcalib_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_392_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tasdcalib_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_392_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tasdcalib_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_392_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tasdcalib_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("tasdcalib_class", 1564, G__sdfdrtDict_392_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalib_class), -1, 0, 1, 1, 1, 0, "u 'tasdcalib_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~tasdcalib_class", 1690, G__sdfdrtDict_392_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_392_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalib_class), -1, 1, 1, 1, 1, 0, "u 'tasdcalib_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR(void) {
   /* vector<SDCalibHostData_class,allocator<SDCalibHostData_class> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR));
   G__memfunc_setup("at",213,G__sdfdrtDict_394_0_1, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class), G__defined_typename("vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__sdfdrtDict_394_0_2, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class), G__defined_typename("vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__sdfdrtDict_394_0_3, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__sdfdrtDict_394_0_4, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__sdfdrtDict_394_0_5, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgRcLcLiteratorgR), G__defined_typename("vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__sdfdrtDict_394_0_6, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgRcLcLiteratorgR), G__defined_typename("vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__sdfdrtDict_394_0_7, 107, -1, G__defined_typename("vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__sdfdrtDict_394_0_8, 107, -1, G__defined_typename("vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_394_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_394_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type' 0 - sz u 'SDCalibHostData_class' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__sdfdrtDict_394_0_11, 107, -1, G__defined_typename("vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__sdfdrtDict_394_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_394_0_13, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class), G__defined_typename("vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_394_0_14, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class), G__defined_typename("vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >",6034,G__sdfdrtDict_394_0_15, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >",6034,G__sdfdrtDict_394_0_16, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type' 0 - n u 'SDCalibHostData_class' - 11 'SDCalibHostData_class()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >",6034,G__sdfdrtDict_394_0_17, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >",6034,G__sdfdrtDict_394_0_18, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator' 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::const_iterator' 10 - first u 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator' 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sdfdrtDict_394_0_19, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__sdfdrtDict_394_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__sdfdrtDict_394_0_21, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__sdfdrtDict_394_0_22, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibHostData_class), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__sdfdrtDict_394_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SDCalibHostData_class' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__sdfdrtDict_394_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_394_0_25, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator' - 0 - position u 'SDCalibHostData_class' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_394_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator' - 0 - position u 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator' 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::const_iterator' 10 - first "
"u 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator' 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_394_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator' - 0 - position k - 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::size_type' 0 - n "
"u 'SDCalibHostData_class' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__sdfdrtDict_394_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_394_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_394_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator' - 0 - first u 'vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__sdfdrtDict_394_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >", 6160, G__sdfdrtDict_394_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR(void) {
   /* vector<SDCalibSubData_class,allocator<SDCalibSubData_class> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR));
   G__memfunc_setup("at",213,G__sdfdrtDict_398_0_1, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class), G__defined_typename("vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__sdfdrtDict_398_0_2, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class), G__defined_typename("vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__sdfdrtDict_398_0_3, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__sdfdrtDict_398_0_4, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__sdfdrtDict_398_0_5, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgRcLcLiteratorgR), G__defined_typename("vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__sdfdrtDict_398_0_6, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgRcLcLiteratorgR), G__defined_typename("vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__sdfdrtDict_398_0_7, 107, -1, G__defined_typename("vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__sdfdrtDict_398_0_8, 107, -1, G__defined_typename("vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_398_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_398_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type' 0 - sz u 'SDCalibSubData_class' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__sdfdrtDict_398_0_11, 107, -1, G__defined_typename("vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__sdfdrtDict_398_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_398_0_13, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class), G__defined_typename("vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_398_0_14, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class), G__defined_typename("vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >",5802,G__sdfdrtDict_398_0_15, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >",5802,G__sdfdrtDict_398_0_16, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type' 0 - n u 'SDCalibSubData_class' - 11 'SDCalibSubData_class()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >",5802,G__sdfdrtDict_398_0_17, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >",5802,G__sdfdrtDict_398_0_18, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator' 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::const_iterator' 10 - first u 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator' 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sdfdrtDict_398_0_19, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__sdfdrtDict_398_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__sdfdrtDict_398_0_21, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__sdfdrtDict_398_0_22, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibSubData_class), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__sdfdrtDict_398_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SDCalibSubData_class' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__sdfdrtDict_398_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_398_0_25, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator' - 0 - position u 'SDCalibSubData_class' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_398_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator' - 0 - position u 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator' 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::const_iterator' 10 - first "
"u 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator' 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_398_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator' - 0 - position k - 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::size_type' 0 - n "
"u 'SDCalibSubData_class' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__sdfdrtDict_398_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_398_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_398_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator' - 0 - first u 'vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__sdfdrtDict_398_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >", 5928, G__sdfdrtDict_398_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR(void) {
   /* vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR));
   G__memfunc_setup("at",213,G__sdfdrtDict_402_0_1, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibWeatherData_class), G__defined_typename("vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__sdfdrtDict_402_0_2, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibWeatherData_class), G__defined_typename("vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__sdfdrtDict_402_0_3, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__sdfdrtDict_402_0_4, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__sdfdrtDict_402_0_5, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgRcLcLiteratorgR), G__defined_typename("vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__sdfdrtDict_402_0_6, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgRcLcLiteratorgR), G__defined_typename("vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__sdfdrtDict_402_0_7, 107, -1, G__defined_typename("vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__sdfdrtDict_402_0_8, 107, -1, G__defined_typename("vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_402_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_402_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type' 0 - sz u 'SDCalibWeatherData_class' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__sdfdrtDict_402_0_11, 107, -1, G__defined_typename("vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__sdfdrtDict_402_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_402_0_13, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibWeatherData_class), G__defined_typename("vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_402_0_14, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibWeatherData_class), G__defined_typename("vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >",6646,G__sdfdrtDict_402_0_15, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >",6646,G__sdfdrtDict_402_0_16, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type' 0 - n u 'SDCalibWeatherData_class' - 11 'SDCalibWeatherData_class()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >",6646,G__sdfdrtDict_402_0_17, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >",6646,G__sdfdrtDict_402_0_18, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator' 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::const_iterator' 10 - first u 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator' 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sdfdrtDict_402_0_19, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__sdfdrtDict_402_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__sdfdrtDict_402_0_21, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibWeatherData_class), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__sdfdrtDict_402_0_22, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibWeatherData_class), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__sdfdrtDict_402_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SDCalibWeatherData_class' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__sdfdrtDict_402_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_402_0_25, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator' - 0 - position u 'SDCalibWeatherData_class' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_402_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator' - 0 - position u 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator' 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::const_iterator' 10 - first "
"u 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator' 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_402_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator' - 0 - position k - 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::size_type' 0 - n "
"u 'SDCalibWeatherData_class' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__sdfdrtDict_402_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_402_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_402_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator' - 0 - first u 'vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__sdfdrtDict_402_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >", 6772, G__sdfdrtDict_402_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSDCalibevData_class(void) {
   /* SDCalibevData_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class));
   G__memfunc_setup("loadFromDST",1055,G__sdfdrtDict_405_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iwf", "iwf is the index of the triggered waveform", (void*) NULL, 0);
   G__memfunc_setup("loadToDST",846,G__sdfdrtDict_405_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iwf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SDCalibevData_class",1852,G__sdfdrtDict_405_0_3, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sdfdrtDict_405_0_4, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SDCalibevData_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_405_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDCalibevData_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_405_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SDCalibevData_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_405_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SDCalibevData_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_405_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_405_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDCalibevData_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_405_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SDCalibevData_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_405_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDCalibevData_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_405_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SDCalibevData_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SDCalibevData_class", 1852, G__sdfdrtDict_405_0_16, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class), -1, 0, 1, 1, 1, 0, "u 'SDCalibevData_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SDCalibevData_class", 1978, G__sdfdrtDict_405_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_405_0_18, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class), -1, 1, 1, 1, 1, 0, "u 'SDCalibevData_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSDCalibevWeatherData_class(void) {
   /* SDCalibevWeatherData_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class));
   G__memfunc_setup("loadFromDST",1055,G__sdfdrtDict_406_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iweat", "iweat is the index of the weather station", (void*) NULL, 0);
   G__memfunc_setup("loadToDST",846,G__sdfdrtDict_406_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iweat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SDCalibevWeatherData_class",2572,G__sdfdrtDict_406_0_3, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sdfdrtDict_406_0_4, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SDCalibevWeatherData_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_406_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDCalibevWeatherData_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_406_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SDCalibevWeatherData_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_406_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SDCalibevWeatherData_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_406_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_406_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDCalibevWeatherData_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_406_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SDCalibevWeatherData_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_406_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDCalibevWeatherData_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_406_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SDCalibevWeatherData_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SDCalibevWeatherData_class", 2572, G__sdfdrtDict_406_0_16, (int) ('i'), 
G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class), -1, 0, 1, 1, 1, 0, "u 'SDCalibevWeatherData_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SDCalibevWeatherData_class", 2698, G__sdfdrtDict_406_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_406_0_18, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class), -1, 1, 1, 1, 1, 0, "u 'SDCalibevWeatherData_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSDCalibevSimInfo_class(void) {
   /* SDCalibevSimInfo_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevSimInfo_class));
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SDCalibevSimInfo_class",2167,G__sdfdrtDict_407_0_3, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevSimInfo_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sdfdrtDict_407_0_4, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SDCalibevSimInfo_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_407_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDCalibevSimInfo_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_407_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SDCalibevSimInfo_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_407_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SDCalibevSimInfo_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_407_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_407_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDCalibevSimInfo_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_407_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SDCalibevSimInfo_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_407_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDCalibevSimInfo_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_407_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SDCalibevSimInfo_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SDCalibevSimInfo_class", 2167, G__sdfdrtDict_407_0_16, (int) ('i'), 
G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevSimInfo_class), -1, 0, 1, 1, 1, 0, "u 'SDCalibevSimInfo_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SDCalibevSimInfo_class", 2293, G__sdfdrtDict_407_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_407_0_18, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevSimInfo_class), -1, 1, 1, 1, 1, 0, "u 'SDCalibevSimInfo_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctasdcalibev_class(void) {
   /* tasdcalibev_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalibev_class));
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("tasdcalibev_class",1783,G__sdfdrtDict_408_0_4, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalibev_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sdfdrtDict_408_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&tasdcalibev_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_408_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tasdcalibev_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_408_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&tasdcalibev_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_408_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&tasdcalibev_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_408_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_408_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tasdcalibev_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_408_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tasdcalibev_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_408_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tasdcalibev_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_408_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tasdcalibev_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("tasdcalibev_class", 1783, G__sdfdrtDict_408_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalibev_class), -1, 0, 1, 1, 1, 0, "u 'tasdcalibev_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~tasdcalibev_class", 1909, G__sdfdrtDict_408_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_408_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_tasdcalibev_class), -1, 1, 1, 1, 1, 0, "u 'tasdcalibev_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR(void) {
   /* vector<SDCalibevData_class,allocator<SDCalibevData_class> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR));
   G__memfunc_setup("at",213,G__sdfdrtDict_410_0_1, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class), G__defined_typename("vector<SDCalibevData_class,allocator<SDCalibevData_class> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__sdfdrtDict_410_0_2, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class), G__defined_typename("vector<SDCalibevData_class,allocator<SDCalibevData_class> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__sdfdrtDict_410_0_3, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__sdfdrtDict_410_0_4, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__sdfdrtDict_410_0_5, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgRcLcLiteratorgR), G__defined_typename("vector<SDCalibevData_class,allocator<SDCalibevData_class> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__sdfdrtDict_410_0_6, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgRcLcLiteratorgR), G__defined_typename("vector<SDCalibevData_class,allocator<SDCalibevData_class> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__sdfdrtDict_410_0_7, 107, -1, G__defined_typename("vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__sdfdrtDict_410_0_8, 107, -1, G__defined_typename("vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_410_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_410_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type' 0 - sz u 'SDCalibevData_class' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__sdfdrtDict_410_0_11, 107, -1, G__defined_typename("vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__sdfdrtDict_410_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_410_0_13, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class), G__defined_typename("vector<SDCalibevData_class,allocator<SDCalibevData_class> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_410_0_14, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class), G__defined_typename("vector<SDCalibevData_class,allocator<SDCalibevData_class> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDCalibevData_class,allocator<SDCalibevData_class> >",5644,G__sdfdrtDict_410_0_15, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDCalibevData_class,allocator<SDCalibevData_class> >",5644,G__sdfdrtDict_410_0_16, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type' 0 - n u 'SDCalibevData_class' - 11 'SDCalibevData_class()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDCalibevData_class,allocator<SDCalibevData_class> >",5644,G__sdfdrtDict_410_0_17, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDCalibevData_class,allocator<SDCalibevData_class> >",5644,G__sdfdrtDict_410_0_18, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator' 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::const_iterator' 10 - first u 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator' 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sdfdrtDict_410_0_19, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__sdfdrtDict_410_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__sdfdrtDict_410_0_21, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__sdfdrtDict_410_0_22, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevData_class), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__sdfdrtDict_410_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SDCalibevData_class' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__sdfdrtDict_410_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_410_0_25, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator' - 0 - position u 'SDCalibevData_class' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_410_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator' - 0 - position u 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator' 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::const_iterator' 10 - first "
"u 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator' 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_410_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator' - 0 - position k - 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::size_type' 0 - n "
"u 'SDCalibevData_class' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__sdfdrtDict_410_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_410_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_410_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator' - 0 - first u 'vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__sdfdrtDict_410_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<SDCalibevData_class,allocator<SDCalibevData_class> >", 5770, G__sdfdrtDict_410_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR(void) {
   /* vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR));
   G__memfunc_setup("at",213,G__sdfdrtDict_414_0_1, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class), G__defined_typename("vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__sdfdrtDict_414_0_2, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class), G__defined_typename("vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__sdfdrtDict_414_0_3, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__sdfdrtDict_414_0_4, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__sdfdrtDict_414_0_5, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgRcLcLiteratorgR), G__defined_typename("vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__sdfdrtDict_414_0_6, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgRcLcLiteratorgR), G__defined_typename("vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__sdfdrtDict_414_0_7, 107, -1, G__defined_typename("vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__sdfdrtDict_414_0_8, 107, -1, G__defined_typename("vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_414_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_414_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type' 0 - sz u 'SDCalibevWeatherData_class' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__sdfdrtDict_414_0_11, 107, -1, G__defined_typename("vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__sdfdrtDict_414_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_414_0_13, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class), G__defined_typename("vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_414_0_14, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class), G__defined_typename("vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >",7084,G__sdfdrtDict_414_0_15, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >",7084,G__sdfdrtDict_414_0_16, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type' 0 - n u 'SDCalibevWeatherData_class' - 11 'SDCalibevWeatherData_class()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >",7084,G__sdfdrtDict_414_0_17, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >",7084,G__sdfdrtDict_414_0_18, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator' 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::const_iterator' 10 - first u 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator' 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sdfdrtDict_414_0_19, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__sdfdrtDict_414_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__sdfdrtDict_414_0_21, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__sdfdrtDict_414_0_22, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_SDCalibevWeatherData_class), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__sdfdrtDict_414_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SDCalibevWeatherData_class' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__sdfdrtDict_414_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_414_0_25, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator' - 0 - position u 'SDCalibevWeatherData_class' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_414_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator' - 0 - position u 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator' 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::const_iterator' 10 - first "
"u 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator' 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_414_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator' - 0 - position k - 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::size_type' 0 - n "
"u 'SDCalibevWeatherData_class' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__sdfdrtDict_414_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_414_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_414_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator' - 0 - first u 'vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__sdfdrtDict_414_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >", 7210, G__sdfdrtDict_414_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncrufptn_class(void) {
   /* rufptn_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rufptn_class));
   G__memfunc_setup("rufptn_class",1300,G__sdfdrtDict_417_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_rufptn_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_417_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&rufptn_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_417_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rufptn_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_417_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&rufptn_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_417_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&rufptn_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_417_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_417_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rufptn_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_417_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&rufptn_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_417_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rufptn_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_417_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&rufptn_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("rufptn_class", 1300, G__sdfdrtDict_417_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_rufptn_class), -1, 0, 1, 1, 1, 0, "u 'rufptn_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~rufptn_class", 1426, G__sdfdrtDict_417_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_417_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_rufptn_class), -1, 1, 1, 1, 1, 0, "u 'rufptn_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncrusdgeom_class(void) {
   /* rusdgeom_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rusdgeom_class));
   G__memfunc_setup("rusdgeom_class",1499,G__sdfdrtDict_418_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_rusdgeom_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_418_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&rusdgeom_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_418_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rusdgeom_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_418_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&rusdgeom_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_418_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&rusdgeom_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_418_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_418_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rusdgeom_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_418_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&rusdgeom_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_418_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rusdgeom_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_418_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&rusdgeom_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("rusdgeom_class", 1499, G__sdfdrtDict_418_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_rusdgeom_class), -1, 0, 1, 1, 1, 0, "u 'rusdgeom_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~rusdgeom_class", 1625, G__sdfdrtDict_418_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_418_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_rusdgeom_class), -1, 1, 1, 1, 1, 0, "u 'rusdgeom_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncrufldf_class(void) {
   /* rufldf_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_rufldf_class));
   G__memfunc_setup("rufldf_class",1272,G__sdfdrtDict_419_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_rufldf_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_419_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&rufldf_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_419_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rufldf_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_419_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&rufldf_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_419_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&rufldf_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_419_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_419_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rufldf_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_419_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&rufldf_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_419_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rufldf_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_419_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&rufldf_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("rufldf_class", 1272, G__sdfdrtDict_419_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_rufldf_class), -1, 0, 1, 1, 1, 0, "u 'rufldf_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~rufldf_class", 1398, G__sdfdrtDict_419_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_419_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_rufldf_class), -1, 1, 1, 1, 1, 0, "u 'rufldf_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncetrack_class(void) {
   /* etrack_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_etrack_class));
   G__memfunc_setup("etrack_class",1263,G__sdfdrtDict_420_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_etrack_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_420_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&etrack_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_420_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&etrack_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_420_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&etrack_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_420_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&etrack_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_420_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_420_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&etrack_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_420_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&etrack_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_420_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&etrack_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_420_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&etrack_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("etrack_class", 1263, G__sdfdrtDict_420_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_etrack_class), -1, 0, 1, 1, 1, 0, "u 'etrack_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~etrack_class", 1389, G__sdfdrtDict_420_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_420_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_etrack_class), -1, 1, 1, 1, 1, 0, "u 'etrack_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncatmpar_class(void) {
   /* atmpar_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_atmpar_class));
   G__memfunc_setup("atmpar_class",1274,G__sdfdrtDict_421_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_atmpar_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_421_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&atmpar_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_421_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&atmpar_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_421_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&atmpar_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_421_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&atmpar_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_421_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_421_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&atmpar_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_421_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&atmpar_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_421_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&atmpar_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_421_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&atmpar_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("atmpar_class", 1274, G__sdfdrtDict_421_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_atmpar_class), -1, 0, 1, 1, 1, 0, "u 'atmpar_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~atmpar_class", 1400, G__sdfdrtDict_421_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_421_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_atmpar_class), -1, 1, 1, 1, 1, 0, "u 'atmpar_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncfdraw_class(void) {
   /* fdraw_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdraw_class));
   G__memfunc_setup("fdraw_class",1161,G__sdfdrtDict_422_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_fdraw_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_422_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&fdraw_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_422_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&fdraw_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_422_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&fdraw_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_422_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&fdraw_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_422_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_422_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&fdraw_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_422_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&fdraw_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_422_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&fdraw_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_422_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&fdraw_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("fdraw_class", 1161, G__sdfdrtDict_422_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_fdraw_class), -1, 0, 1, 1, 1, 0, "u 'fdraw_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~fdraw_class", 1287, G__sdfdrtDict_422_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_422_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_fdraw_class), -1, 1, 1, 1, 1, 0, "u 'fdraw_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbrraw_class(void) {
   /* brraw_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brraw_class));
   G__memfunc_setup("brraw_class",1171,G__sdfdrtDict_431_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_brraw_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sdfdrtDict_431_0_2, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&brraw_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_431_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&brraw_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_431_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&brraw_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_431_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&brraw_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_431_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_431_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&brraw_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_431_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&brraw_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_431_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&brraw_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_431_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&brraw_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("brraw_class", 1171, G__sdfdrtDict_431_0_14, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_brraw_class), -1, 0, 1, 1, 1, 0, "u 'brraw_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~brraw_class", 1297, G__sdfdrtDict_431_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_431_0_16, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_brraw_class), -1, 1, 1, 1, 1, 0, "u 'brraw_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclrraw_class(void) {
   /* lrraw_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrraw_class));
   G__memfunc_setup("lrraw_class",1181,G__sdfdrtDict_432_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_lrraw_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sdfdrtDict_432_0_2, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&lrraw_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_432_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&lrraw_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_432_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&lrraw_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_432_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&lrraw_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_432_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_432_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&lrraw_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_432_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&lrraw_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_432_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&lrraw_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_432_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&lrraw_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("lrraw_class", 1181, G__sdfdrtDict_432_0_14, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_lrraw_class), -1, 0, 1, 1, 1, 0, "u 'lrraw_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~lrraw_class", 1307, G__sdfdrtDict_432_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_432_0_16, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_lrraw_class), -1, 1, 1, 1, 1, 0, "u 'lrraw_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncfdplane_class(void) {
   /* fdplane_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdplane_class));
   G__memfunc_setup("fdplane_class",1359,G__sdfdrtDict_433_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_fdplane_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_433_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&fdplane_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_433_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&fdplane_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_433_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&fdplane_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_433_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&fdplane_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_433_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_433_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&fdplane_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_433_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&fdplane_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_433_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&fdplane_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_433_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&fdplane_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("fdplane_class", 1359, G__sdfdrtDict_433_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_fdplane_class), -1, 0, 1, 1, 1, 0, "u 'fdplane_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~fdplane_class", 1485, G__sdfdrtDict_433_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_433_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_fdplane_class), -1, 1, 1, 1, 1, 0, "u 'fdplane_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbrplane_class(void) {
   /* brplane_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brplane_class));
   G__memfunc_setup("brplane_class",1369,G__sdfdrtDict_434_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_brplane_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sdfdrtDict_434_0_2, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&brplane_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_434_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&brplane_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_434_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&brplane_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_434_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&brplane_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_434_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_434_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&brplane_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_434_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&brplane_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_434_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&brplane_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_434_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&brplane_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("brplane_class", 1369, G__sdfdrtDict_434_0_14, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_brplane_class), -1, 0, 1, 1, 1, 0, "u 'brplane_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~brplane_class", 1495, G__sdfdrtDict_434_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_434_0_16, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_brplane_class), -1, 1, 1, 1, 1, 0, "u 'brplane_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclrplane_class(void) {
   /* lrplane_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrplane_class));
   G__memfunc_setup("lrplane_class",1379,G__sdfdrtDict_435_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_lrplane_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sdfdrtDict_435_0_2, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&lrplane_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_435_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&lrplane_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_435_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&lrplane_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_435_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&lrplane_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_435_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_435_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&lrplane_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_435_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&lrplane_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_435_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&lrplane_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_435_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&lrplane_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("lrplane_class", 1379, G__sdfdrtDict_435_0_14, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_lrplane_class), -1, 0, 1, 1, 1, 0, "u 'lrplane_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~lrplane_class", 1505, G__sdfdrtDict_435_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_435_0_16, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_lrplane_class), -1, 1, 1, 1, 1, 0, "u 'lrplane_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncfdprofile_class(void) {
   /* fdprofile_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdprofile_class));
   G__memfunc_setup("fdprofile_class",1584,G__sdfdrtDict_436_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_fdprofile_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_436_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&fdprofile_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_436_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&fdprofile_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_436_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&fdprofile_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_436_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&fdprofile_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_436_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_436_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&fdprofile_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_436_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&fdprofile_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_436_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&fdprofile_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_436_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&fdprofile_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("fdprofile_class", 1584, G__sdfdrtDict_436_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_fdprofile_class), -1, 0, 1, 1, 1, 0, "u 'fdprofile_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~fdprofile_class", 1710, G__sdfdrtDict_436_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_436_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_fdprofile_class), -1, 1, 1, 1, 1, 0, "u 'fdprofile_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbrprofile_class(void) {
   /* brprofile_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brprofile_class));
   G__memfunc_setup("brprofile_class",1594,G__sdfdrtDict_437_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_brprofile_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sdfdrtDict_437_0_2, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&brprofile_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_437_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&brprofile_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_437_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&brprofile_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_437_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&brprofile_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_437_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_437_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&brprofile_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_437_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&brprofile_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_437_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&brprofile_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_437_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&brprofile_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("brprofile_class", 1594, G__sdfdrtDict_437_0_14, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_brprofile_class), -1, 0, 1, 1, 1, 0, "u 'brprofile_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~brprofile_class", 1720, G__sdfdrtDict_437_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_437_0_16, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_brprofile_class), -1, 1, 1, 1, 1, 0, "u 'brprofile_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclrprofile_class(void) {
   /* lrprofile_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrprofile_class));
   G__memfunc_setup("lrprofile_class",1604,G__sdfdrtDict_438_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_lrprofile_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sdfdrtDict_438_0_2, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&lrprofile_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_438_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&lrprofile_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_438_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&lrprofile_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_438_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&lrprofile_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_438_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_438_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&lrprofile_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_438_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&lrprofile_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_438_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&lrprofile_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_438_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&lrprofile_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("lrprofile_class", 1604, G__sdfdrtDict_438_0_14, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_lrprofile_class), -1, 0, 1, 1, 1, 0, "u 'lrprofile_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~lrprofile_class", 1730, G__sdfdrtDict_438_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_438_0_16, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_lrprofile_class), -1, 1, 1, 1, 1, 0, "u 'lrprofile_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncfdtubeprofile_class(void) {
   /* fdtubeprofile_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdtubeprofile_class));
   G__memfunc_setup("fdtubeprofile_class",2016,G__sdfdrtDict_439_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_fdtubeprofile_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_439_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&fdtubeprofile_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_439_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&fdtubeprofile_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_439_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&fdtubeprofile_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_439_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&fdtubeprofile_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_439_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_439_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&fdtubeprofile_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_439_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&fdtubeprofile_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_439_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&fdtubeprofile_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_439_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&fdtubeprofile_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("fdtubeprofile_class", 2016, G__sdfdrtDict_439_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_fdtubeprofile_class), -1, 0, 1, 1, 1, 0, "u 'fdtubeprofile_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~fdtubeprofile_class", 2142, G__sdfdrtDict_439_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_439_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_fdtubeprofile_class), -1, 1, 1, 1, 1, 0, "u 'fdtubeprofile_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbrtubeprofile_class(void) {
   /* brtubeprofile_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_brtubeprofile_class));
   G__memfunc_setup("brtubeprofile_class",2026,G__sdfdrtDict_440_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_brtubeprofile_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sdfdrtDict_440_0_2, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&brtubeprofile_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_440_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&brtubeprofile_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_440_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&brtubeprofile_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_440_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&brtubeprofile_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_440_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_440_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&brtubeprofile_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_440_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&brtubeprofile_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_440_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&brtubeprofile_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_440_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&brtubeprofile_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("brtubeprofile_class", 2026, G__sdfdrtDict_440_0_14, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_brtubeprofile_class), -1, 0, 1, 1, 1, 0, "u 'brtubeprofile_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~brtubeprofile_class", 2152, G__sdfdrtDict_440_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_440_0_16, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_brtubeprofile_class), -1, 1, 1, 1, 1, 0, "u 'brtubeprofile_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclrtubeprofile_class(void) {
   /* lrtubeprofile_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_lrtubeprofile_class));
   G__memfunc_setup("lrtubeprofile_class",2036,G__sdfdrtDict_441_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_lrtubeprofile_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sdfdrtDict_441_0_2, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&lrtubeprofile_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_441_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&lrtubeprofile_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_441_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&lrtubeprofile_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_441_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&lrtubeprofile_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_441_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_441_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&lrtubeprofile_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_441_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&lrtubeprofile_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_441_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&lrtubeprofile_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_441_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&lrtubeprofile_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("lrtubeprofile_class", 2036, G__sdfdrtDict_441_0_14, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_lrtubeprofile_class), -1, 0, 1, 1, 1, 0, "u 'lrtubeprofile_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~lrtubeprofile_class", 2162, G__sdfdrtDict_441_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_441_0_16, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_lrtubeprofile_class), -1, 1, 1, 1, 1, 0, "u 'lrtubeprofile_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunchbar_class(void) {
   /* hbar_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_hbar_class));
   G__memfunc_setup("hbar_class",1042,G__sdfdrtDict_442_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_hbar_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_442_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&hbar_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_442_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hbar_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_442_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&hbar_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_442_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&hbar_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_442_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_442_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hbar_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_442_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hbar_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_442_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hbar_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_442_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hbar_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("hbar_class", 1042, G__sdfdrtDict_442_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_hbar_class), -1, 0, 1, 1, 1, 0, "u 'hbar_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~hbar_class", 1168, G__sdfdrtDict_442_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_442_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_hbar_class), -1, 1, 1, 1, 1, 0, "u 'hbar_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunchraw1_class(void) {
   /* hraw1_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_hraw1_class));
   G__memfunc_setup("hraw1_class",1112,G__sdfdrtDict_443_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_hraw1_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_443_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&hraw1_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_443_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hraw1_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_443_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&hraw1_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_443_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&hraw1_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_443_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_443_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hraw1_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_443_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hraw1_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_443_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hraw1_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_443_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hraw1_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("hraw1_class", 1112, G__sdfdrtDict_443_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_hraw1_class), -1, 0, 1, 1, 1, 0, "u 'hraw1_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~hraw1_class", 1238, G__sdfdrtDict_443_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_443_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_hraw1_class), -1, 1, 1, 1, 1, 0, "u 'hraw1_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmc04_class(void) {
   /* mc04_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_mc04_class));
   G__memfunc_setup("mc04_class",937,G__sdfdrtDict_444_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_mc04_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_444_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&mc04_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_444_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&mc04_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_444_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&mc04_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_444_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&mc04_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_444_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_444_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&mc04_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_444_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&mc04_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_444_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&mc04_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_444_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&mc04_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("mc04_class", 937, G__sdfdrtDict_444_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_mc04_class), -1, 0, 1, 1, 1, 0, "u 'mc04_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~mc04_class", 1063, G__sdfdrtDict_444_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_444_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_mc04_class), -1, 1, 1, 1, 1, 0, "u 'mc04_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmcraw_class(void) {
   /* mcraw_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_mcraw_class));
   G__memfunc_setup("mcraw_class",1167,G__sdfdrtDict_445_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_mcraw_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_445_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&mcraw_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_445_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&mcraw_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_445_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&mcraw_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_445_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&mcraw_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_445_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_445_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&mcraw_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_445_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&mcraw_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_445_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&mcraw_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_445_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&mcraw_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("mcraw_class", 1167, G__sdfdrtDict_445_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_mcraw_class), -1, 0, 1, 1, 1, 0, "u 'mcraw_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~mcraw_class", 1293, G__sdfdrtDict_445_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_445_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_mcraw_class), -1, 1, 1, 1, 1, 0, "u 'mcraw_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncstps2_class(void) {
   /* stps2_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_stps2_class));
   G__memfunc_setup("stps2_class",1137,G__sdfdrtDict_446_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_stps2_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_446_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&stps2_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_446_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&stps2_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_446_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&stps2_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_446_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&stps2_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_446_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_446_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&stps2_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_446_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&stps2_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_446_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&stps2_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_446_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&stps2_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("stps2_class", 1137, G__sdfdrtDict_446_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_stps2_class), -1, 0, 1, 1, 1, 0, "u 'stps2_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~stps2_class", 1263, G__sdfdrtDict_446_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_446_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_stps2_class), -1, 1, 1, 1, 1, 0, "u 'stps2_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncstpln_class(void) {
   /* stpln_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_stpln_class));
   G__memfunc_setup("stpln_class",1190,G__sdfdrtDict_447_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_stpln_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_447_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&stpln_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_447_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&stpln_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_447_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&stpln_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_447_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&stpln_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_447_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_447_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&stpln_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_447_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&stpln_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_447_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&stpln_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_447_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&stpln_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("stpln_class", 1190, G__sdfdrtDict_447_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_stpln_class), -1, 0, 1, 1, 1, 0, "u 'stpln_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~stpln_class", 1316, G__sdfdrtDict_447_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_447_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_stpln_class), -1, 1, 1, 1, 1, 0, "u 'stpln_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunchctim_class(void) {
   /* hctim_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_hctim_class));
   G__memfunc_setup("hctim_class",1162,G__sdfdrtDict_448_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_hctim_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_448_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&hctim_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_448_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hctim_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_448_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&hctim_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_448_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&hctim_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_448_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_448_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hctim_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_448_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hctim_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_448_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hctim_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_448_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hctim_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("hctim_class", 1162, G__sdfdrtDict_448_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_hctim_class), -1, 0, 1, 1, 1, 0, "u 'hctim_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~hctim_class", 1288, G__sdfdrtDict_448_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_448_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_hctim_class), -1, 1, 1, 1, 1, 0, "u 'hctim_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunchcbin_class(void) {
   /* hcbin_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_hcbin_class));
   G__memfunc_setup("hcbin_class",1145,G__sdfdrtDict_449_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_hcbin_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_449_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&hcbin_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_449_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcbin_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_449_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&hcbin_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_449_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&hcbin_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_449_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_449_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcbin_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_449_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcbin_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_449_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcbin_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_449_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcbin_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("hcbin_class", 1145, G__sdfdrtDict_449_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_hcbin_class), -1, 0, 1, 1, 1, 0, "u 'hcbin_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~hcbin_class", 1271, G__sdfdrtDict_449_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_449_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_hcbin_class), -1, 1, 1, 1, 1, 0, "u 'hcbin_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncprfc_class(void) {
   /* prfc_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_prfc_class));
   G__memfunc_setup("prfc_class",1056,G__sdfdrtDict_450_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_prfc_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_450_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&prfc_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_450_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&prfc_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_450_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&prfc_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_450_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&prfc_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_450_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_450_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&prfc_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_450_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&prfc_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_450_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&prfc_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_450_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&prfc_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("prfc_class", 1056, G__sdfdrtDict_450_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_prfc_class), -1, 0, 1, 1, 1, 0, "u 'prfc_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~prfc_class", 1182, G__sdfdrtDict_450_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_450_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_prfc_class), -1, 1, 1, 1, 1, 0, "u 'prfc_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncfdatmos_param_class(void) {
   /* fdatmos_param_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_fdatmos_param_class));
   G__memfunc_setup("fdatmos_param_class",2003,G__sdfdrtDict_451_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_fdatmos_param_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromDST",1055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadToDST",846,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearOutDST",1066,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sdfdrtDict_451_0_5, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&fdatmos_param_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_451_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&fdatmos_param_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_451_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&fdatmos_param_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_451_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&fdatmos_param_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_451_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_451_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&fdatmos_param_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_451_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&fdatmos_param_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_451_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&fdatmos_param_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_451_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&fdatmos_param_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("fdatmos_param_class", 2003, G__sdfdrtDict_451_0_17, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_fdatmos_param_class), -1, 0, 1, 1, 1, 0, "u 'fdatmos_param_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~fdatmos_param_class", 2129, G__sdfdrtDict_451_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_451_0_19, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_fdatmos_param_class), -1, 1, 1, 1, 1, 0, "u 'fdatmos_param_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgdas_class(void) {
   /* gdas_class */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_gdas_class));
   G__memfunc_setup("gdas_class",1044,G__sdfdrtDict_452_0_1, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_gdas_class), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sdfdrtDict_452_0_2, 85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&gdas_class::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sdfdrtDict_452_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&gdas_class::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sdfdrtDict_452_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&gdas_class::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sdfdrtDict_452_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&gdas_class::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sdfdrtDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sdfdrtDict_452_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sdfdrtDict_452_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&gdas_class::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sdfdrtDict_452_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&gdas_class::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sdfdrtDict_452_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&gdas_class::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sdfdrtDict_452_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&gdas_class::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("gdas_class", 1044, G__sdfdrtDict_452_0_14, (int) ('i'), G__get_linked_tagnum(&G__sdfdrtDictLN_gdas_class), -1, 0, 1, 1, 1, 0, "u 'gdas_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~gdas_class", 1170, G__sdfdrtDict_452_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sdfdrtDict_452_0_16, (int) ('u'), G__get_linked_tagnum(&G__sdfdrtDictLN_gdas_class), -1, 1, 1, 1, 1, 0, "u 'gdas_class' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR(void) {
   /* vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__sdfdrtDict_454_0_1, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR), G__defined_typename("vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__sdfdrtDict_454_0_2, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR), G__defined_typename("vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__sdfdrtDict_454_0_3, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__sdfdrtDict_454_0_4, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__sdfdrtDict_454_0_5, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__sdfdrtDict_454_0_6, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__sdfdrtDict_454_0_7, 107, -1, G__defined_typename("vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__sdfdrtDict_454_0_8, 107, -1, G__defined_typename("vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_454_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_454_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type' 0 - sz u 'vector<unsigned char,allocator<unsigned char> >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__sdfdrtDict_454_0_11, 107, -1, G__defined_typename("vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__sdfdrtDict_454_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_454_0_13, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR), G__defined_typename("vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_454_0_14, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR), G__defined_typename("vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >",11080,G__sdfdrtDict_454_0_15, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >",11080,G__sdfdrtDict_454_0_16, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type' 0 - n u 'vector<unsigned char,allocator<unsigned char> >' - 11 '(vector<unsigned char,allocator<unsigned char> >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >",11080,G__sdfdrtDict_454_0_17, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >",11080,G__sdfdrtDict_454_0_18, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator' 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::const_iterator' 10 - first u 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator' 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sdfdrtDict_454_0_19, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__sdfdrtDict_454_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__sdfdrtDict_454_0_21, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__sdfdrtDict_454_0_22, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__sdfdrtDict_454_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<unsigned char,allocator<unsigned char> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__sdfdrtDict_454_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_454_0_25, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator' - 0 - position u 'vector<unsigned char,allocator<unsigned char> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_454_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator' - 0 - position u 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator' 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::const_iterator' 10 - first "
"u 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator' 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_454_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator' - 0 - position k - 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::size_type' 0 - n "
"u 'vector<unsigned char,allocator<unsigned char> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__sdfdrtDict_454_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_454_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_454_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator' - 0 - first u 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__sdfdrtDict_454_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >", 11206, G__sdfdrtDict_454_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR(void) {
   /* vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__sdfdrtDict_458_0_1, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__sdfdrtDict_458_0_2, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__sdfdrtDict_458_0_3, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__sdfdrtDict_458_0_4, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__sdfdrtDict_458_0_5, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__sdfdrtDict_458_0_6, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__sdfdrtDict_458_0_7, 107, -1, G__defined_typename("vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__sdfdrtDict_458_0_8, 107, -1, G__defined_typename("vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_458_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_458_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type' 0 - sz u 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__sdfdrtDict_458_0_11, 107, -1, G__defined_typename("vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__sdfdrtDict_458_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_458_0_13, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_458_0_14, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >",24132,G__sdfdrtDict_458_0_15, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >",24132,G__sdfdrtDict_458_0_16, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type' 0 - n u 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >' - 11 '(vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >",24132,G__sdfdrtDict_458_0_17, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >",24132,G__sdfdrtDict_458_0_18, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator' 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::const_iterator' 10 - first u 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator' 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sdfdrtDict_458_0_19, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__sdfdrtDict_458_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__sdfdrtDict_458_0_21, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__sdfdrtDict_458_0_22, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__sdfdrtDict_458_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__sdfdrtDict_458_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_458_0_25, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator' - 0 - position u 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_458_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator' - 0 - position u 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator' 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::const_iterator' 10 - first "
"u 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator' 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_458_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator' - 0 - position k - 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::size_type' 0 - n "
"u 'vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__sdfdrtDict_458_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_458_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_458_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator' - 0 - first u 'vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__sdfdrtDict_458_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >", 24258, G__sdfdrtDict_458_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR(void) {
   /* vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__sdfdrtDict_462_0_1, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR), G__defined_typename("vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__sdfdrtDict_462_0_2, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR), G__defined_typename("vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__sdfdrtDict_462_0_3, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__sdfdrtDict_462_0_4, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__sdfdrtDict_462_0_5, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__sdfdrtDict_462_0_6, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__sdfdrtDict_462_0_7, 107, -1, G__defined_typename("vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__sdfdrtDict_462_0_8, 107, -1, G__defined_typename("vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_462_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_462_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type' 0 - sz u 'vector<char,allocator<char> >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__sdfdrtDict_462_0_11, 107, -1, G__defined_typename("vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__sdfdrtDict_462_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_462_0_13, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR), G__defined_typename("vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_462_0_14, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR), G__defined_typename("vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >",7508,G__sdfdrtDict_462_0_15, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >",7508,G__sdfdrtDict_462_0_16, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type' 0 - n u 'vector<char,allocator<char> >' - 11 '(vector<char,allocator<char> >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >",7508,G__sdfdrtDict_462_0_17, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >",7508,G__sdfdrtDict_462_0_18, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator' 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::const_iterator' 10 - first u 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator' 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sdfdrtDict_462_0_19, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__sdfdrtDict_462_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__sdfdrtDict_462_0_21, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__sdfdrtDict_462_0_22, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__sdfdrtDict_462_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<char,allocator<char> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__sdfdrtDict_462_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_462_0_25, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator' - 0 - position u 'vector<char,allocator<char> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_462_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator' - 0 - position u 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator' 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::const_iterator' 10 - first "
"u 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator' 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_462_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator' - 0 - position k - 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::size_type' 0 - n "
"u 'vector<char,allocator<char> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__sdfdrtDict_462_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_462_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_462_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator' - 0 - first u 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__sdfdrtDict_462_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >", 7634, G__sdfdrtDict_462_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR(void) {
   /* vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__sdfdrtDict_466_0_1, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__sdfdrtDict_466_0_2, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__sdfdrtDict_466_0_3, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__sdfdrtDict_466_0_4, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__sdfdrtDict_466_0_5, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__sdfdrtDict_466_0_6, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__sdfdrtDict_466_0_7, 107, -1, G__defined_typename("vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__sdfdrtDict_466_0_8, 107, -1, G__defined_typename("vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_466_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_466_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type' 0 - sz u 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__sdfdrtDict_466_0_11, 107, -1, G__defined_typename("vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__sdfdrtDict_466_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_466_0_13, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_466_0_14, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >",16988,G__sdfdrtDict_466_0_15, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >",16988,G__sdfdrtDict_466_0_16, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type' 0 - n u 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >' - 11 '(vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >",16988,G__sdfdrtDict_466_0_17, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >",16988,G__sdfdrtDict_466_0_18, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator' 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::const_iterator' 10 - first u 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator' 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sdfdrtDict_466_0_19, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__sdfdrtDict_466_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__sdfdrtDict_466_0_21, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__sdfdrtDict_466_0_22, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__sdfdrtDict_466_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__sdfdrtDict_466_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_466_0_25, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator' - 0 - position u 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_466_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator' - 0 - position u 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator' 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::const_iterator' 10 - first "
"u 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator' 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_466_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator' - 0 - position k - 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::size_type' 0 - n "
"u 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__sdfdrtDict_466_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_466_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_466_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator' - 0 - first u 'vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__sdfdrtDict_466_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >", 17114, G__sdfdrtDict_466_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR(void) {
   /* vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__sdfdrtDict_470_0_1, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__sdfdrtDict_470_0_2, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__sdfdrtDict_470_0_3, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__sdfdrtDict_470_0_4, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__sdfdrtDict_470_0_5, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__sdfdrtDict_470_0_6, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__sdfdrtDict_470_0_7, 107, -1, G__defined_typename("vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__sdfdrtDict_470_0_8, 107, -1, G__defined_typename("vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_470_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__sdfdrtDict_470_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type' 0 - sz u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__sdfdrtDict_470_0_11, 107, -1, G__defined_typename("vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__sdfdrtDict_470_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_470_0_13, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__sdfdrtDict_470_0_14, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), G__defined_typename("vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >",17948,G__sdfdrtDict_470_0_15, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >",17948,G__sdfdrtDict_470_0_16, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type' 0 - n u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >' - 11 '(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >",17948,G__sdfdrtDict_470_0_17, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >",17948,G__sdfdrtDict_470_0_18, 105, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator' 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::const_iterator' 10 - first u 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator' 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sdfdrtDict_470_0_19, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__sdfdrtDict_470_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__sdfdrtDict_470_0_21, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__sdfdrtDict_470_0_22, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__sdfdrtDict_470_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__sdfdrtDict_470_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_470_0_25, 117, G__get_linked_tagnum(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator' - 0 - position u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_470_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator' - 0 - position u 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator' 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::const_iterator' 10 - first "
"u 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator' 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__sdfdrtDict_470_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator' - 0 - position k - 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::size_type' 0 - n "
"u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__sdfdrtDict_470_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_470_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__sdfdrtDict_470_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator' - 0 - first u 'vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__sdfdrtDict_470_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >", 18074, G__sdfdrtDict_470_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncsdfdrtDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalsdfdrtDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {
}

static void G__cpp_setup_func31() {
}

static void G__cpp_setup_func32() {
}

static void G__cpp_setup_func33() {
}

static void G__cpp_setup_func34() {
}

static void G__cpp_setup_func35() {
}

static void G__cpp_setup_func36() {
}

static void G__cpp_setup_func37() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcsdfdrtDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
  G__cpp_setup_func31();
  G__cpp_setup_func32();
  G__cpp_setup_func33();
  G__cpp_setup_func34();
  G__cpp_setup_func35();
  G__cpp_setup_func36();
  G__cpp_setup_func37();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__sdfdrtDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR = { "vector<char,allocator<char> >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgRcLcLiterator = { "vector<char,allocator<char> >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEcharcOallocatorlEchargRsPgRcLcLiteratorgR = { "reverse_iterator<vector<char,allocator<char> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR = { "vector<short,allocator<short> >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgRcLcLiterator = { "vector<short,allocator<short> >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEshortcOallocatorlEshortgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<short,allocator<short> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR = { "vector<unsigned char,allocator<unsigned char> >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcLcLiterator = { "vector<unsigned char,allocator<unsigned char> >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcLcLiteratorgR = { "reverse_iterator<vector<unsigned char,allocator<unsigned char> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR = { "vector<unsigned short,allocator<unsigned short> >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgRcLcLiterator = { "vector<float,allocator<float> >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<float,allocator<float> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgRcLcLiterator = { "vector<double,allocator<double> >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<double,allocator<double> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_dstbank_class = { "dstbank_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_talex00_class = { "talex00_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator = { "vector<int,allocator<int> >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR = { "vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator = { "vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR = { "vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiterator = { "vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR = { "vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator = { "vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR = { "vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiterator = { "vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_rusdraw_class = { "rusdraw_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_rusdmc_class = { "rusdmc_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_rusdmc1_class = { "rusdmc1_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_showlib_class = { "showlib_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_bsdinfo_class = { "bsdinfo_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_sdtrgbk_class = { "sdtrgbk_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR = { "vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcLcLiterator = { "vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR = { "vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgRcLcLiterator = { "vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_SDEventSubData_class = { "SDEventSubData_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_tasdevent_class = { "tasdevent_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR = { "vector<SDEventSubData_class,allocator<SDEventSubData_class> >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgRcLcLiterator = { "vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SDEventSubData_class,allocator<SDEventSubData_class> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_SDCalibHostData_class = { "SDCalibHostData_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_SDCalibSubData_class = { "SDCalibSubData_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR = { "vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator = { "vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_SDCalibWeatherData_class = { "SDCalibWeatherData_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_tasdcalib_class = { "tasdcalib_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR = { "vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgRcLcLiterator = { "vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR = { "vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgRcLcLiterator = { "vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR = { "vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgRcLcLiterator = { "vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_SDCalibevData_class = { "SDCalibevData_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_SDCalibevWeatherData_class = { "SDCalibevWeatherData_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_SDCalibevSimInfo_class = { "SDCalibevSimInfo_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_tasdcalibev_class = { "tasdcalibev_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR = { "vector<SDCalibevData_class,allocator<SDCalibevData_class> >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgRcLcLiterator = { "vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SDCalibevData_class,allocator<SDCalibevData_class> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR = { "vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgRcLcLiterator = { "vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_rufptn_class = { "rufptn_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_rusdgeom_class = { "rusdgeom_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_rufldf_class = { "rufldf_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_etrack_class = { "etrack_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_atmpar_class = { "atmpar_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_fdraw_class = { "fdraw_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR = { "vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRsPgR = { "vector<vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > >,allocator<vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > > > >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > >,allocator<vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_brraw_class = { "brraw_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_lrraw_class = { "lrraw_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_fdplane_class = { "fdplane_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_brplane_class = { "brplane_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_lrplane_class = { "lrplane_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_fdprofile_class = { "fdprofile_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_brprofile_class = { "brprofile_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_lrprofile_class = { "lrprofile_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_fdtubeprofile_class = { "fdtubeprofile_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_brtubeprofile_class = { "brtubeprofile_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_lrtubeprofile_class = { "lrtubeprofile_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_hbar_class = { "hbar_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_hraw1_class = { "hraw1_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_mc04_class = { "mc04_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_mcraw_class = { "mcraw_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_stps2_class = { "stps2_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_stpln_class = { "stpln_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_hctim_class = { "hctim_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_hcbin_class = { "hcbin_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_prfc_class = { "prfc_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_fdatmos_param_class = { "fdatmos_param_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_gdas_class = { "gdas_class" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR = { "vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcLcLiterator = { "vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR = { "vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgRcLcLiterator = { "vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR = { "vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiterator = { "vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR = { "vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgRcLcLiterator = { "vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR = { "vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiterator = { "vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator" , 99 , -1 };
G__linked_taginfo G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablesdfdrtDict() {
  G__sdfdrtDictLN_TClass.tagnum = -1 ;
  G__sdfdrtDictLN_TBuffer.tagnum = -1 ;
  G__sdfdrtDictLN_TMemberInspector.tagnum = -1 ;
  G__sdfdrtDictLN_TObject.tagnum = -1 ;
  G__sdfdrtDictLN_TNamed.tagnum = -1 ;
  G__sdfdrtDictLN_TString.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEcharcOallocatorlEchargRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEshortcOallocatorlEshortgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_dstbank_class.tagnum = -1 ;
  G__sdfdrtDictLN_talex00_class.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_rusdraw_class.tagnum = -1 ;
  G__sdfdrtDictLN_rusdmc_class.tagnum = -1 ;
  G__sdfdrtDictLN_rusdmc1_class.tagnum = -1 ;
  G__sdfdrtDictLN_showlib_class.tagnum = -1 ;
  G__sdfdrtDictLN_bsdinfo_class.tagnum = -1 ;
  G__sdfdrtDictLN_sdtrgbk_class.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_SDEventSubData_class.tagnum = -1 ;
  G__sdfdrtDictLN_tasdevent_class.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_SDCalibHostData_class.tagnum = -1 ;
  G__sdfdrtDictLN_SDCalibSubData_class.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_SDCalibWeatherData_class.tagnum = -1 ;
  G__sdfdrtDictLN_tasdcalib_class.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_SDCalibevData_class.tagnum = -1 ;
  G__sdfdrtDictLN_SDCalibevWeatherData_class.tagnum = -1 ;
  G__sdfdrtDictLN_SDCalibevSimInfo_class.tagnum = -1 ;
  G__sdfdrtDictLN_tasdcalibev_class.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_rufptn_class.tagnum = -1 ;
  G__sdfdrtDictLN_rusdgeom_class.tagnum = -1 ;
  G__sdfdrtDictLN_rufldf_class.tagnum = -1 ;
  G__sdfdrtDictLN_etrack_class.tagnum = -1 ;
  G__sdfdrtDictLN_atmpar_class.tagnum = -1 ;
  G__sdfdrtDictLN_fdraw_class.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_brraw_class.tagnum = -1 ;
  G__sdfdrtDictLN_lrraw_class.tagnum = -1 ;
  G__sdfdrtDictLN_fdplane_class.tagnum = -1 ;
  G__sdfdrtDictLN_brplane_class.tagnum = -1 ;
  G__sdfdrtDictLN_lrplane_class.tagnum = -1 ;
  G__sdfdrtDictLN_fdprofile_class.tagnum = -1 ;
  G__sdfdrtDictLN_brprofile_class.tagnum = -1 ;
  G__sdfdrtDictLN_lrprofile_class.tagnum = -1 ;
  G__sdfdrtDictLN_fdtubeprofile_class.tagnum = -1 ;
  G__sdfdrtDictLN_brtubeprofile_class.tagnum = -1 ;
  G__sdfdrtDictLN_lrtubeprofile_class.tagnum = -1 ;
  G__sdfdrtDictLN_hbar_class.tagnum = -1 ;
  G__sdfdrtDictLN_hraw1_class.tagnum = -1 ;
  G__sdfdrtDictLN_mc04_class.tagnum = -1 ;
  G__sdfdrtDictLN_mcraw_class.tagnum = -1 ;
  G__sdfdrtDictLN_stps2_class.tagnum = -1 ;
  G__sdfdrtDictLN_stpln_class.tagnum = -1 ;
  G__sdfdrtDictLN_hctim_class.tagnum = -1 ;
  G__sdfdrtDictLN_hcbin_class.tagnum = -1 ;
  G__sdfdrtDictLN_prfc_class.tagnum = -1 ;
  G__sdfdrtDictLN_fdatmos_param_class.tagnum = -1 ;
  G__sdfdrtDictLN_gdas_class.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablesdfdrtDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_TString);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgR),0,-1,36608,(char*)NULL,NULL,NULL);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEcharcOallocatorlEchargRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEcharcOallocatorlEchargRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgR),0,-1,36608,(char*)NULL,NULL,NULL);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEshortcOallocatorlEshortgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEshortcOallocatorlEshortgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR),0,-1,36608,(char*)NULL,NULL,NULL);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,-1,36608,(char*)NULL,NULL,NULL);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEfloatcOallocatorlEfloatgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1,36608,(char*)NULL,NULL,NULL);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEdoublecOallocatorlEdoublegRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_dstbank_class),sizeof(dstbank_class),-1,62720,(char*)NULL,G__setup_memvardstbank_class,G__setup_memfuncdstbank_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_talex00_class),sizeof(talex00_class),-1,62720,(char*)NULL,G__setup_memvartalex00_class,G__setup_memfunctalex00_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgR),sizeof(vector<int,allocator<int> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEintcOallocatorlEintgRsPgR,G__setup_memfuncvectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),sizeof(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >),-1,36608,(char*)NULL,G__setup_memvarvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR),sizeof(vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >),-1,36608,(char*)NULL,G__setup_memvarvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),sizeof(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >),-1,36608,(char*)NULL,G__setup_memvarvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),sizeof(vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >),-1,36608,(char*)NULL,G__setup_memvarvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_rusdraw_class),sizeof(rusdraw_class),-1,62720,(char*)NULL,G__setup_memvarrusdraw_class,G__setup_memfuncrusdraw_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_rusdmc_class),sizeof(rusdmc_class),-1,62720,(char*)NULL,G__setup_memvarrusdmc_class,G__setup_memfuncrusdmc_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_rusdmc1_class),sizeof(rusdmc1_class),-1,62720,(char*)NULL,G__setup_memvarrusdmc1_class,G__setup_memfuncrusdmc1_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_showlib_class),sizeof(showlib_class),-1,62720,(char*)NULL,G__setup_memvarshowlib_class,G__setup_memfuncshowlib_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_bsdinfo_class),sizeof(bsdinfo_class),-1,62720,(char*)NULL,G__setup_memvarbsdinfo_class,G__setup_memfuncbsdinfo_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_sdtrgbk_class),sizeof(sdtrgbk_class),-1,62720,(char*)NULL,G__setup_memvarsdtrgbk_class,G__setup_memfuncsdtrgbk_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),sizeof(vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >),-1,36608,(char*)NULL,G__setup_memvarvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR),sizeof(vector<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >,allocator<vector<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > > > >),-1,36608,(char*)NULL,G__setup_memvarvectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_SDEventSubData_class),sizeof(SDEventSubData_class),-1,62720,(char*)NULL,G__setup_memvarSDEventSubData_class,G__setup_memfuncSDEventSubData_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_tasdevent_class),sizeof(tasdevent_class),-1,62720,(char*)NULL,G__setup_memvartasdevent_class,G__setup_memfunctasdevent_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR),sizeof(vector<SDEventSubData_class,allocator<SDEventSubData_class> >),-1,36608,(char*)NULL,G__setup_memvarvectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR,G__setup_memfuncvectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDEventSubData_classcOallocatorlESDEventSubData_classgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_SDCalibHostData_class),sizeof(SDCalibHostData_class),-1,62720,(char*)NULL,G__setup_memvarSDCalibHostData_class,G__setup_memfuncSDCalibHostData_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_SDCalibSubData_class),sizeof(SDCalibSubData_class),-1,62720,(char*)NULL,G__setup_memvarSDCalibSubData_class,G__setup_memfuncSDCalibSubData_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),sizeof(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >),-1,36608,(char*)NULL,G__setup_memvarvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_SDCalibWeatherData_class),sizeof(SDCalibWeatherData_class),-1,1280,(char*)NULL,G__setup_memvarSDCalibWeatherData_class,G__setup_memfuncSDCalibWeatherData_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_tasdcalib_class),sizeof(tasdcalib_class),-1,62720,(char*)NULL,G__setup_memvartasdcalib_class,G__setup_memfunctasdcalib_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR),sizeof(vector<SDCalibHostData_class,allocator<SDCalibHostData_class> >),-1,36608,(char*)NULL,G__setup_memvarvectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR,G__setup_memfuncvectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibHostData_classcOallocatorlESDCalibHostData_classgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR),sizeof(vector<SDCalibSubData_class,allocator<SDCalibSubData_class> >),-1,36608,(char*)NULL,G__setup_memvarvectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR,G__setup_memfuncvectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibSubData_classcOallocatorlESDCalibSubData_classgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR),sizeof(vector<SDCalibWeatherData_class,allocator<SDCalibWeatherData_class> >),-1,36608,(char*)NULL,G__setup_memvarvectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR,G__setup_memfuncvectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibWeatherData_classcOallocatorlESDCalibWeatherData_classgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_SDCalibevData_class),sizeof(SDCalibevData_class),-1,62720,(char*)NULL,G__setup_memvarSDCalibevData_class,G__setup_memfuncSDCalibevData_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_SDCalibevWeatherData_class),sizeof(SDCalibevWeatherData_class),-1,62720,(char*)NULL,G__setup_memvarSDCalibevWeatherData_class,G__setup_memfuncSDCalibevWeatherData_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_SDCalibevSimInfo_class),sizeof(SDCalibevSimInfo_class),-1,62720,(char*)NULL,G__setup_memvarSDCalibevSimInfo_class,G__setup_memfuncSDCalibevSimInfo_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_tasdcalibev_class),sizeof(tasdcalibev_class),-1,62720,(char*)NULL,G__setup_memvartasdcalibev_class,G__setup_memfunctasdcalibev_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR),sizeof(vector<SDCalibevData_class,allocator<SDCalibevData_class> >),-1,36608,(char*)NULL,G__setup_memvarvectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR,G__setup_memfuncvectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibevData_classcOallocatorlESDCalibevData_classgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR),sizeof(vector<SDCalibevWeatherData_class,allocator<SDCalibevWeatherData_class> >),-1,36608,(char*)NULL,G__setup_memvarvectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR,G__setup_memfuncvectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlESDCalibevWeatherData_classcOallocatorlESDCalibevWeatherData_classgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_rufptn_class),sizeof(rufptn_class),-1,62720,(char*)NULL,G__setup_memvarrufptn_class,G__setup_memfuncrufptn_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_rusdgeom_class),sizeof(rusdgeom_class),-1,62720,(char*)NULL,G__setup_memvarrusdgeom_class,G__setup_memfuncrusdgeom_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_rufldf_class),sizeof(rufldf_class),-1,62720,(char*)NULL,G__setup_memvarrufldf_class,G__setup_memfuncrufldf_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_etrack_class),sizeof(etrack_class),-1,62720,(char*)NULL,G__setup_memvaretrack_class,G__setup_memfuncetrack_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_atmpar_class),sizeof(atmpar_class),-1,62720,(char*)NULL,G__setup_memvaratmpar_class,G__setup_memfuncatmpar_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_fdraw_class),sizeof(fdraw_class),-1,62720,(char*)NULL,G__setup_memvarfdraw_class,G__setup_memfuncfdraw_class);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_brraw_class),sizeof(brraw_class),-1,62720,(char*)NULL,G__setup_memvarbrraw_class,G__setup_memfuncbrraw_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_lrraw_class),sizeof(lrraw_class),-1,62720,(char*)NULL,G__setup_memvarlrraw_class,G__setup_memfunclrraw_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_fdplane_class),sizeof(fdplane_class),-1,62720,(char*)NULL,G__setup_memvarfdplane_class,G__setup_memfuncfdplane_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_brplane_class),sizeof(brplane_class),-1,62720,(char*)NULL,G__setup_memvarbrplane_class,G__setup_memfuncbrplane_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_lrplane_class),sizeof(lrplane_class),-1,62720,(char*)NULL,G__setup_memvarlrplane_class,G__setup_memfunclrplane_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_fdprofile_class),sizeof(fdprofile_class),-1,62720,(char*)NULL,G__setup_memvarfdprofile_class,G__setup_memfuncfdprofile_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_brprofile_class),sizeof(brprofile_class),-1,62720,(char*)NULL,G__setup_memvarbrprofile_class,G__setup_memfuncbrprofile_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_lrprofile_class),sizeof(lrprofile_class),-1,62720,(char*)NULL,G__setup_memvarlrprofile_class,G__setup_memfunclrprofile_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_fdtubeprofile_class),sizeof(fdtubeprofile_class),-1,62720,(char*)NULL,G__setup_memvarfdtubeprofile_class,G__setup_memfuncfdtubeprofile_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_brtubeprofile_class),sizeof(brtubeprofile_class),-1,62720,(char*)NULL,G__setup_memvarbrtubeprofile_class,G__setup_memfuncbrtubeprofile_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_lrtubeprofile_class),sizeof(lrtubeprofile_class),-1,62720,(char*)NULL,G__setup_memvarlrtubeprofile_class,G__setup_memfunclrtubeprofile_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_hbar_class),sizeof(hbar_class),-1,62720,(char*)NULL,G__setup_memvarhbar_class,G__setup_memfunchbar_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_hraw1_class),sizeof(hraw1_class),-1,62720,(char*)NULL,G__setup_memvarhraw1_class,G__setup_memfunchraw1_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_mc04_class),sizeof(mc04_class),-1,62720,(char*)NULL,G__setup_memvarmc04_class,G__setup_memfuncmc04_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_mcraw_class),sizeof(mcraw_class),-1,62720,(char*)NULL,G__setup_memvarmcraw_class,G__setup_memfuncmcraw_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_stps2_class),sizeof(stps2_class),-1,62720,(char*)NULL,G__setup_memvarstps2_class,G__setup_memfuncstps2_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_stpln_class),sizeof(stpln_class),-1,62720,(char*)NULL,G__setup_memvarstpln_class,G__setup_memfuncstpln_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_hctim_class),sizeof(hctim_class),-1,62720,(char*)NULL,G__setup_memvarhctim_class,G__setup_memfunchctim_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_hcbin_class),sizeof(hcbin_class),-1,62720,(char*)NULL,G__setup_memvarhcbin_class,G__setup_memfunchcbin_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_prfc_class),sizeof(prfc_class),-1,62720,(char*)NULL,G__setup_memvarprfc_class,G__setup_memfuncprfc_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_fdatmos_param_class),sizeof(fdatmos_param_class),-1,62720,(char*)NULL,G__setup_memvarfdatmos_param_class,G__setup_memfuncfdatmos_param_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_gdas_class),sizeof(gdas_class),-1,62720,(char*)NULL,G__setup_memvargdas_class,G__setup_memfuncgdas_class);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR),sizeof(vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >),-1,36608,(char*)NULL,G__setup_memvarvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR),sizeof(vector<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > >,allocator<vector<vector<unsigned char,allocator<unsigned char> >,allocator<vector<unsigned char,allocator<unsigned char> > > > > >),-1,36608,(char*)NULL,G__setup_memvarvectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRcOallocatorlEvectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR),sizeof(vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >),-1,36608,(char*)NULL,G__setup_memvarvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR),sizeof(vector<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >,allocator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > > > >),-1,36608,(char*)NULL,G__setup_memvarvectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR),sizeof(vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >),-1,36608,(char*)NULL,G__setup_memvarvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sdfdrtDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupsdfdrtDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupsdfdrtDict()");
  G__set_cpp_environmentsdfdrtDict();
  G__cpp_setup_tagtablesdfdrtDict();

  G__cpp_setup_inheritancesdfdrtDict();

  G__cpp_setup_typetablesdfdrtDict();

  G__cpp_setup_memvarsdfdrtDict();

  G__cpp_setup_memfuncsdfdrtDict();
  G__cpp_setup_globalsdfdrtDict();
  G__cpp_setup_funcsdfdrtDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncsdfdrtDict();
  return;
}
class G__cpp_setup_initsdfdrtDict {
  public:
    G__cpp_setup_initsdfdrtDict() { G__add_setup_func("sdfdrtDict",(G__incsetup)(&G__cpp_setupsdfdrtDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initsdfdrtDict() { G__remove_setup_func("sdfdrtDict"); }
};
G__cpp_setup_initsdfdrtDict G__cpp_setup_initializersdfdrtDict;

