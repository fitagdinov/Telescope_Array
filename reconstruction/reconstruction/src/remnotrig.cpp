#include <stdio.h>
#include <cstdlib>
#include <string.h>
#include <math.h>
#include "event.h"
#include "filestack.h"
#include "sddstio.h"
#include "sduti.h"
#include <ctype.h>
#include <cmath>

// suffixes for the auto-generted output files
#define sdtriggered_suf ".trg.dst.gz"


class sdtriggered_listOfOpt
{
  
public:
  
  char   outfile[0x400];
  char   dout[0x400];
  int    tb_delta_ped;
  bool   fOverwrite;
  bool   verbose;
  
  sdtriggered_listOfOpt()
  {
    sprintf(dout,"./");  // default output directory
    outfile[0] = 0;      // output file initialized
    tb_delta_ped = 0;    // don't raise/lowe pedestal requirements for trigger back up by default
    fOverwrite = false;  // don't overwrite the output files if they exist by default
    verbose    = false;  // don't print extra stuff by default
  }
  ~sdtriggered_listOfOpt() { ; }
  

  bool parseCmdLine(int argc, char **argv)
  {
    int i;
    char inBuf[0x400];
   
    if (argc <= 1)
      {
	printMan(argv[0]);
	return false;
      }

    for (i = 1; i < argc; i++)
      {
	// man
	if ( 
	    (strcmp("-h",argv[i]) == 0) || 
	    (strcmp("--h",argv[i]) == 0) ||
	    (strcmp("-help",argv[i]) == 0) ||
	    (strcmp("--help",argv[i]) == 0) ||
	    (strcmp("-?",argv[i]) == 0) ||
	    (strcmp("--?",argv[i]) == 0) ||
	    (strcmp("/?",argv[i]) == 0)
	     )
	  {
	    printMan(argv[0]);
	    return false;
	  }
      
	// list file
	else if (strcmp("-i", argv[i]) == 0)
	  {
	    FILE *fp = 0;
	    char* line = 0;
	    if ((++i >= argc) || !argv[i] || (argv[i][0] == '-'))
	      {
		fprintf(stderr,"error: -i: specify the list file\n");
		return false;
	      }
	    if (!(fp = fopen(argv[i], "r")))
	      {
		fprintf(stderr, "error: can't open %s\n", argv[i]);
		return false;
	      }
	    while (fgets(inBuf, 0x400, fp))
	      {
		if (!((line = strtok(inBuf, " \t\r\n"))) || !strlen(line))
		  continue;
		if (pushFile(line) != SUCCESS)
		  return false;
	      }
	    fclose(fp); 
	  }
	// standard input
	else if (strcmp("--tty", argv[i]) == 0)
	  {
	    char* line = 0;
	    while (fgets(inBuf, 0x400, stdin))
	      {
		if (!((line = strtok(inBuf, " \t\r\n"))) || !strlen(line))
		  continue;
		if (pushFile(line) != SUCCESS)
		  return false;
	      }
	  }
	// output directory
	else if (strcmp("-o", argv[i]) == 0)
	  {
	    if ((++i >= argc) || !argv[i] || (argv[i][0] == '-'))
	      {
		fprintf(stderr, "error: specify the output directory\n");
		return false;
	      }
	    else
	      sscanf(argv[i], "%1023s", dout);
	  }
	// signle output file
	else if (strcmp("-o1f", argv[i]) == 0)
	  {
	    if ((++i >= argc) || !argv[i] || (argv[i][0] == '-'))
	      {
		fprintf(stderr, "error: specify the output file\n");
		return false;
	      }
	    else
	      sscanf(argv[i], "%1023s", outfile);
	  }
	// trigger backup cut details
	else if (strcmp ("-tb", argv[i]) == 0)
	  {
	    if ((++i >= argc) || !argv[i] || (argv[i][0] == '-' && !isdigit(argv[i][1])))
	      {
		fprintf(stderr, "error: -tb: specify tb_delta_ped value!\n");
		return false;
	      }
	    sscanf (argv[i], "%d", &tb_delta_ped);
	  }
	// force overwrite mode
	else if (strcmp("-f", argv[i]) == 0)
	  fOverwrite = true;
	
	// verbose mode
	else if (strcmp("-v", argv[i]) == 0)
	  verbose = true;
	// all arguments w/o the '-' switch should be the input files
	else if (argv[i][0] != '-')
	  {
	    if (pushFile(argv[i]) != SUCCESS)
	      return false;
	  }
	else
	  {
	    fprintf(stderr, "error: %s: unrecognized option\n", argv[i]);
	    return false;
	  }
      }
    if (countFiles()==0)
      {
	fprintf(stderr,"error: no input files\n");
	return false;
      }
    return true;
  }
 
  void printMan(char* progName)
  {
    fprintf(stderr,"\nRemove all events that did not pass the SD trigger verification (also known as\n");
    fprintf(stderr,"SD trigger back up).  This program should be executed after sdtrgbk.run program, it requires sdtrgbk DST bank\n");
    fprintf(stderr,"\nusage: %s [in_file1 ...] and/or -i [list file]  -o [output directory]\n",progName);
    fprintf(stderr,"pass input dst file names as arguments without any prefixes or switches\n");
    fprintf(stderr, "-i <string>    : specify the want file (with dst files)\n");
    fprintf(stderr, "--tty <string> : or get input dst file names from stdin\n");
    fprintf(stderr, "-o <string>    : specify the output directory; output files are auto-generated by adding '%s'\n",
	    sdtriggered_suf);
    fprintf(stderr, "                 suffix to input file basenames and are put to the output directory; default is %s\n",
	    dout);
    fprintf(stderr, "-o1f <string   : specify a single output file, overrides the -o option\n");
    fprintf(stderr, "-tb <int>      : (optional) trigger backup cut with raised (positive) or lowered (negative) pedestal, default: %d\n",
	    tb_delta_ped);
    fprintf(stderr, "-f             : overwrite the output files if they exist\n");
    fprintf(stderr, "-v             : verbose mode\n");
    fprintf(stderr,"\n");
  }
  
};


int main(int argc, char *argv[])
{
  
  char  oflgen[0x400]; // stores output files that are auto-generated by directory and suffix substitution
  
  // cmd line options
  sdtriggered_listOfOpt opt;
  if (!opt.parseCmdLine(argc,argv))
    return 2;
  
  // dst iterator
  sddstio_class dstio(opt.verbose);
 
  char* infile = 0;
  int nread=0;
  int nrem=0;
  int nwritten=0;
  while((infile=pullFile()))
    {
      if(!dstio.openDSTinFile(infile))
	return 2;
      
  
      while(dstio.readEvent())
	{
	  nread++;
	  
	  // throw out events that don't have sdtrgbk DST bank and print a warning message
	  if (!dstio.haveBank(SDTRGBK_BANKID,true))
	    {
	      nrem++;
	      continue;
	    }
	  
	  // event doesn't pass trigger backup in any case, 
	  // even when the pedestals are lowered to maximum possible amount
	  if(sdtrgbk_.igevent == 0)
	    {
	      nrem++;
	      continue;
	    }
	  // usual trigger backup cut, 
	  // without raising or lowering the pedestal
	  if(opt.tb_delta_ped == 0)
	    { 
	      if(sdtrgbk_.igevent < 2)
		{
		  nrem++;
		  continue;
		}
	    }
              
	  // if trigger backup cut with lowering the pedestal is allowed
	  if(opt.tb_delta_ped < 0)
	    {
	      // check if event passes SD trigger backup with pedestals lowered by at most requested amount
	      if(sdtrgbk_.igevent==1 && (int)sdtrgbk_.dec_ped > std::abs(opt.tb_delta_ped))
		{
		  nrem++;
		  continue;
		}
	    }
              
	  // trigger backup cut with raised pedestal option
	  if(opt.tb_delta_ped > 0)
	    {
	      // if event doesn't pass the trigger backup with raised pedestals
	      if(sdtrgbk_.igevent < 3)
		{
		  nrem++;
		  continue;
		}
	      // if the maximum pedestal increase that still results in a trigger
	      // is less than the one requested on the command line
	      if(sdtrgbk_.igevent == 3 && (int)sdtrgbk_.inc_ped < opt.tb_delta_ped)
		{
		  nrem++;
		  continue;
		}
	    }
	  
	  // write out the event
	  if (!dstio.outFileOpen())
	    {
	      if (opt.outfile[0])
		{
		  if(!dstio.openDSToutFile(opt.outfile,opt.fOverwrite))
		    return 2;
		}
	      else
		{
		  // To produce the output file name with correct suffix.
		  if (SDIO::makeOutFileName(infile,opt.dout,(char* )sdtriggered_suf,oflgen) != 1)
		    return 2;
		  if (!dstio.openDSToutFile(oflgen,opt.fOverwrite))
		    return 2;
		}
	    }
	  dstio.writeEvent();
	  nwritten++;
	}
      dstio.closeDSTinFile();
      if(!opt.outfile[0])
	dstio.closeDSToutFile();
    }
  
  // finilize the dst output file
  if(dstio.outFileOpen())
    dstio.closeDSToutFile();
  
  fprintf(stdout,"sdtriggered_events_read    : %d\n", nread);
  fprintf(stdout,"sdtriggered_events_written : %d\n", nwritten);
  fprintf(stdout,"sdtriggered_events_removed : %d\n", nrem);
  
  return 0; 
}

